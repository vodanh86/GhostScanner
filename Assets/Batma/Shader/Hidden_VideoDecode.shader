//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/VideoDecode" {
Properties {
_MainTex ("_MainTex (A)", 2D) = "black" { }
_SecondTex ("_SecondTex (A)", 2D) = "black" { }
_ThirdTex ("_ThirdTex (A)", 2D) = "black" { }
}
SubShader {
 Pass {
  Name "YCbCr_To_RGB1"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 41610
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0 = texture(_SecondTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_0) * vec2(0.390625, 1.984375);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat16_0 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_2 = texture(_ThirdTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = (-u_xlat16_2) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_2 * 1.59375;
    u_xlat16_1.y = u_xlat16_0 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0 = texture(_SecondTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_0) * vec2(0.390625, 1.984375);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat16_0 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_2 = texture(_ThirdTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = (-u_xlat16_2) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_2 * 1.59375;
    u_xlat16_1.y = u_xlat16_0 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0 = texture(_SecondTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_0) * vec2(0.390625, 1.984375);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat16_0 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_2 = texture(_ThirdTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = (-u_xlat16_2) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_2 * 1.59375;
    u_xlat16_1.y = u_xlat16_0 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 104
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %29 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %19 RelaxedPrecision 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 29 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %71 RelaxedPrecision 
                                             OpDecorate %71 DescriptorSet 71 
                                             OpDecorate %71 Binding 71 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %73 DescriptorSet 73 
                                             OpDecorate %73 Binding 73 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %100 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %18 = OpTypePointer UniformConstant %17 
UniformConstant read_only Texture2D* %19 = OpVariable UniformConstant 
                                     %21 = OpTypeSampler 
                                     %22 = OpTypePointer UniformConstant %21 
            UniformConstant sampler* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampledImage %17 
                                     %27 = OpTypeVector %6 2 
                                     %28 = OpTypePointer Input %27 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %33 = OpTypePointer Private %27 
                      Private f32_2* %34 = OpVariable Private 
                                 f32 %37 = OpConstant 3.674022E-40 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_2 %39 = OpConstantComposite %37 %38 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 0 
                        Private f32* %58 = OpVariable Private 
                                 u32 %61 = OpConstant 1 
                                 f32 %66 = OpConstant 3.674022E-40 
                                 u32 %68 = OpConstant 2 
                        Private f32* %70 = OpVariable Private 
UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
            UniformConstant sampler* %73 = OpVariable UniformConstant 
                                 f32 %81 = OpConstant 3.674022E-40 
                                 f32 %88 = OpConstant 3.674022E-40 
                                 f32 %97 = OpConstant 3.674022E-40 
                                 f32 %98 = OpConstant 3.674022E-40 
                               f32_2 %99 = OpConstantComposite %97 %98 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %20 = OpLoad %19 
                             sampler %24 = OpLoad %23 
          read_only Texture2DSampled %26 = OpSampledImage %20 %24 
                               f32_2 %30 = OpLoad vs_TEXCOORD0 
                               f32_4 %31 = OpImageSampleImplicitLod %26 %30 
                                 f32 %32 = OpCompositeExtract %31 3 
                                             OpStore %16 %32 
                                 f32 %35 = OpLoad %16 
                               f32_2 %36 = OpCompositeConstruct %35 %35 
                               f32_2 %40 = OpFMul %36 %39 
                                             OpStore %34 %40 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %46 = OpLoad vs_TEXCOORD0 
                               f32_4 %47 = OpImageSampleImplicitLod %45 %46 
                                 f32 %48 = OpCompositeExtract %47 3 
                                             OpStore %16 %48 
                                 f32 %49 = OpLoad %16 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %34 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                        Private f32* %57 = OpAccessChain %34 %52 
                                             OpStore %57 %56 
                                 f32 %59 = OpLoad %16 
                                 f32 %60 = OpFMul %59 %50 
                        Private f32* %62 = OpAccessChain %34 %61 
                                 f32 %63 = OpLoad %62 
                                 f32 %64 = OpFAdd %60 %63 
                                             OpStore %58 %64 
                                 f32 %65 = OpLoad %58 
                                 f32 %67 = OpFAdd %65 %66 
                         Output f32* %69 = OpAccessChain %9 %68 
                                             OpStore %69 %67 
                 read_only Texture2D %72 = OpLoad %71 
                             sampler %74 = OpLoad %73 
          read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                               f32_2 %76 = OpLoad vs_TEXCOORD0 
                               f32_4 %77 = OpImageSampleImplicitLod %75 %76 
                                 f32 %78 = OpCompositeExtract %77 3 
                                             OpStore %70 %78 
                                 f32 %79 = OpLoad %70 
                                 f32 %80 = OpFNegate %79 
                                 f32 %82 = OpFMul %80 %81 
                        Private f32* %83 = OpAccessChain %34 %52 
                                 f32 %84 = OpLoad %83 
                                 f32 %85 = OpFAdd %82 %84 
                        Private f32* %86 = OpAccessChain %34 %52 
                                             OpStore %86 %85 
                                 f32 %87 = OpLoad %70 
                                 f32 %89 = OpFMul %87 %88 
                                             OpStore %58 %89 
                                 f32 %90 = OpLoad %16 
                                 f32 %91 = OpFMul %90 %50 
                                 f32 %92 = OpLoad %58 
                                 f32 %93 = OpFAdd %91 %92 
                        Private f32* %94 = OpAccessChain %34 %61 
                                             OpStore %94 %93 
                               f32_2 %95 = OpLoad %34 
                               f32_2 %96 = OpVectorShuffle %95 %95 1 0 
                              f32_2 %100 = OpFAdd %96 %99 
                              f32_4 %101 = OpLoad %9 
                              f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                             OpStore %9 %102 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 104
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %29 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %19 RelaxedPrecision 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 29 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %71 RelaxedPrecision 
                                             OpDecorate %71 DescriptorSet 71 
                                             OpDecorate %71 Binding 71 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %73 DescriptorSet 73 
                                             OpDecorate %73 Binding 73 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %100 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %18 = OpTypePointer UniformConstant %17 
UniformConstant read_only Texture2D* %19 = OpVariable UniformConstant 
                                     %21 = OpTypeSampler 
                                     %22 = OpTypePointer UniformConstant %21 
            UniformConstant sampler* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampledImage %17 
                                     %27 = OpTypeVector %6 2 
                                     %28 = OpTypePointer Input %27 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %33 = OpTypePointer Private %27 
                      Private f32_2* %34 = OpVariable Private 
                                 f32 %37 = OpConstant 3.674022E-40 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_2 %39 = OpConstantComposite %37 %38 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 0 
                        Private f32* %58 = OpVariable Private 
                                 u32 %61 = OpConstant 1 
                                 f32 %66 = OpConstant 3.674022E-40 
                                 u32 %68 = OpConstant 2 
                        Private f32* %70 = OpVariable Private 
UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
            UniformConstant sampler* %73 = OpVariable UniformConstant 
                                 f32 %81 = OpConstant 3.674022E-40 
                                 f32 %88 = OpConstant 3.674022E-40 
                                 f32 %97 = OpConstant 3.674022E-40 
                                 f32 %98 = OpConstant 3.674022E-40 
                               f32_2 %99 = OpConstantComposite %97 %98 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %20 = OpLoad %19 
                             sampler %24 = OpLoad %23 
          read_only Texture2DSampled %26 = OpSampledImage %20 %24 
                               f32_2 %30 = OpLoad vs_TEXCOORD0 
                               f32_4 %31 = OpImageSampleImplicitLod %26 %30 
                                 f32 %32 = OpCompositeExtract %31 3 
                                             OpStore %16 %32 
                                 f32 %35 = OpLoad %16 
                               f32_2 %36 = OpCompositeConstruct %35 %35 
                               f32_2 %40 = OpFMul %36 %39 
                                             OpStore %34 %40 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %46 = OpLoad vs_TEXCOORD0 
                               f32_4 %47 = OpImageSampleImplicitLod %45 %46 
                                 f32 %48 = OpCompositeExtract %47 3 
                                             OpStore %16 %48 
                                 f32 %49 = OpLoad %16 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %34 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                        Private f32* %57 = OpAccessChain %34 %52 
                                             OpStore %57 %56 
                                 f32 %59 = OpLoad %16 
                                 f32 %60 = OpFMul %59 %50 
                        Private f32* %62 = OpAccessChain %34 %61 
                                 f32 %63 = OpLoad %62 
                                 f32 %64 = OpFAdd %60 %63 
                                             OpStore %58 %64 
                                 f32 %65 = OpLoad %58 
                                 f32 %67 = OpFAdd %65 %66 
                         Output f32* %69 = OpAccessChain %9 %68 
                                             OpStore %69 %67 
                 read_only Texture2D %72 = OpLoad %71 
                             sampler %74 = OpLoad %73 
          read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                               f32_2 %76 = OpLoad vs_TEXCOORD0 
                               f32_4 %77 = OpImageSampleImplicitLod %75 %76 
                                 f32 %78 = OpCompositeExtract %77 3 
                                             OpStore %70 %78 
                                 f32 %79 = OpLoad %70 
                                 f32 %80 = OpFNegate %79 
                                 f32 %82 = OpFMul %80 %81 
                        Private f32* %83 = OpAccessChain %34 %52 
                                 f32 %84 = OpLoad %83 
                                 f32 %85 = OpFAdd %82 %84 
                        Private f32* %86 = OpAccessChain %34 %52 
                                             OpStore %86 %85 
                                 f32 %87 = OpLoad %70 
                                 f32 %89 = OpFMul %87 %88 
                                             OpStore %58 %89 
                                 f32 %90 = OpLoad %16 
                                 f32 %91 = OpFMul %90 %50 
                                 f32 %92 = OpLoad %58 
                                 f32 %93 = OpFAdd %91 %92 
                        Private f32* %94 = OpAccessChain %34 %61 
                                             OpStore %94 %93 
                               f32_2 %95 = OpLoad %34 
                               f32_2 %96 = OpVectorShuffle %95 %95 1 0 
                              f32_2 %100 = OpFAdd %96 %99 
                              f32_4 %101 = OpLoad %9 
                              f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                             OpStore %9 %102 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 104
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %29 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %19 RelaxedPrecision 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 29 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %71 RelaxedPrecision 
                                             OpDecorate %71 DescriptorSet 71 
                                             OpDecorate %71 Binding 71 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %73 DescriptorSet 73 
                                             OpDecorate %73 Binding 73 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %100 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %18 = OpTypePointer UniformConstant %17 
UniformConstant read_only Texture2D* %19 = OpVariable UniformConstant 
                                     %21 = OpTypeSampler 
                                     %22 = OpTypePointer UniformConstant %21 
            UniformConstant sampler* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampledImage %17 
                                     %27 = OpTypeVector %6 2 
                                     %28 = OpTypePointer Input %27 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %33 = OpTypePointer Private %27 
                      Private f32_2* %34 = OpVariable Private 
                                 f32 %37 = OpConstant 3.674022E-40 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_2 %39 = OpConstantComposite %37 %38 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 0 
                        Private f32* %58 = OpVariable Private 
                                 u32 %61 = OpConstant 1 
                                 f32 %66 = OpConstant 3.674022E-40 
                                 u32 %68 = OpConstant 2 
                        Private f32* %70 = OpVariable Private 
UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
            UniformConstant sampler* %73 = OpVariable UniformConstant 
                                 f32 %81 = OpConstant 3.674022E-40 
                                 f32 %88 = OpConstant 3.674022E-40 
                                 f32 %97 = OpConstant 3.674022E-40 
                                 f32 %98 = OpConstant 3.674022E-40 
                               f32_2 %99 = OpConstantComposite %97 %98 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %20 = OpLoad %19 
                             sampler %24 = OpLoad %23 
          read_only Texture2DSampled %26 = OpSampledImage %20 %24 
                               f32_2 %30 = OpLoad vs_TEXCOORD0 
                               f32_4 %31 = OpImageSampleImplicitLod %26 %30 
                                 f32 %32 = OpCompositeExtract %31 3 
                                             OpStore %16 %32 
                                 f32 %35 = OpLoad %16 
                               f32_2 %36 = OpCompositeConstruct %35 %35 
                               f32_2 %40 = OpFMul %36 %39 
                                             OpStore %34 %40 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %46 = OpLoad vs_TEXCOORD0 
                               f32_4 %47 = OpImageSampleImplicitLod %45 %46 
                                 f32 %48 = OpCompositeExtract %47 3 
                                             OpStore %16 %48 
                                 f32 %49 = OpLoad %16 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %34 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                        Private f32* %57 = OpAccessChain %34 %52 
                                             OpStore %57 %56 
                                 f32 %59 = OpLoad %16 
                                 f32 %60 = OpFMul %59 %50 
                        Private f32* %62 = OpAccessChain %34 %61 
                                 f32 %63 = OpLoad %62 
                                 f32 %64 = OpFAdd %60 %63 
                                             OpStore %58 %64 
                                 f32 %65 = OpLoad %58 
                                 f32 %67 = OpFAdd %65 %66 
                         Output f32* %69 = OpAccessChain %9 %68 
                                             OpStore %69 %67 
                 read_only Texture2D %72 = OpLoad %71 
                             sampler %74 = OpLoad %73 
          read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                               f32_2 %76 = OpLoad vs_TEXCOORD0 
                               f32_4 %77 = OpImageSampleImplicitLod %75 %76 
                                 f32 %78 = OpCompositeExtract %77 3 
                                             OpStore %70 %78 
                                 f32 %79 = OpLoad %70 
                                 f32 %80 = OpFNegate %79 
                                 f32 %82 = OpFMul %80 %81 
                        Private f32* %83 = OpAccessChain %34 %52 
                                 f32 %84 = OpLoad %83 
                                 f32 %85 = OpFAdd %82 %84 
                        Private f32* %86 = OpAccessChain %34 %52 
                                             OpStore %86 %85 
                                 f32 %87 = OpLoad %70 
                                 f32 %89 = OpFMul %87 %88 
                                             OpStore %58 %89 
                                 f32 %90 = OpLoad %16 
                                 f32 %91 = OpFMul %90 %50 
                                 f32 %92 = OpLoad %58 
                                 f32 %93 = OpFAdd %91 %92 
                        Private f32* %94 = OpAccessChain %34 %61 
                                             OpStore %94 %93 
                               f32_2 %95 = OpLoad %34 
                               f32_2 %96 = OpVectorShuffle %95 %95 1 0 
                              f32_2 %100 = OpFAdd %96 %99 
                              f32_4 %101 = OpLoad %9 
                              f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                             OpStore %9 %102 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0 = texture(_SecondTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_0) * vec2(0.390625, 1.984375);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat16_0 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_2 = texture(_ThirdTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = (-u_xlat16_2) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_2 * 1.59375;
    u_xlat16_1.y = u_xlat16_0 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0 = texture(_SecondTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_0) * vec2(0.390625, 1.984375);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat16_0 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_2 = texture(_ThirdTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = (-u_xlat16_2) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_2 * 1.59375;
    u_xlat16_1.y = u_xlat16_0 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    SV_Target0.w = 1.0;
    u_xlat16_0 = texture(_SecondTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_0) * vec2(0.390625, 1.984375);
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat16_0 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_2 = texture(_ThirdTex, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = (-u_xlat16_2) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_2 * 1.59375;
    u_xlat16_1.y = u_xlat16_0 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 104
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %29 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %19 RelaxedPrecision 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 29 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %71 RelaxedPrecision 
                                             OpDecorate %71 DescriptorSet 71 
                                             OpDecorate %71 Binding 71 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %73 DescriptorSet 73 
                                             OpDecorate %73 Binding 73 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %100 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %18 = OpTypePointer UniformConstant %17 
UniformConstant read_only Texture2D* %19 = OpVariable UniformConstant 
                                     %21 = OpTypeSampler 
                                     %22 = OpTypePointer UniformConstant %21 
            UniformConstant sampler* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampledImage %17 
                                     %27 = OpTypeVector %6 2 
                                     %28 = OpTypePointer Input %27 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %33 = OpTypePointer Private %27 
                      Private f32_2* %34 = OpVariable Private 
                                 f32 %37 = OpConstant 3.674022E-40 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_2 %39 = OpConstantComposite %37 %38 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 0 
                        Private f32* %58 = OpVariable Private 
                                 u32 %61 = OpConstant 1 
                                 f32 %66 = OpConstant 3.674022E-40 
                                 u32 %68 = OpConstant 2 
                        Private f32* %70 = OpVariable Private 
UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
            UniformConstant sampler* %73 = OpVariable UniformConstant 
                                 f32 %81 = OpConstant 3.674022E-40 
                                 f32 %88 = OpConstant 3.674022E-40 
                                 f32 %97 = OpConstant 3.674022E-40 
                                 f32 %98 = OpConstant 3.674022E-40 
                               f32_2 %99 = OpConstantComposite %97 %98 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %20 = OpLoad %19 
                             sampler %24 = OpLoad %23 
          read_only Texture2DSampled %26 = OpSampledImage %20 %24 
                               f32_2 %30 = OpLoad vs_TEXCOORD0 
                               f32_4 %31 = OpImageSampleImplicitLod %26 %30 
                                 f32 %32 = OpCompositeExtract %31 3 
                                             OpStore %16 %32 
                                 f32 %35 = OpLoad %16 
                               f32_2 %36 = OpCompositeConstruct %35 %35 
                               f32_2 %40 = OpFMul %36 %39 
                                             OpStore %34 %40 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %46 = OpLoad vs_TEXCOORD0 
                               f32_4 %47 = OpImageSampleImplicitLod %45 %46 
                                 f32 %48 = OpCompositeExtract %47 3 
                                             OpStore %16 %48 
                                 f32 %49 = OpLoad %16 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %34 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                        Private f32* %57 = OpAccessChain %34 %52 
                                             OpStore %57 %56 
                                 f32 %59 = OpLoad %16 
                                 f32 %60 = OpFMul %59 %50 
                        Private f32* %62 = OpAccessChain %34 %61 
                                 f32 %63 = OpLoad %62 
                                 f32 %64 = OpFAdd %60 %63 
                                             OpStore %58 %64 
                                 f32 %65 = OpLoad %58 
                                 f32 %67 = OpFAdd %65 %66 
                         Output f32* %69 = OpAccessChain %9 %68 
                                             OpStore %69 %67 
                 read_only Texture2D %72 = OpLoad %71 
                             sampler %74 = OpLoad %73 
          read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                               f32_2 %76 = OpLoad vs_TEXCOORD0 
                               f32_4 %77 = OpImageSampleImplicitLod %75 %76 
                                 f32 %78 = OpCompositeExtract %77 3 
                                             OpStore %70 %78 
                                 f32 %79 = OpLoad %70 
                                 f32 %80 = OpFNegate %79 
                                 f32 %82 = OpFMul %80 %81 
                        Private f32* %83 = OpAccessChain %34 %52 
                                 f32 %84 = OpLoad %83 
                                 f32 %85 = OpFAdd %82 %84 
                        Private f32* %86 = OpAccessChain %34 %52 
                                             OpStore %86 %85 
                                 f32 %87 = OpLoad %70 
                                 f32 %89 = OpFMul %87 %88 
                                             OpStore %58 %89 
                                 f32 %90 = OpLoad %16 
                                 f32 %91 = OpFMul %90 %50 
                                 f32 %92 = OpLoad %58 
                                 f32 %93 = OpFAdd %91 %92 
                        Private f32* %94 = OpAccessChain %34 %61 
                                             OpStore %94 %93 
                               f32_2 %95 = OpLoad %34 
                               f32_2 %96 = OpVectorShuffle %95 %95 1 0 
                              f32_2 %100 = OpFAdd %96 %99 
                              f32_4 %101 = OpLoad %9 
                              f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                             OpStore %9 %102 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 104
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %29 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %19 RelaxedPrecision 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 29 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %71 RelaxedPrecision 
                                             OpDecorate %71 DescriptorSet 71 
                                             OpDecorate %71 Binding 71 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %73 DescriptorSet 73 
                                             OpDecorate %73 Binding 73 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %100 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %18 = OpTypePointer UniformConstant %17 
UniformConstant read_only Texture2D* %19 = OpVariable UniformConstant 
                                     %21 = OpTypeSampler 
                                     %22 = OpTypePointer UniformConstant %21 
            UniformConstant sampler* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampledImage %17 
                                     %27 = OpTypeVector %6 2 
                                     %28 = OpTypePointer Input %27 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %33 = OpTypePointer Private %27 
                      Private f32_2* %34 = OpVariable Private 
                                 f32 %37 = OpConstant 3.674022E-40 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_2 %39 = OpConstantComposite %37 %38 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 0 
                        Private f32* %58 = OpVariable Private 
                                 u32 %61 = OpConstant 1 
                                 f32 %66 = OpConstant 3.674022E-40 
                                 u32 %68 = OpConstant 2 
                        Private f32* %70 = OpVariable Private 
UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
            UniformConstant sampler* %73 = OpVariable UniformConstant 
                                 f32 %81 = OpConstant 3.674022E-40 
                                 f32 %88 = OpConstant 3.674022E-40 
                                 f32 %97 = OpConstant 3.674022E-40 
                                 f32 %98 = OpConstant 3.674022E-40 
                               f32_2 %99 = OpConstantComposite %97 %98 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %20 = OpLoad %19 
                             sampler %24 = OpLoad %23 
          read_only Texture2DSampled %26 = OpSampledImage %20 %24 
                               f32_2 %30 = OpLoad vs_TEXCOORD0 
                               f32_4 %31 = OpImageSampleImplicitLod %26 %30 
                                 f32 %32 = OpCompositeExtract %31 3 
                                             OpStore %16 %32 
                                 f32 %35 = OpLoad %16 
                               f32_2 %36 = OpCompositeConstruct %35 %35 
                               f32_2 %40 = OpFMul %36 %39 
                                             OpStore %34 %40 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %46 = OpLoad vs_TEXCOORD0 
                               f32_4 %47 = OpImageSampleImplicitLod %45 %46 
                                 f32 %48 = OpCompositeExtract %47 3 
                                             OpStore %16 %48 
                                 f32 %49 = OpLoad %16 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %34 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                        Private f32* %57 = OpAccessChain %34 %52 
                                             OpStore %57 %56 
                                 f32 %59 = OpLoad %16 
                                 f32 %60 = OpFMul %59 %50 
                        Private f32* %62 = OpAccessChain %34 %61 
                                 f32 %63 = OpLoad %62 
                                 f32 %64 = OpFAdd %60 %63 
                                             OpStore %58 %64 
                                 f32 %65 = OpLoad %58 
                                 f32 %67 = OpFAdd %65 %66 
                         Output f32* %69 = OpAccessChain %9 %68 
                                             OpStore %69 %67 
                 read_only Texture2D %72 = OpLoad %71 
                             sampler %74 = OpLoad %73 
          read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                               f32_2 %76 = OpLoad vs_TEXCOORD0 
                               f32_4 %77 = OpImageSampleImplicitLod %75 %76 
                                 f32 %78 = OpCompositeExtract %77 3 
                                             OpStore %70 %78 
                                 f32 %79 = OpLoad %70 
                                 f32 %80 = OpFNegate %79 
                                 f32 %82 = OpFMul %80 %81 
                        Private f32* %83 = OpAccessChain %34 %52 
                                 f32 %84 = OpLoad %83 
                                 f32 %85 = OpFAdd %82 %84 
                        Private f32* %86 = OpAccessChain %34 %52 
                                             OpStore %86 %85 
                                 f32 %87 = OpLoad %70 
                                 f32 %89 = OpFMul %87 %88 
                                             OpStore %58 %89 
                                 f32 %90 = OpLoad %16 
                                 f32 %91 = OpFMul %90 %50 
                                 f32 %92 = OpLoad %58 
                                 f32 %93 = OpFAdd %91 %92 
                        Private f32* %94 = OpAccessChain %34 %61 
                                             OpStore %94 %93 
                               f32_2 %95 = OpLoad %34 
                               f32_2 %96 = OpVectorShuffle %95 %95 1 0 
                              f32_2 %100 = OpFAdd %96 %99 
                              f32_4 %101 = OpLoad %9 
                              f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                             OpStore %9 %102 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 104
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %9 %29 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %9 Location 9 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %19 RelaxedPrecision 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 29 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %35 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %43 RelaxedPrecision 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %71 RelaxedPrecision 
                                             OpDecorate %71 DescriptorSet 71 
                                             OpDecorate %71 Binding 71 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %73 DescriptorSet 73 
                                             OpDecorate %73 Binding 73 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %100 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Output %7 
                        Output f32_4* %9 = OpVariable Output 
                                 f32 %10 = OpConstant 3.674022E-40 
                                     %11 = OpTypeInt 32 0 
                                 u32 %12 = OpConstant 3 
                                     %13 = OpTypePointer Output %6 
                                     %15 = OpTypePointer Private %6 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %18 = OpTypePointer UniformConstant %17 
UniformConstant read_only Texture2D* %19 = OpVariable UniformConstant 
                                     %21 = OpTypeSampler 
                                     %22 = OpTypePointer UniformConstant %21 
            UniformConstant sampler* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampledImage %17 
                                     %27 = OpTypeVector %6 2 
                                     %28 = OpTypePointer Input %27 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %33 = OpTypePointer Private %27 
                      Private f32_2* %34 = OpVariable Private 
                                 f32 %37 = OpConstant 3.674022E-40 
                                 f32 %38 = OpConstant 3.674022E-40 
                               f32_2 %39 = OpConstantComposite %37 %38 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 0 
                        Private f32* %58 = OpVariable Private 
                                 u32 %61 = OpConstant 1 
                                 f32 %66 = OpConstant 3.674022E-40 
                                 u32 %68 = OpConstant 2 
                        Private f32* %70 = OpVariable Private 
UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
            UniformConstant sampler* %73 = OpVariable UniformConstant 
                                 f32 %81 = OpConstant 3.674022E-40 
                                 f32 %88 = OpConstant 3.674022E-40 
                                 f32 %97 = OpConstant 3.674022E-40 
                                 f32 %98 = OpConstant 3.674022E-40 
                               f32_2 %99 = OpConstantComposite %97 %98 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                         Output f32* %14 = OpAccessChain %9 %12 
                                             OpStore %14 %10 
                 read_only Texture2D %20 = OpLoad %19 
                             sampler %24 = OpLoad %23 
          read_only Texture2DSampled %26 = OpSampledImage %20 %24 
                               f32_2 %30 = OpLoad vs_TEXCOORD0 
                               f32_4 %31 = OpImageSampleImplicitLod %26 %30 
                                 f32 %32 = OpCompositeExtract %31 3 
                                             OpStore %16 %32 
                                 f32 %35 = OpLoad %16 
                               f32_2 %36 = OpCompositeConstruct %35 %35 
                               f32_2 %40 = OpFMul %36 %39 
                                             OpStore %34 %40 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %46 = OpLoad vs_TEXCOORD0 
                               f32_4 %47 = OpImageSampleImplicitLod %45 %46 
                                 f32 %48 = OpCompositeExtract %47 3 
                                             OpStore %16 %48 
                                 f32 %49 = OpLoad %16 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %34 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                        Private f32* %57 = OpAccessChain %34 %52 
                                             OpStore %57 %56 
                                 f32 %59 = OpLoad %16 
                                 f32 %60 = OpFMul %59 %50 
                        Private f32* %62 = OpAccessChain %34 %61 
                                 f32 %63 = OpLoad %62 
                                 f32 %64 = OpFAdd %60 %63 
                                             OpStore %58 %64 
                                 f32 %65 = OpLoad %58 
                                 f32 %67 = OpFAdd %65 %66 
                         Output f32* %69 = OpAccessChain %9 %68 
                                             OpStore %69 %67 
                 read_only Texture2D %72 = OpLoad %71 
                             sampler %74 = OpLoad %73 
          read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                               f32_2 %76 = OpLoad vs_TEXCOORD0 
                               f32_4 %77 = OpImageSampleImplicitLod %75 %76 
                                 f32 %78 = OpCompositeExtract %77 3 
                                             OpStore %70 %78 
                                 f32 %79 = OpLoad %70 
                                 f32 %80 = OpFNegate %79 
                                 f32 %82 = OpFMul %80 %81 
                        Private f32* %83 = OpAccessChain %34 %52 
                                 f32 %84 = OpLoad %83 
                                 f32 %85 = OpFAdd %82 %84 
                        Private f32* %86 = OpAccessChain %34 %52 
                                             OpStore %86 %85 
                                 f32 %87 = OpLoad %70 
                                 f32 %89 = OpFMul %87 %88 
                                             OpStore %58 %89 
                                 f32 %90 = OpLoad %16 
                                 f32 %91 = OpFMul %90 %50 
                                 f32 %92 = OpLoad %58 
                                 f32 %93 = OpFAdd %91 %92 
                        Private f32* %94 = OpAccessChain %34 %61 
                                             OpStore %94 %93 
                               f32_2 %95 = OpLoad %34 
                               f32_2 %96 = OpVectorShuffle %95 %95 1 0 
                              f32_2 %100 = OpFAdd %96 %99 
                              f32_4 %101 = OpLoad %9 
                              f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                             OpStore %9 %102 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "YCbCrA_To_RGBAFull"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 114063
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    SV_Target0.w = u_xlat16_0;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    SV_Target0.w = u_xlat16_0;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    SV_Target0.w = u_xlat16_0;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %39 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %39 Location 39 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %48 DescriptorSet 48 
                                             OpDecorate %48 Binding 48 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %101 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %104 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %117 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                                     %38 = OpTypePointer Output %33 
                       Output f32_4* %39 = OpVariable Output 
                                     %41 = OpTypePointer Output %6 
                        Private f32* %45 = OpVariable Private 
UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
            UniformConstant sampler* %48 = OpVariable UniformConstant 
                      Private f32_2* %54 = OpVariable Private 
                                 f32 %57 = OpConstant 3.674022E-40 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %57 %58 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 u32 %78 = OpConstant 0 
                        Private f32* %84 = OpVariable Private 
                                 u32 %87 = OpConstant 1 
                                 f32 %92 = OpConstant 3.674022E-40 
                                 u32 %94 = OpConstant 2 
                                 f32 %98 = OpConstant 3.674022E-40 
                                f32 %105 = OpConstant 3.674022E-40 
                                f32 %114 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                              f32_2 %116 = OpConstantComposite %114 %115 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %40 = OpLoad %21 
                         Output f32* %42 = OpAccessChain %39 %36 
                                             OpStore %42 %40 
                               f32_2 %43 = OpLoad vs_TEXCOORD0 
                               f32_2 %44 = OpFMul %43 %15 
                                             OpStore %9 %44 
                 read_only Texture2D %47 = OpLoad %46 
                             sampler %49 = OpLoad %48 
          read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                               f32_2 %51 = OpLoad %9 
                               f32_4 %52 = OpImageSampleImplicitLod %50 %51 
                                 f32 %53 = OpCompositeExtract %52 3 
                                             OpStore %45 %53 
                                 f32 %55 = OpLoad %45 
                               f32_2 %56 = OpCompositeConstruct %55 %55 
                               f32_2 %60 = OpFMul %56 %59 
                                             OpStore %54 %60 
                 read_only Texture2D %61 = OpLoad %24 
                             sampler %62 = OpLoad %28 
          read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                               f32_2 %64 = OpLoad %9 
                               f32_4 %65 = OpImageSampleImplicitLod %63 %64 
                                 f32 %66 = OpCompositeExtract %65 3 
                                             OpStore %45 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %21 %74 
                                 f32 %75 = OpLoad %45 
                                 f32 %77 = OpFMul %75 %76 
                        Private f32* %79 = OpAccessChain %54 %78 
                                 f32 %80 = OpLoad %79 
                                 f32 %81 = OpFNegate %80 
                                 f32 %82 = OpFAdd %77 %81 
                        Private f32* %83 = OpAccessChain %54 %78 
                                             OpStore %83 %82 
                                 f32 %85 = OpLoad %45 
                                 f32 %86 = OpFMul %85 %76 
                        Private f32* %88 = OpAccessChain %54 %87 
                                 f32 %89 = OpLoad %88 
                                 f32 %90 = OpFAdd %86 %89 
                                             OpStore %84 %90 
                                 f32 %91 = OpLoad %84 
                                 f32 %93 = OpFAdd %91 %92 
                         Output f32* %95 = OpAccessChain %39 %94 
                                             OpStore %95 %93 
                                 f32 %96 = OpLoad %21 
                                 f32 %97 = OpFNegate %96 
                                 f32 %99 = OpFMul %97 %98 
                       Private f32* %100 = OpAccessChain %54 %78 
                                f32 %101 = OpLoad %100 
                                f32 %102 = OpFAdd %99 %101 
                       Private f32* %103 = OpAccessChain %54 %78 
                                             OpStore %103 %102 
                                f32 %104 = OpLoad %21 
                                f32 %106 = OpFMul %104 %105 
                                             OpStore %84 %106 
                                f32 %107 = OpLoad %45 
                                f32 %108 = OpFMul %107 %76 
                                f32 %109 = OpLoad %84 
                                f32 %110 = OpFAdd %108 %109 
                       Private f32* %111 = OpAccessChain %54 %87 
                                             OpStore %111 %110 
                              f32_2 %112 = OpLoad %54 
                              f32_2 %113 = OpVectorShuffle %112 %112 1 0 
                              f32_2 %117 = OpFAdd %113 %116 
                              f32_4 %118 = OpLoad %39 
                              f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                             OpStore %39 %119 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %39 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %39 Location 39 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %48 DescriptorSet 48 
                                             OpDecorate %48 Binding 48 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %101 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %104 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %117 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                                     %38 = OpTypePointer Output %33 
                       Output f32_4* %39 = OpVariable Output 
                                     %41 = OpTypePointer Output %6 
                        Private f32* %45 = OpVariable Private 
UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
            UniformConstant sampler* %48 = OpVariable UniformConstant 
                      Private f32_2* %54 = OpVariable Private 
                                 f32 %57 = OpConstant 3.674022E-40 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %57 %58 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 u32 %78 = OpConstant 0 
                        Private f32* %84 = OpVariable Private 
                                 u32 %87 = OpConstant 1 
                                 f32 %92 = OpConstant 3.674022E-40 
                                 u32 %94 = OpConstant 2 
                                 f32 %98 = OpConstant 3.674022E-40 
                                f32 %105 = OpConstant 3.674022E-40 
                                f32 %114 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                              f32_2 %116 = OpConstantComposite %114 %115 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %40 = OpLoad %21 
                         Output f32* %42 = OpAccessChain %39 %36 
                                             OpStore %42 %40 
                               f32_2 %43 = OpLoad vs_TEXCOORD0 
                               f32_2 %44 = OpFMul %43 %15 
                                             OpStore %9 %44 
                 read_only Texture2D %47 = OpLoad %46 
                             sampler %49 = OpLoad %48 
          read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                               f32_2 %51 = OpLoad %9 
                               f32_4 %52 = OpImageSampleImplicitLod %50 %51 
                                 f32 %53 = OpCompositeExtract %52 3 
                                             OpStore %45 %53 
                                 f32 %55 = OpLoad %45 
                               f32_2 %56 = OpCompositeConstruct %55 %55 
                               f32_2 %60 = OpFMul %56 %59 
                                             OpStore %54 %60 
                 read_only Texture2D %61 = OpLoad %24 
                             sampler %62 = OpLoad %28 
          read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                               f32_2 %64 = OpLoad %9 
                               f32_4 %65 = OpImageSampleImplicitLod %63 %64 
                                 f32 %66 = OpCompositeExtract %65 3 
                                             OpStore %45 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %21 %74 
                                 f32 %75 = OpLoad %45 
                                 f32 %77 = OpFMul %75 %76 
                        Private f32* %79 = OpAccessChain %54 %78 
                                 f32 %80 = OpLoad %79 
                                 f32 %81 = OpFNegate %80 
                                 f32 %82 = OpFAdd %77 %81 
                        Private f32* %83 = OpAccessChain %54 %78 
                                             OpStore %83 %82 
                                 f32 %85 = OpLoad %45 
                                 f32 %86 = OpFMul %85 %76 
                        Private f32* %88 = OpAccessChain %54 %87 
                                 f32 %89 = OpLoad %88 
                                 f32 %90 = OpFAdd %86 %89 
                                             OpStore %84 %90 
                                 f32 %91 = OpLoad %84 
                                 f32 %93 = OpFAdd %91 %92 
                         Output f32* %95 = OpAccessChain %39 %94 
                                             OpStore %95 %93 
                                 f32 %96 = OpLoad %21 
                                 f32 %97 = OpFNegate %96 
                                 f32 %99 = OpFMul %97 %98 
                       Private f32* %100 = OpAccessChain %54 %78 
                                f32 %101 = OpLoad %100 
                                f32 %102 = OpFAdd %99 %101 
                       Private f32* %103 = OpAccessChain %54 %78 
                                             OpStore %103 %102 
                                f32 %104 = OpLoad %21 
                                f32 %106 = OpFMul %104 %105 
                                             OpStore %84 %106 
                                f32 %107 = OpLoad %45 
                                f32 %108 = OpFMul %107 %76 
                                f32 %109 = OpLoad %84 
                                f32 %110 = OpFAdd %108 %109 
                       Private f32* %111 = OpAccessChain %54 %87 
                                             OpStore %111 %110 
                              f32_2 %112 = OpLoad %54 
                              f32_2 %113 = OpVectorShuffle %112 %112 1 0 
                              f32_2 %117 = OpFAdd %113 %116 
                              f32_4 %118 = OpLoad %39 
                              f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                             OpStore %39 %119 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %39 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %39 Location 39 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %48 DescriptorSet 48 
                                             OpDecorate %48 Binding 48 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %101 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %104 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %117 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                                     %38 = OpTypePointer Output %33 
                       Output f32_4* %39 = OpVariable Output 
                                     %41 = OpTypePointer Output %6 
                        Private f32* %45 = OpVariable Private 
UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
            UniformConstant sampler* %48 = OpVariable UniformConstant 
                      Private f32_2* %54 = OpVariable Private 
                                 f32 %57 = OpConstant 3.674022E-40 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %57 %58 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 u32 %78 = OpConstant 0 
                        Private f32* %84 = OpVariable Private 
                                 u32 %87 = OpConstant 1 
                                 f32 %92 = OpConstant 3.674022E-40 
                                 u32 %94 = OpConstant 2 
                                 f32 %98 = OpConstant 3.674022E-40 
                                f32 %105 = OpConstant 3.674022E-40 
                                f32 %114 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                              f32_2 %116 = OpConstantComposite %114 %115 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %40 = OpLoad %21 
                         Output f32* %42 = OpAccessChain %39 %36 
                                             OpStore %42 %40 
                               f32_2 %43 = OpLoad vs_TEXCOORD0 
                               f32_2 %44 = OpFMul %43 %15 
                                             OpStore %9 %44 
                 read_only Texture2D %47 = OpLoad %46 
                             sampler %49 = OpLoad %48 
          read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                               f32_2 %51 = OpLoad %9 
                               f32_4 %52 = OpImageSampleImplicitLod %50 %51 
                                 f32 %53 = OpCompositeExtract %52 3 
                                             OpStore %45 %53 
                                 f32 %55 = OpLoad %45 
                               f32_2 %56 = OpCompositeConstruct %55 %55 
                               f32_2 %60 = OpFMul %56 %59 
                                             OpStore %54 %60 
                 read_only Texture2D %61 = OpLoad %24 
                             sampler %62 = OpLoad %28 
          read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                               f32_2 %64 = OpLoad %9 
                               f32_4 %65 = OpImageSampleImplicitLod %63 %64 
                                 f32 %66 = OpCompositeExtract %65 3 
                                             OpStore %45 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %21 %74 
                                 f32 %75 = OpLoad %45 
                                 f32 %77 = OpFMul %75 %76 
                        Private f32* %79 = OpAccessChain %54 %78 
                                 f32 %80 = OpLoad %79 
                                 f32 %81 = OpFNegate %80 
                                 f32 %82 = OpFAdd %77 %81 
                        Private f32* %83 = OpAccessChain %54 %78 
                                             OpStore %83 %82 
                                 f32 %85 = OpLoad %45 
                                 f32 %86 = OpFMul %85 %76 
                        Private f32* %88 = OpAccessChain %54 %87 
                                 f32 %89 = OpLoad %88 
                                 f32 %90 = OpFAdd %86 %89 
                                             OpStore %84 %90 
                                 f32 %91 = OpLoad %84 
                                 f32 %93 = OpFAdd %91 %92 
                         Output f32* %95 = OpAccessChain %39 %94 
                                             OpStore %95 %93 
                                 f32 %96 = OpLoad %21 
                                 f32 %97 = OpFNegate %96 
                                 f32 %99 = OpFMul %97 %98 
                       Private f32* %100 = OpAccessChain %54 %78 
                                f32 %101 = OpLoad %100 
                                f32 %102 = OpFAdd %99 %101 
                       Private f32* %103 = OpAccessChain %54 %78 
                                             OpStore %103 %102 
                                f32 %104 = OpLoad %21 
                                f32 %106 = OpFMul %104 %105 
                                             OpStore %84 %106 
                                f32 %107 = OpLoad %45 
                                f32 %108 = OpFMul %107 %76 
                                f32 %109 = OpLoad %84 
                                f32 %110 = OpFAdd %108 %109 
                       Private f32* %111 = OpAccessChain %54 %87 
                                             OpStore %111 %110 
                              f32_2 %112 = OpLoad %54 
                              f32_2 %113 = OpVectorShuffle %112 %112 1 0 
                              f32_2 %117 = OpFAdd %113 %116 
                              f32_4 %118 = OpLoad %39 
                              f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                             OpStore %39 %119 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    SV_Target0.w = u_xlat16_0;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    SV_Target0.w = u_xlat16_0;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    SV_Target0.w = u_xlat16_0;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %39 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %39 Location 39 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %48 DescriptorSet 48 
                                             OpDecorate %48 Binding 48 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %101 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %104 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %117 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                                     %38 = OpTypePointer Output %33 
                       Output f32_4* %39 = OpVariable Output 
                                     %41 = OpTypePointer Output %6 
                        Private f32* %45 = OpVariable Private 
UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
            UniformConstant sampler* %48 = OpVariable UniformConstant 
                      Private f32_2* %54 = OpVariable Private 
                                 f32 %57 = OpConstant 3.674022E-40 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %57 %58 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 u32 %78 = OpConstant 0 
                        Private f32* %84 = OpVariable Private 
                                 u32 %87 = OpConstant 1 
                                 f32 %92 = OpConstant 3.674022E-40 
                                 u32 %94 = OpConstant 2 
                                 f32 %98 = OpConstant 3.674022E-40 
                                f32 %105 = OpConstant 3.674022E-40 
                                f32 %114 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                              f32_2 %116 = OpConstantComposite %114 %115 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %40 = OpLoad %21 
                         Output f32* %42 = OpAccessChain %39 %36 
                                             OpStore %42 %40 
                               f32_2 %43 = OpLoad vs_TEXCOORD0 
                               f32_2 %44 = OpFMul %43 %15 
                                             OpStore %9 %44 
                 read_only Texture2D %47 = OpLoad %46 
                             sampler %49 = OpLoad %48 
          read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                               f32_2 %51 = OpLoad %9 
                               f32_4 %52 = OpImageSampleImplicitLod %50 %51 
                                 f32 %53 = OpCompositeExtract %52 3 
                                             OpStore %45 %53 
                                 f32 %55 = OpLoad %45 
                               f32_2 %56 = OpCompositeConstruct %55 %55 
                               f32_2 %60 = OpFMul %56 %59 
                                             OpStore %54 %60 
                 read_only Texture2D %61 = OpLoad %24 
                             sampler %62 = OpLoad %28 
          read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                               f32_2 %64 = OpLoad %9 
                               f32_4 %65 = OpImageSampleImplicitLod %63 %64 
                                 f32 %66 = OpCompositeExtract %65 3 
                                             OpStore %45 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %21 %74 
                                 f32 %75 = OpLoad %45 
                                 f32 %77 = OpFMul %75 %76 
                        Private f32* %79 = OpAccessChain %54 %78 
                                 f32 %80 = OpLoad %79 
                                 f32 %81 = OpFNegate %80 
                                 f32 %82 = OpFAdd %77 %81 
                        Private f32* %83 = OpAccessChain %54 %78 
                                             OpStore %83 %82 
                                 f32 %85 = OpLoad %45 
                                 f32 %86 = OpFMul %85 %76 
                        Private f32* %88 = OpAccessChain %54 %87 
                                 f32 %89 = OpLoad %88 
                                 f32 %90 = OpFAdd %86 %89 
                                             OpStore %84 %90 
                                 f32 %91 = OpLoad %84 
                                 f32 %93 = OpFAdd %91 %92 
                         Output f32* %95 = OpAccessChain %39 %94 
                                             OpStore %95 %93 
                                 f32 %96 = OpLoad %21 
                                 f32 %97 = OpFNegate %96 
                                 f32 %99 = OpFMul %97 %98 
                       Private f32* %100 = OpAccessChain %54 %78 
                                f32 %101 = OpLoad %100 
                                f32 %102 = OpFAdd %99 %101 
                       Private f32* %103 = OpAccessChain %54 %78 
                                             OpStore %103 %102 
                                f32 %104 = OpLoad %21 
                                f32 %106 = OpFMul %104 %105 
                                             OpStore %84 %106 
                                f32 %107 = OpLoad %45 
                                f32 %108 = OpFMul %107 %76 
                                f32 %109 = OpLoad %84 
                                f32 %110 = OpFAdd %108 %109 
                       Private f32* %111 = OpAccessChain %54 %87 
                                             OpStore %111 %110 
                              f32_2 %112 = OpLoad %54 
                              f32_2 %113 = OpVectorShuffle %112 %112 1 0 
                              f32_2 %117 = OpFAdd %113 %116 
                              f32_4 %118 = OpLoad %39 
                              f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                             OpStore %39 %119 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %39 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %39 Location 39 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %48 DescriptorSet 48 
                                             OpDecorate %48 Binding 48 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %101 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %104 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %117 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                                     %38 = OpTypePointer Output %33 
                       Output f32_4* %39 = OpVariable Output 
                                     %41 = OpTypePointer Output %6 
                        Private f32* %45 = OpVariable Private 
UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
            UniformConstant sampler* %48 = OpVariable UniformConstant 
                      Private f32_2* %54 = OpVariable Private 
                                 f32 %57 = OpConstant 3.674022E-40 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %57 %58 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 u32 %78 = OpConstant 0 
                        Private f32* %84 = OpVariable Private 
                                 u32 %87 = OpConstant 1 
                                 f32 %92 = OpConstant 3.674022E-40 
                                 u32 %94 = OpConstant 2 
                                 f32 %98 = OpConstant 3.674022E-40 
                                f32 %105 = OpConstant 3.674022E-40 
                                f32 %114 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                              f32_2 %116 = OpConstantComposite %114 %115 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %40 = OpLoad %21 
                         Output f32* %42 = OpAccessChain %39 %36 
                                             OpStore %42 %40 
                               f32_2 %43 = OpLoad vs_TEXCOORD0 
                               f32_2 %44 = OpFMul %43 %15 
                                             OpStore %9 %44 
                 read_only Texture2D %47 = OpLoad %46 
                             sampler %49 = OpLoad %48 
          read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                               f32_2 %51 = OpLoad %9 
                               f32_4 %52 = OpImageSampleImplicitLod %50 %51 
                                 f32 %53 = OpCompositeExtract %52 3 
                                             OpStore %45 %53 
                                 f32 %55 = OpLoad %45 
                               f32_2 %56 = OpCompositeConstruct %55 %55 
                               f32_2 %60 = OpFMul %56 %59 
                                             OpStore %54 %60 
                 read_only Texture2D %61 = OpLoad %24 
                             sampler %62 = OpLoad %28 
          read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                               f32_2 %64 = OpLoad %9 
                               f32_4 %65 = OpImageSampleImplicitLod %63 %64 
                                 f32 %66 = OpCompositeExtract %65 3 
                                             OpStore %45 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %21 %74 
                                 f32 %75 = OpLoad %45 
                                 f32 %77 = OpFMul %75 %76 
                        Private f32* %79 = OpAccessChain %54 %78 
                                 f32 %80 = OpLoad %79 
                                 f32 %81 = OpFNegate %80 
                                 f32 %82 = OpFAdd %77 %81 
                        Private f32* %83 = OpAccessChain %54 %78 
                                             OpStore %83 %82 
                                 f32 %85 = OpLoad %45 
                                 f32 %86 = OpFMul %85 %76 
                        Private f32* %88 = OpAccessChain %54 %87 
                                 f32 %89 = OpLoad %88 
                                 f32 %90 = OpFAdd %86 %89 
                                             OpStore %84 %90 
                                 f32 %91 = OpLoad %84 
                                 f32 %93 = OpFAdd %91 %92 
                         Output f32* %95 = OpAccessChain %39 %94 
                                             OpStore %95 %93 
                                 f32 %96 = OpLoad %21 
                                 f32 %97 = OpFNegate %96 
                                 f32 %99 = OpFMul %97 %98 
                       Private f32* %100 = OpAccessChain %54 %78 
                                f32 %101 = OpLoad %100 
                                f32 %102 = OpFAdd %99 %101 
                       Private f32* %103 = OpAccessChain %54 %78 
                                             OpStore %103 %102 
                                f32 %104 = OpLoad %21 
                                f32 %106 = OpFMul %104 %105 
                                             OpStore %84 %106 
                                f32 %107 = OpLoad %45 
                                f32 %108 = OpFMul %107 %76 
                                f32 %109 = OpLoad %84 
                                f32 %110 = OpFAdd %108 %109 
                       Private f32* %111 = OpAccessChain %54 %87 
                                             OpStore %111 %110 
                              f32_2 %112 = OpLoad %54 
                              f32_2 %113 = OpVectorShuffle %112 %112 1 0 
                              f32_2 %117 = OpFAdd %113 %116 
                              f32_4 %118 = OpLoad %39 
                              f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                             OpStore %39 %119 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %39 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %39 Location 39 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %48 DescriptorSet 48 
                                             OpDecorate %48 Binding 48 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %101 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %104 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %117 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                                     %38 = OpTypePointer Output %33 
                       Output f32_4* %39 = OpVariable Output 
                                     %41 = OpTypePointer Output %6 
                        Private f32* %45 = OpVariable Private 
UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
            UniformConstant sampler* %48 = OpVariable UniformConstant 
                      Private f32_2* %54 = OpVariable Private 
                                 f32 %57 = OpConstant 3.674022E-40 
                                 f32 %58 = OpConstant 3.674022E-40 
                               f32_2 %59 = OpConstantComposite %57 %58 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 u32 %78 = OpConstant 0 
                        Private f32* %84 = OpVariable Private 
                                 u32 %87 = OpConstant 1 
                                 f32 %92 = OpConstant 3.674022E-40 
                                 u32 %94 = OpConstant 2 
                                 f32 %98 = OpConstant 3.674022E-40 
                                f32 %105 = OpConstant 3.674022E-40 
                                f32 %114 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                              f32_2 %116 = OpConstantComposite %114 %115 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %40 = OpLoad %21 
                         Output f32* %42 = OpAccessChain %39 %36 
                                             OpStore %42 %40 
                               f32_2 %43 = OpLoad vs_TEXCOORD0 
                               f32_2 %44 = OpFMul %43 %15 
                                             OpStore %9 %44 
                 read_only Texture2D %47 = OpLoad %46 
                             sampler %49 = OpLoad %48 
          read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                               f32_2 %51 = OpLoad %9 
                               f32_4 %52 = OpImageSampleImplicitLod %50 %51 
                                 f32 %53 = OpCompositeExtract %52 3 
                                             OpStore %45 %53 
                                 f32 %55 = OpLoad %45 
                               f32_2 %56 = OpCompositeConstruct %55 %55 
                               f32_2 %60 = OpFMul %56 %59 
                                             OpStore %54 %60 
                 read_only Texture2D %61 = OpLoad %24 
                             sampler %62 = OpLoad %28 
          read_only Texture2DSampled %63 = OpSampledImage %61 %62 
                               f32_2 %64 = OpLoad %9 
                               f32_4 %65 = OpImageSampleImplicitLod %63 %64 
                                 f32 %66 = OpCompositeExtract %65 3 
                                             OpStore %45 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %21 %74 
                                 f32 %75 = OpLoad %45 
                                 f32 %77 = OpFMul %75 %76 
                        Private f32* %79 = OpAccessChain %54 %78 
                                 f32 %80 = OpLoad %79 
                                 f32 %81 = OpFNegate %80 
                                 f32 %82 = OpFAdd %77 %81 
                        Private f32* %83 = OpAccessChain %54 %78 
                                             OpStore %83 %82 
                                 f32 %85 = OpLoad %45 
                                 f32 %86 = OpFMul %85 %76 
                        Private f32* %88 = OpAccessChain %54 %87 
                                 f32 %89 = OpLoad %88 
                                 f32 %90 = OpFAdd %86 %89 
                                             OpStore %84 %90 
                                 f32 %91 = OpLoad %84 
                                 f32 %93 = OpFAdd %91 %92 
                         Output f32* %95 = OpAccessChain %39 %94 
                                             OpStore %95 %93 
                                 f32 %96 = OpLoad %21 
                                 f32 %97 = OpFNegate %96 
                                 f32 %99 = OpFMul %97 %98 
                       Private f32* %100 = OpAccessChain %54 %78 
                                f32 %101 = OpLoad %100 
                                f32 %102 = OpFAdd %99 %101 
                       Private f32* %103 = OpAccessChain %54 %78 
                                             OpStore %103 %102 
                                f32 %104 = OpLoad %21 
                                f32 %106 = OpFMul %104 %105 
                                             OpStore %84 %106 
                                f32 %107 = OpLoad %45 
                                f32 %108 = OpFMul %107 %76 
                                f32 %109 = OpLoad %84 
                                f32 %110 = OpFAdd %108 %109 
                       Private f32* %111 = OpAccessChain %54 %87 
                                             OpStore %111 %110 
                              f32_2 %112 = OpLoad %54 
                              f32_2 %113 = OpVectorShuffle %112 %112 1 0 
                              f32_2 %117 = OpFAdd %113 %116 
                              f32_4 %118 = OpLoad %39 
                              f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 3 
                                             OpStore %39 %119 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "YCbCrA_To_RGBA"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 143641
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 127
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %45 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %83 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %103 RelaxedPrecision 
                                             OpDecorate %105 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %115 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                             OpDecorate %118 RelaxedPrecision 
                                             OpDecorate %119 RelaxedPrecision 
                                             OpDecorate %123 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %40 = OpConstant 3.674022E-40 
                                 u32 %42 = OpConstant 0 
                                     %44 = OpTypePointer Output %33 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                                     %50 = OpTypePointer Output %6 
                        Private f32* %54 = OpVariable Private 
UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
            UniformConstant sampler* %57 = OpVariable UniformConstant 
                                 f32 %65 = OpConstant 3.674022E-40 
                                 f32 %66 = OpConstant 3.674022E-40 
                               f32_2 %67 = OpConstantComposite %65 %66 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                        Private f32* %90 = OpVariable Private 
                                 u32 %93 = OpConstant 1 
                                 f32 %98 = OpConstant 3.674022E-40 
                                u32 %100 = OpConstant 2 
                                f32 %104 = OpConstant 3.674022E-40 
                                f32 %111 = OpConstant 3.674022E-40 
                                f32 %120 = OpConstant 3.674022E-40 
                                f32 %121 = OpConstant 3.674022E-40 
                              f32_2 %122 = OpConstantComposite %120 %121 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %39 = OpLoad %21 
                                 f32 %41 = OpFAdd %39 %40 
                        Private f32* %43 = OpAccessChain %38 %42 
                                             OpStore %43 %41 
                        Private f32* %46 = OpAccessChain %38 %42 
                                 f32 %47 = OpLoad %46 
                                 f32 %49 = OpFMul %47 %48 
                         Output f32* %51 = OpAccessChain %45 %36 
                                             OpStore %51 %49 
                               f32_2 %52 = OpLoad vs_TEXCOORD0 
                               f32_2 %53 = OpFMul %52 %15 
                                             OpStore %9 %53 
                 read_only Texture2D %56 = OpLoad %55 
                             sampler %58 = OpLoad %57 
          read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                               f32_2 %60 = OpLoad %9 
                               f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                 f32 %62 = OpCompositeExtract %61 3 
                                             OpStore %54 %62 
                                 f32 %63 = OpLoad %54 
                               f32_2 %64 = OpCompositeConstruct %63 %63 
                               f32_2 %68 = OpFMul %64 %67 
                                             OpStore %38 %68 
                 read_only Texture2D %69 = OpLoad %24 
                             sampler %70 = OpLoad %28 
          read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %54 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_2 %80 = OpLoad %9 
                               f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                 f32 %82 = OpCompositeExtract %81 3 
                                             OpStore %21 %82 
                                 f32 %83 = OpLoad %54 
                                 f32 %84 = OpFMul %83 %48 
                        Private f32* %85 = OpAccessChain %38 %42 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpFNegate %86 
                                 f32 %88 = OpFAdd %84 %87 
                        Private f32* %89 = OpAccessChain %38 %42 
                                             OpStore %89 %88 
                                 f32 %91 = OpLoad %54 
                                 f32 %92 = OpFMul %91 %48 
                        Private f32* %94 = OpAccessChain %38 %93 
                                 f32 %95 = OpLoad %94 
                                 f32 %96 = OpFAdd %92 %95 
                                             OpStore %90 %96 
                                 f32 %97 = OpLoad %90 
                                 f32 %99 = OpFAdd %97 %98 
                        Output f32* %101 = OpAccessChain %45 %100 
                                             OpStore %101 %99 
                                f32 %102 = OpLoad %21 
                                f32 %103 = OpFNegate %102 
                                f32 %105 = OpFMul %103 %104 
                       Private f32* %106 = OpAccessChain %38 %42 
                                f32 %107 = OpLoad %106 
                                f32 %108 = OpFAdd %105 %107 
                       Private f32* %109 = OpAccessChain %38 %42 
                                             OpStore %109 %108 
                                f32 %110 = OpLoad %21 
                                f32 %112 = OpFMul %110 %111 
                                             OpStore %90 %112 
                                f32 %113 = OpLoad %54 
                                f32 %114 = OpFMul %113 %48 
                                f32 %115 = OpLoad %90 
                                f32 %116 = OpFAdd %114 %115 
                       Private f32* %117 = OpAccessChain %38 %93 
                                             OpStore %117 %116 
                              f32_2 %118 = OpLoad %38 
                              f32_2 %119 = OpVectorShuffle %118 %118 1 0 
                              f32_2 %123 = OpFAdd %119 %122 
                              f32_4 %124 = OpLoad %45 
                              f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                             OpStore %45 %125 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 127
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %45 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %83 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %103 RelaxedPrecision 
                                             OpDecorate %105 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %115 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                             OpDecorate %118 RelaxedPrecision 
                                             OpDecorate %119 RelaxedPrecision 
                                             OpDecorate %123 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %40 = OpConstant 3.674022E-40 
                                 u32 %42 = OpConstant 0 
                                     %44 = OpTypePointer Output %33 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                                     %50 = OpTypePointer Output %6 
                        Private f32* %54 = OpVariable Private 
UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
            UniformConstant sampler* %57 = OpVariable UniformConstant 
                                 f32 %65 = OpConstant 3.674022E-40 
                                 f32 %66 = OpConstant 3.674022E-40 
                               f32_2 %67 = OpConstantComposite %65 %66 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                        Private f32* %90 = OpVariable Private 
                                 u32 %93 = OpConstant 1 
                                 f32 %98 = OpConstant 3.674022E-40 
                                u32 %100 = OpConstant 2 
                                f32 %104 = OpConstant 3.674022E-40 
                                f32 %111 = OpConstant 3.674022E-40 
                                f32 %120 = OpConstant 3.674022E-40 
                                f32 %121 = OpConstant 3.674022E-40 
                              f32_2 %122 = OpConstantComposite %120 %121 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %39 = OpLoad %21 
                                 f32 %41 = OpFAdd %39 %40 
                        Private f32* %43 = OpAccessChain %38 %42 
                                             OpStore %43 %41 
                        Private f32* %46 = OpAccessChain %38 %42 
                                 f32 %47 = OpLoad %46 
                                 f32 %49 = OpFMul %47 %48 
                         Output f32* %51 = OpAccessChain %45 %36 
                                             OpStore %51 %49 
                               f32_2 %52 = OpLoad vs_TEXCOORD0 
                               f32_2 %53 = OpFMul %52 %15 
                                             OpStore %9 %53 
                 read_only Texture2D %56 = OpLoad %55 
                             sampler %58 = OpLoad %57 
          read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                               f32_2 %60 = OpLoad %9 
                               f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                 f32 %62 = OpCompositeExtract %61 3 
                                             OpStore %54 %62 
                                 f32 %63 = OpLoad %54 
                               f32_2 %64 = OpCompositeConstruct %63 %63 
                               f32_2 %68 = OpFMul %64 %67 
                                             OpStore %38 %68 
                 read_only Texture2D %69 = OpLoad %24 
                             sampler %70 = OpLoad %28 
          read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %54 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_2 %80 = OpLoad %9 
                               f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                 f32 %82 = OpCompositeExtract %81 3 
                                             OpStore %21 %82 
                                 f32 %83 = OpLoad %54 
                                 f32 %84 = OpFMul %83 %48 
                        Private f32* %85 = OpAccessChain %38 %42 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpFNegate %86 
                                 f32 %88 = OpFAdd %84 %87 
                        Private f32* %89 = OpAccessChain %38 %42 
                                             OpStore %89 %88 
                                 f32 %91 = OpLoad %54 
                                 f32 %92 = OpFMul %91 %48 
                        Private f32* %94 = OpAccessChain %38 %93 
                                 f32 %95 = OpLoad %94 
                                 f32 %96 = OpFAdd %92 %95 
                                             OpStore %90 %96 
                                 f32 %97 = OpLoad %90 
                                 f32 %99 = OpFAdd %97 %98 
                        Output f32* %101 = OpAccessChain %45 %100 
                                             OpStore %101 %99 
                                f32 %102 = OpLoad %21 
                                f32 %103 = OpFNegate %102 
                                f32 %105 = OpFMul %103 %104 
                       Private f32* %106 = OpAccessChain %38 %42 
                                f32 %107 = OpLoad %106 
                                f32 %108 = OpFAdd %105 %107 
                       Private f32* %109 = OpAccessChain %38 %42 
                                             OpStore %109 %108 
                                f32 %110 = OpLoad %21 
                                f32 %112 = OpFMul %110 %111 
                                             OpStore %90 %112 
                                f32 %113 = OpLoad %54 
                                f32 %114 = OpFMul %113 %48 
                                f32 %115 = OpLoad %90 
                                f32 %116 = OpFAdd %114 %115 
                       Private f32* %117 = OpAccessChain %38 %93 
                                             OpStore %117 %116 
                              f32_2 %118 = OpLoad %38 
                              f32_2 %119 = OpVectorShuffle %118 %118 1 0 
                              f32_2 %123 = OpFAdd %119 %122 
                              f32_4 %124 = OpLoad %45 
                              f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                             OpStore %45 %125 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 127
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %45 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %83 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %103 RelaxedPrecision 
                                             OpDecorate %105 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %115 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                             OpDecorate %118 RelaxedPrecision 
                                             OpDecorate %119 RelaxedPrecision 
                                             OpDecorate %123 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %40 = OpConstant 3.674022E-40 
                                 u32 %42 = OpConstant 0 
                                     %44 = OpTypePointer Output %33 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                                     %50 = OpTypePointer Output %6 
                        Private f32* %54 = OpVariable Private 
UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
            UniformConstant sampler* %57 = OpVariable UniformConstant 
                                 f32 %65 = OpConstant 3.674022E-40 
                                 f32 %66 = OpConstant 3.674022E-40 
                               f32_2 %67 = OpConstantComposite %65 %66 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                        Private f32* %90 = OpVariable Private 
                                 u32 %93 = OpConstant 1 
                                 f32 %98 = OpConstant 3.674022E-40 
                                u32 %100 = OpConstant 2 
                                f32 %104 = OpConstant 3.674022E-40 
                                f32 %111 = OpConstant 3.674022E-40 
                                f32 %120 = OpConstant 3.674022E-40 
                                f32 %121 = OpConstant 3.674022E-40 
                              f32_2 %122 = OpConstantComposite %120 %121 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %39 = OpLoad %21 
                                 f32 %41 = OpFAdd %39 %40 
                        Private f32* %43 = OpAccessChain %38 %42 
                                             OpStore %43 %41 
                        Private f32* %46 = OpAccessChain %38 %42 
                                 f32 %47 = OpLoad %46 
                                 f32 %49 = OpFMul %47 %48 
                         Output f32* %51 = OpAccessChain %45 %36 
                                             OpStore %51 %49 
                               f32_2 %52 = OpLoad vs_TEXCOORD0 
                               f32_2 %53 = OpFMul %52 %15 
                                             OpStore %9 %53 
                 read_only Texture2D %56 = OpLoad %55 
                             sampler %58 = OpLoad %57 
          read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                               f32_2 %60 = OpLoad %9 
                               f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                 f32 %62 = OpCompositeExtract %61 3 
                                             OpStore %54 %62 
                                 f32 %63 = OpLoad %54 
                               f32_2 %64 = OpCompositeConstruct %63 %63 
                               f32_2 %68 = OpFMul %64 %67 
                                             OpStore %38 %68 
                 read_only Texture2D %69 = OpLoad %24 
                             sampler %70 = OpLoad %28 
          read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %54 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_2 %80 = OpLoad %9 
                               f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                 f32 %82 = OpCompositeExtract %81 3 
                                             OpStore %21 %82 
                                 f32 %83 = OpLoad %54 
                                 f32 %84 = OpFMul %83 %48 
                        Private f32* %85 = OpAccessChain %38 %42 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpFNegate %86 
                                 f32 %88 = OpFAdd %84 %87 
                        Private f32* %89 = OpAccessChain %38 %42 
                                             OpStore %89 %88 
                                 f32 %91 = OpLoad %54 
                                 f32 %92 = OpFMul %91 %48 
                        Private f32* %94 = OpAccessChain %38 %93 
                                 f32 %95 = OpLoad %94 
                                 f32 %96 = OpFAdd %92 %95 
                                             OpStore %90 %96 
                                 f32 %97 = OpLoad %90 
                                 f32 %99 = OpFAdd %97 %98 
                        Output f32* %101 = OpAccessChain %45 %100 
                                             OpStore %101 %99 
                                f32 %102 = OpLoad %21 
                                f32 %103 = OpFNegate %102 
                                f32 %105 = OpFMul %103 %104 
                       Private f32* %106 = OpAccessChain %38 %42 
                                f32 %107 = OpLoad %106 
                                f32 %108 = OpFAdd %105 %107 
                       Private f32* %109 = OpAccessChain %38 %42 
                                             OpStore %109 %108 
                                f32 %110 = OpLoad %21 
                                f32 %112 = OpFMul %110 %111 
                                             OpStore %90 %112 
                                f32 %113 = OpLoad %54 
                                f32 %114 = OpFMul %113 %48 
                                f32 %115 = OpLoad %90 
                                f32 %116 = OpFAdd %114 %115 
                       Private f32* %117 = OpAccessChain %38 %93 
                                             OpStore %117 %116 
                              f32_2 %118 = OpLoad %38 
                              f32_2 %119 = OpVectorShuffle %118 %118 1 0 
                              f32_2 %123 = OpFAdd %119 %122 
                              f32_4 %124 = OpLoad %45 
                              f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                             OpStore %45 %125 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump vec2 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_SecondTex, u_xlat0.xy).w;
    u_xlat16_1.xy = vec2(u_xlat16_4) * vec2(0.390625, 1.984375);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0 = texture(_ThirdTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_4 * 1.15625 + (-u_xlat16_1.x);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + u_xlat16_1.y;
    SV_Target0.z = u_xlat16_3 + -1.06861997;
    u_xlat16_1.x = (-u_xlat16_0) * 0.8125 + u_xlat16_1.x;
    u_xlat16_3 = u_xlat16_0 * 1.59375;
    u_xlat16_1.y = u_xlat16_4 * 1.15625 + u_xlat16_3;
    SV_Target0.xy = u_xlat16_1.yx + vec2(-0.872539997, 0.531369984);
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 127
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %45 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %83 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %103 RelaxedPrecision 
                                             OpDecorate %105 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %115 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                             OpDecorate %118 RelaxedPrecision 
                                             OpDecorate %119 RelaxedPrecision 
                                             OpDecorate %123 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %40 = OpConstant 3.674022E-40 
                                 u32 %42 = OpConstant 0 
                                     %44 = OpTypePointer Output %33 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                                     %50 = OpTypePointer Output %6 
                        Private f32* %54 = OpVariable Private 
UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
            UniformConstant sampler* %57 = OpVariable UniformConstant 
                                 f32 %65 = OpConstant 3.674022E-40 
                                 f32 %66 = OpConstant 3.674022E-40 
                               f32_2 %67 = OpConstantComposite %65 %66 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                        Private f32* %90 = OpVariable Private 
                                 u32 %93 = OpConstant 1 
                                 f32 %98 = OpConstant 3.674022E-40 
                                u32 %100 = OpConstant 2 
                                f32 %104 = OpConstant 3.674022E-40 
                                f32 %111 = OpConstant 3.674022E-40 
                                f32 %120 = OpConstant 3.674022E-40 
                                f32 %121 = OpConstant 3.674022E-40 
                              f32_2 %122 = OpConstantComposite %120 %121 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %39 = OpLoad %21 
                                 f32 %41 = OpFAdd %39 %40 
                        Private f32* %43 = OpAccessChain %38 %42 
                                             OpStore %43 %41 
                        Private f32* %46 = OpAccessChain %38 %42 
                                 f32 %47 = OpLoad %46 
                                 f32 %49 = OpFMul %47 %48 
                         Output f32* %51 = OpAccessChain %45 %36 
                                             OpStore %51 %49 
                               f32_2 %52 = OpLoad vs_TEXCOORD0 
                               f32_2 %53 = OpFMul %52 %15 
                                             OpStore %9 %53 
                 read_only Texture2D %56 = OpLoad %55 
                             sampler %58 = OpLoad %57 
          read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                               f32_2 %60 = OpLoad %9 
                               f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                 f32 %62 = OpCompositeExtract %61 3 
                                             OpStore %54 %62 
                                 f32 %63 = OpLoad %54 
                               f32_2 %64 = OpCompositeConstruct %63 %63 
                               f32_2 %68 = OpFMul %64 %67 
                                             OpStore %38 %68 
                 read_only Texture2D %69 = OpLoad %24 
                             sampler %70 = OpLoad %28 
          read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %54 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_2 %80 = OpLoad %9 
                               f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                 f32 %82 = OpCompositeExtract %81 3 
                                             OpStore %21 %82 
                                 f32 %83 = OpLoad %54 
                                 f32 %84 = OpFMul %83 %48 
                        Private f32* %85 = OpAccessChain %38 %42 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpFNegate %86 
                                 f32 %88 = OpFAdd %84 %87 
                        Private f32* %89 = OpAccessChain %38 %42 
                                             OpStore %89 %88 
                                 f32 %91 = OpLoad %54 
                                 f32 %92 = OpFMul %91 %48 
                        Private f32* %94 = OpAccessChain %38 %93 
                                 f32 %95 = OpLoad %94 
                                 f32 %96 = OpFAdd %92 %95 
                                             OpStore %90 %96 
                                 f32 %97 = OpLoad %90 
                                 f32 %99 = OpFAdd %97 %98 
                        Output f32* %101 = OpAccessChain %45 %100 
                                             OpStore %101 %99 
                                f32 %102 = OpLoad %21 
                                f32 %103 = OpFNegate %102 
                                f32 %105 = OpFMul %103 %104 
                       Private f32* %106 = OpAccessChain %38 %42 
                                f32 %107 = OpLoad %106 
                                f32 %108 = OpFAdd %105 %107 
                       Private f32* %109 = OpAccessChain %38 %42 
                                             OpStore %109 %108 
                                f32 %110 = OpLoad %21 
                                f32 %112 = OpFMul %110 %111 
                                             OpStore %90 %112 
                                f32 %113 = OpLoad %54 
                                f32 %114 = OpFMul %113 %48 
                                f32 %115 = OpLoad %90 
                                f32 %116 = OpFAdd %114 %115 
                       Private f32* %117 = OpAccessChain %38 %93 
                                             OpStore %117 %116 
                              f32_2 %118 = OpLoad %38 
                              f32_2 %119 = OpVectorShuffle %118 %118 1 0 
                              f32_2 %123 = OpFAdd %119 %122 
                              f32_4 %124 = OpLoad %45 
                              f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                             OpStore %45 %125 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 127
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %45 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %83 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %103 RelaxedPrecision 
                                             OpDecorate %105 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %115 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                             OpDecorate %118 RelaxedPrecision 
                                             OpDecorate %119 RelaxedPrecision 
                                             OpDecorate %123 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %40 = OpConstant 3.674022E-40 
                                 u32 %42 = OpConstant 0 
                                     %44 = OpTypePointer Output %33 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                                     %50 = OpTypePointer Output %6 
                        Private f32* %54 = OpVariable Private 
UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
            UniformConstant sampler* %57 = OpVariable UniformConstant 
                                 f32 %65 = OpConstant 3.674022E-40 
                                 f32 %66 = OpConstant 3.674022E-40 
                               f32_2 %67 = OpConstantComposite %65 %66 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                        Private f32* %90 = OpVariable Private 
                                 u32 %93 = OpConstant 1 
                                 f32 %98 = OpConstant 3.674022E-40 
                                u32 %100 = OpConstant 2 
                                f32 %104 = OpConstant 3.674022E-40 
                                f32 %111 = OpConstant 3.674022E-40 
                                f32 %120 = OpConstant 3.674022E-40 
                                f32 %121 = OpConstant 3.674022E-40 
                              f32_2 %122 = OpConstantComposite %120 %121 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %39 = OpLoad %21 
                                 f32 %41 = OpFAdd %39 %40 
                        Private f32* %43 = OpAccessChain %38 %42 
                                             OpStore %43 %41 
                        Private f32* %46 = OpAccessChain %38 %42 
                                 f32 %47 = OpLoad %46 
                                 f32 %49 = OpFMul %47 %48 
                         Output f32* %51 = OpAccessChain %45 %36 
                                             OpStore %51 %49 
                               f32_2 %52 = OpLoad vs_TEXCOORD0 
                               f32_2 %53 = OpFMul %52 %15 
                                             OpStore %9 %53 
                 read_only Texture2D %56 = OpLoad %55 
                             sampler %58 = OpLoad %57 
          read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                               f32_2 %60 = OpLoad %9 
                               f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                 f32 %62 = OpCompositeExtract %61 3 
                                             OpStore %54 %62 
                                 f32 %63 = OpLoad %54 
                               f32_2 %64 = OpCompositeConstruct %63 %63 
                               f32_2 %68 = OpFMul %64 %67 
                                             OpStore %38 %68 
                 read_only Texture2D %69 = OpLoad %24 
                             sampler %70 = OpLoad %28 
          read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %54 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_2 %80 = OpLoad %9 
                               f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                 f32 %82 = OpCompositeExtract %81 3 
                                             OpStore %21 %82 
                                 f32 %83 = OpLoad %54 
                                 f32 %84 = OpFMul %83 %48 
                        Private f32* %85 = OpAccessChain %38 %42 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpFNegate %86 
                                 f32 %88 = OpFAdd %84 %87 
                        Private f32* %89 = OpAccessChain %38 %42 
                                             OpStore %89 %88 
                                 f32 %91 = OpLoad %54 
                                 f32 %92 = OpFMul %91 %48 
                        Private f32* %94 = OpAccessChain %38 %93 
                                 f32 %95 = OpLoad %94 
                                 f32 %96 = OpFAdd %92 %95 
                                             OpStore %90 %96 
                                 f32 %97 = OpLoad %90 
                                 f32 %99 = OpFAdd %97 %98 
                        Output f32* %101 = OpAccessChain %45 %100 
                                             OpStore %101 %99 
                                f32 %102 = OpLoad %21 
                                f32 %103 = OpFNegate %102 
                                f32 %105 = OpFMul %103 %104 
                       Private f32* %106 = OpAccessChain %38 %42 
                                f32 %107 = OpLoad %106 
                                f32 %108 = OpFAdd %105 %107 
                       Private f32* %109 = OpAccessChain %38 %42 
                                             OpStore %109 %108 
                                f32 %110 = OpLoad %21 
                                f32 %112 = OpFMul %110 %111 
                                             OpStore %90 %112 
                                f32 %113 = OpLoad %54 
                                f32 %114 = OpFMul %113 %48 
                                f32 %115 = OpLoad %90 
                                f32 %116 = OpFAdd %114 %115 
                       Private f32* %117 = OpAccessChain %38 %93 
                                             OpStore %117 %116 
                              f32_2 %118 = OpLoad %38 
                              f32_2 %119 = OpVectorShuffle %118 %118 1 0 
                              f32_2 %123 = OpFAdd %119 %122 
                              f32_4 %124 = OpLoad %45 
                              f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                             OpStore %45 %125 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 102
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate vs_TEXCOORD0 Location 84 
                                                     OpDecorate %86 Location 86 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %85 = OpTypePointer Input %82 
                                Input f32_2* %86 = OpVariable Input 
                                             %96 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %87 = OpLoad %86 
                              Uniform f32_4* %88 = OpAccessChain %20 %35 
                                       f32_4 %89 = OpLoad %88 
                                       f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                       f32_2 %91 = OpFMul %87 %90 
                              Uniform f32_4* %92 = OpAccessChain %20 %35 
                                       f32_4 %93 = OpLoad %92 
                                       f32_2 %94 = OpVectorShuffle %93 %93 2 3 
                                       f32_2 %95 = OpFAdd %91 %94 
                                                     OpStore vs_TEXCOORD0 %95 
                                 Output f32* %97 = OpAccessChain %72 %22 %68 
                                         f32 %98 = OpLoad %97 
                                         f32 %99 = OpFNegate %98 
                                Output f32* %100 = OpAccessChain %72 %22 %68 
                                                     OpStore %100 %99 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 127
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %45 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %21 RelaxedPrecision 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %24 DescriptorSet 24 
                                             OpDecorate %24 Binding 24 
                                             OpDecorate %25 RelaxedPrecision 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %28 DescriptorSet 28 
                                             OpDecorate %28 Binding 28 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %38 RelaxedPrecision 
                                             OpDecorate %39 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %70 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %75 RelaxedPrecision 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %83 RelaxedPrecision 
                                             OpDecorate %84 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %90 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %95 RelaxedPrecision 
                                             OpDecorate %96 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %99 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %103 RelaxedPrecision 
                                             OpDecorate %105 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %108 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %112 RelaxedPrecision 
                                             OpDecorate %113 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %115 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                             OpDecorate %118 RelaxedPrecision 
                                             OpDecorate %119 RelaxedPrecision 
                                             OpDecorate %123 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                                     %20 = OpTypePointer Private %6 
                        Private f32* %21 = OpVariable Private 
                                     %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %23 = OpTypePointer UniformConstant %22 
UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                     %26 = OpTypeSampler 
                                     %27 = OpTypePointer UniformConstant %26 
            UniformConstant sampler* %28 = OpVariable UniformConstant 
                                     %30 = OpTypeSampledImage %22 
                                     %33 = OpTypeVector %6 4 
                                     %35 = OpTypeInt 32 0 
                                 u32 %36 = OpConstant 3 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %40 = OpConstant 3.674022E-40 
                                 u32 %42 = OpConstant 0 
                                     %44 = OpTypePointer Output %33 
                       Output f32_4* %45 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                                     %50 = OpTypePointer Output %6 
                        Private f32* %54 = OpVariable Private 
UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
            UniformConstant sampler* %57 = OpVariable UniformConstant 
                                 f32 %65 = OpConstant 3.674022E-40 
                                 f32 %66 = OpConstant 3.674022E-40 
                               f32_2 %67 = OpConstantComposite %65 %66 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                        Private f32* %90 = OpVariable Private 
                                 u32 %93 = OpConstant 1 
                                 f32 %98 = OpConstant 3.674022E-40 
                                u32 %100 = OpConstant 2 
                                f32 %104 = OpConstant 3.674022E-40 
                                f32 %111 = OpConstant 3.674022E-40 
                                f32 %120 = OpConstant 3.674022E-40 
                                f32 %121 = OpConstant 3.674022E-40 
                              f32_2 %122 = OpConstantComposite %120 %121 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %25 = OpLoad %24 
                             sampler %29 = OpLoad %28 
          read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                               f32_2 %32 = OpLoad %9 
                               f32_4 %34 = OpImageSampleImplicitLod %31 %32 
                                 f32 %37 = OpCompositeExtract %34 3 
                                             OpStore %21 %37 
                                 f32 %39 = OpLoad %21 
                                 f32 %41 = OpFAdd %39 %40 
                        Private f32* %43 = OpAccessChain %38 %42 
                                             OpStore %43 %41 
                        Private f32* %46 = OpAccessChain %38 %42 
                                 f32 %47 = OpLoad %46 
                                 f32 %49 = OpFMul %47 %48 
                         Output f32* %51 = OpAccessChain %45 %36 
                                             OpStore %51 %49 
                               f32_2 %52 = OpLoad vs_TEXCOORD0 
                               f32_2 %53 = OpFMul %52 %15 
                                             OpStore %9 %53 
                 read_only Texture2D %56 = OpLoad %55 
                             sampler %58 = OpLoad %57 
          read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                               f32_2 %60 = OpLoad %9 
                               f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                 f32 %62 = OpCompositeExtract %61 3 
                                             OpStore %54 %62 
                                 f32 %63 = OpLoad %54 
                               f32_2 %64 = OpCompositeConstruct %63 %63 
                               f32_2 %68 = OpFMul %64 %67 
                                             OpStore %38 %68 
                 read_only Texture2D %69 = OpLoad %24 
                             sampler %70 = OpLoad %28 
          read_only Texture2DSampled %71 = OpSampledImage %69 %70 
                               f32_2 %72 = OpLoad %9 
                               f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                 f32 %74 = OpCompositeExtract %73 3 
                                             OpStore %54 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_2 %80 = OpLoad %9 
                               f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                 f32 %82 = OpCompositeExtract %81 3 
                                             OpStore %21 %82 
                                 f32 %83 = OpLoad %54 
                                 f32 %84 = OpFMul %83 %48 
                        Private f32* %85 = OpAccessChain %38 %42 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpFNegate %86 
                                 f32 %88 = OpFAdd %84 %87 
                        Private f32* %89 = OpAccessChain %38 %42 
                                             OpStore %89 %88 
                                 f32 %91 = OpLoad %54 
                                 f32 %92 = OpFMul %91 %48 
                        Private f32* %94 = OpAccessChain %38 %93 
                                 f32 %95 = OpLoad %94 
                                 f32 %96 = OpFAdd %92 %95 
                                             OpStore %90 %96 
                                 f32 %97 = OpLoad %90 
                                 f32 %99 = OpFAdd %97 %98 
                        Output f32* %101 = OpAccessChain %45 %100 
                                             OpStore %101 %99 
                                f32 %102 = OpLoad %21 
                                f32 %103 = OpFNegate %102 
                                f32 %105 = OpFMul %103 %104 
                       Private f32* %106 = OpAccessChain %38 %42 
                                f32 %107 = OpLoad %106 
                                f32 %108 = OpFAdd %105 %107 
                       Private f32* %109 = OpAccessChain %38 %42 
                                             OpStore %109 %108 
                                f32 %110 = OpLoad %21 
                                f32 %112 = OpFMul %110 %111 
                                             OpStore %90 %112 
                                f32 %113 = OpLoad %54 
                                f32 %114 = OpFMul %113 %48 
                                f32 %115 = OpLoad %90 
                                f32 %116 = OpFAdd %114 %115 
                       Private f32* %117 = OpAccessChain %38 %93 
                                             OpStore %117 %116 
                              f32_2 %118 = OpLoad %38 
                              f32_2 %119 = OpVectorShuffle %118 %118 1 0 
                              f32_2 %123 = OpFAdd %119 %122 
                              f32_4 %124 = OpLoad %45 
                              f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                             OpStore %45 %125 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "Flip_RGBA_To_RGBA"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 214152
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 29
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %26 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 Location 26 
                                             OpDecorate %27 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Output %7 
                       Output f32_4* %26 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %27 = OpLoad %9 
                                             OpStore %26 %27 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 29
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %26 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 Location 26 
                                             OpDecorate %27 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Output %7 
                       Output f32_4* %26 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %27 = OpLoad %9 
                                             OpStore %26 %27 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 29
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %26 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 Location 26 
                                             OpDecorate %27 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Output %7 
                       Output f32_4* %26 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %27 = OpLoad %9 
                                             OpStore %26 %27 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 29
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %26 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 Location 26 
                                             OpDecorate %27 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Output %7 
                       Output f32_4* %26 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %27 = OpLoad %9 
                                             OpStore %26 %27 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 29
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %26 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 Location 26 
                                             OpDecorate %27 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Output %7 
                       Output f32_4* %26 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %27 = OpLoad %9 
                                             OpStore %26 %27 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 29
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %26 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %9 RelaxedPrecision 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 Location 26 
                                             OpDecorate %27 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Output %7 
                       Output f32_4* %26 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %27 = OpLoad %9 
                                             OpStore %26 %27 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "Flip_RGBASplit_To_RGBA"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 307398
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat0.w = texture(_MainTex, u_xlat1.xy).y;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat0.w = texture(_MainTex, u_xlat1.xy).y;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat0.w = texture(_MainTex, u_xlat1.xy).y;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %14 = OpConstant 3.674022E-40 
                                 f32 %15 = OpConstant 3.674022E-40 
                               f32_2 %16 = OpConstantComposite %14 %15 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
                                     %33 = OpTypeVector %6 3 
                                     %37 = OpTypePointer Private %10 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %41 = OpConstant 3.674022E-40 
                               f32_2 %42 = OpConstantComposite %14 %41 
                                     %49 = OpTypeInt 32 0 
                                 u32 %50 = OpConstant 1 
                                 u32 %52 = OpConstant 3 
                                     %53 = OpTypePointer Private %6 
                                     %55 = OpTypePointer Output %7 
                       Output f32_4* %56 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                               f32_2 %17 = OpFMul %13 %16 
                               f32_4 %18 = OpLoad %9 
                               f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                             OpStore %9 %19 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                               f32_4 %32 = OpImageSampleImplicitLod %29 %31 
                               f32_3 %34 = OpVectorShuffle %32 %32 0 1 2 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_2 %39 = OpLoad vs_TEXCOORD0 
                               f32_2 %40 = OpFMul %39 %16 
                               f32_2 %43 = OpFAdd %40 %42 
                                             OpStore %38 %43 
                 read_only Texture2D %44 = OpLoad %22 
                             sampler %45 = OpLoad %26 
          read_only Texture2DSampled %46 = OpSampledImage %44 %45 
                               f32_2 %47 = OpLoad %38 
                               f32_4 %48 = OpImageSampleImplicitLod %46 %47 
                                 f32 %51 = OpCompositeExtract %48 1 
                        Private f32* %54 = OpAccessChain %9 %52 
                                             OpStore %54 %51 
                               f32_4 %57 = OpLoad %9 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %14 = OpConstant 3.674022E-40 
                                 f32 %15 = OpConstant 3.674022E-40 
                               f32_2 %16 = OpConstantComposite %14 %15 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
                                     %33 = OpTypeVector %6 3 
                                     %37 = OpTypePointer Private %10 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %41 = OpConstant 3.674022E-40 
                               f32_2 %42 = OpConstantComposite %14 %41 
                                     %49 = OpTypeInt 32 0 
                                 u32 %50 = OpConstant 1 
                                 u32 %52 = OpConstant 3 
                                     %53 = OpTypePointer Private %6 
                                     %55 = OpTypePointer Output %7 
                       Output f32_4* %56 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                               f32_2 %17 = OpFMul %13 %16 
                               f32_4 %18 = OpLoad %9 
                               f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                             OpStore %9 %19 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                               f32_4 %32 = OpImageSampleImplicitLod %29 %31 
                               f32_3 %34 = OpVectorShuffle %32 %32 0 1 2 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_2 %39 = OpLoad vs_TEXCOORD0 
                               f32_2 %40 = OpFMul %39 %16 
                               f32_2 %43 = OpFAdd %40 %42 
                                             OpStore %38 %43 
                 read_only Texture2D %44 = OpLoad %22 
                             sampler %45 = OpLoad %26 
          read_only Texture2DSampled %46 = OpSampledImage %44 %45 
                               f32_2 %47 = OpLoad %38 
                               f32_4 %48 = OpImageSampleImplicitLod %46 %47 
                                 f32 %51 = OpCompositeExtract %48 1 
                        Private f32* %54 = OpAccessChain %9 %52 
                                             OpStore %54 %51 
                               f32_4 %57 = OpLoad %9 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %14 = OpConstant 3.674022E-40 
                                 f32 %15 = OpConstant 3.674022E-40 
                               f32_2 %16 = OpConstantComposite %14 %15 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
                                     %33 = OpTypeVector %6 3 
                                     %37 = OpTypePointer Private %10 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %41 = OpConstant 3.674022E-40 
                               f32_2 %42 = OpConstantComposite %14 %41 
                                     %49 = OpTypeInt 32 0 
                                 u32 %50 = OpConstant 1 
                                 u32 %52 = OpConstant 3 
                                     %53 = OpTypePointer Private %6 
                                     %55 = OpTypePointer Output %7 
                       Output f32_4* %56 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                               f32_2 %17 = OpFMul %13 %16 
                               f32_4 %18 = OpLoad %9 
                               f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                             OpStore %9 %19 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                               f32_4 %32 = OpImageSampleImplicitLod %29 %31 
                               f32_3 %34 = OpVectorShuffle %32 %32 0 1 2 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_2 %39 = OpLoad vs_TEXCOORD0 
                               f32_2 %40 = OpFMul %39 %16 
                               f32_2 %43 = OpFAdd %40 %42 
                                             OpStore %38 %43 
                 read_only Texture2D %44 = OpLoad %22 
                             sampler %45 = OpLoad %26 
          read_only Texture2DSampled %46 = OpSampledImage %44 %45 
                               f32_2 %47 = OpLoad %38 
                               f32_4 %48 = OpImageSampleImplicitLod %46 %47 
                                 f32 %51 = OpCompositeExtract %48 1 
                        Private f32* %54 = OpAccessChain %9 %52 
                                             OpStore %54 %51 
                               f32_4 %57 = OpLoad %9 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat0.w = texture(_MainTex, u_xlat1.xy).y;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat0.w = texture(_MainTex, u_xlat1.xy).y;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat0.w = texture(_MainTex, u_xlat1.xy).y;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %14 = OpConstant 3.674022E-40 
                                 f32 %15 = OpConstant 3.674022E-40 
                               f32_2 %16 = OpConstantComposite %14 %15 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
                                     %33 = OpTypeVector %6 3 
                                     %37 = OpTypePointer Private %10 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %41 = OpConstant 3.674022E-40 
                               f32_2 %42 = OpConstantComposite %14 %41 
                                     %49 = OpTypeInt 32 0 
                                 u32 %50 = OpConstant 1 
                                 u32 %52 = OpConstant 3 
                                     %53 = OpTypePointer Private %6 
                                     %55 = OpTypePointer Output %7 
                       Output f32_4* %56 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                               f32_2 %17 = OpFMul %13 %16 
                               f32_4 %18 = OpLoad %9 
                               f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                             OpStore %9 %19 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                               f32_4 %32 = OpImageSampleImplicitLod %29 %31 
                               f32_3 %34 = OpVectorShuffle %32 %32 0 1 2 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_2 %39 = OpLoad vs_TEXCOORD0 
                               f32_2 %40 = OpFMul %39 %16 
                               f32_2 %43 = OpFAdd %40 %42 
                                             OpStore %38 %43 
                 read_only Texture2D %44 = OpLoad %22 
                             sampler %45 = OpLoad %26 
          read_only Texture2DSampled %46 = OpSampledImage %44 %45 
                               f32_2 %47 = OpLoad %38 
                               f32_4 %48 = OpImageSampleImplicitLod %46 %47 
                                 f32 %51 = OpCompositeExtract %48 1 
                        Private f32* %54 = OpAccessChain %9 %52 
                                             OpStore %54 %51 
                               f32_4 %57 = OpLoad %9 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %14 = OpConstant 3.674022E-40 
                                 f32 %15 = OpConstant 3.674022E-40 
                               f32_2 %16 = OpConstantComposite %14 %15 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
                                     %33 = OpTypeVector %6 3 
                                     %37 = OpTypePointer Private %10 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %41 = OpConstant 3.674022E-40 
                               f32_2 %42 = OpConstantComposite %14 %41 
                                     %49 = OpTypeInt 32 0 
                                 u32 %50 = OpConstant 1 
                                 u32 %52 = OpConstant 3 
                                     %53 = OpTypePointer Private %6 
                                     %55 = OpTypePointer Output %7 
                       Output f32_4* %56 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                               f32_2 %17 = OpFMul %13 %16 
                               f32_4 %18 = OpLoad %9 
                               f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                             OpStore %9 %19 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                               f32_4 %32 = OpImageSampleImplicitLod %29 %31 
                               f32_3 %34 = OpVectorShuffle %32 %32 0 1 2 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_2 %39 = OpLoad vs_TEXCOORD0 
                               f32_2 %40 = OpFMul %39 %16 
                               f32_2 %43 = OpFAdd %40 %42 
                                             OpStore %38 %43 
                 read_only Texture2D %44 = OpLoad %22 
                             sampler %45 = OpLoad %26 
          read_only Texture2DSampled %46 = OpSampledImage %44 %45 
                               f32_2 %47 = OpLoad %38 
                               f32_4 %48 = OpImageSampleImplicitLod %46 %47 
                                 f32 %51 = OpCompositeExtract %48 1 
                        Private f32* %54 = OpAccessChain %9 %52 
                                             OpStore %54 %51 
                               f32_4 %57 = OpLoad %9 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpDecorate %22 RelaxedPrecision 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %26 RelaxedPrecision 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %45 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %14 = OpConstant 3.674022E-40 
                                 f32 %15 = OpConstant 3.674022E-40 
                               f32_2 %16 = OpConstantComposite %14 %15 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
                                     %33 = OpTypeVector %6 3 
                                     %37 = OpTypePointer Private %10 
                      Private f32_2* %38 = OpVariable Private 
                                 f32 %41 = OpConstant 3.674022E-40 
                               f32_2 %42 = OpConstantComposite %14 %41 
                                     %49 = OpTypeInt 32 0 
                                 u32 %50 = OpConstant 1 
                                 u32 %52 = OpConstant 3 
                                     %53 = OpTypePointer Private %6 
                                     %55 = OpTypePointer Output %7 
                       Output f32_4* %56 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                               f32_2 %17 = OpFMul %13 %16 
                               f32_4 %18 = OpLoad %9 
                               f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                             OpStore %9 %19 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                               f32_4 %32 = OpImageSampleImplicitLod %29 %31 
                               f32_3 %34 = OpVectorShuffle %32 %32 0 1 2 
                               f32_4 %35 = OpLoad %9 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %9 %36 
                               f32_2 %39 = OpLoad vs_TEXCOORD0 
                               f32_2 %40 = OpFMul %39 %16 
                               f32_2 %43 = OpFAdd %40 %42 
                                             OpStore %38 %43 
                 read_only Texture2D %44 = OpLoad %22 
                             sampler %45 = OpLoad %26 
          read_only Texture2DSampled %46 = OpSampledImage %44 %45 
                               f32_2 %47 = OpLoad %38 
                               f32_4 %48 = OpImageSampleImplicitLod %46 %47 
                                 f32 %51 = OpCompositeExtract %48 1 
                        Private f32* %54 = OpAccessChain %9 %52 
                                             OpStore %54 %51 
                               f32_4 %57 = OpLoad %9 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "Flip_SemiPlanarYCbCr_To_RGB1"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 384739
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
float u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0 = _MainTex_TexelSize.z + -0.5;
    u_xlat3 = vs_TEXCOORD0.x * u_xlat0 + 0.5;
    u_xlat0 = float(1.0) / u_xlat0;
    u_xlat3 = floor(u_xlat3);
    u_xlat6 = u_xlat3 * 0.5;
    u_xlati3 = int(u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb9 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = fract(abs(u_xlat6));
    u_xlat6 = (u_xlatb9) ? u_xlat6 : (-u_xlat6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6==0.0);
#else
    u_xlatb6 = u_xlat6==0.0;
#endif
    u_xlati9 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb6) ? u_xlati3 : u_xlati9;
    u_xlati6 = u_xlati3 + 1;
    u_xlat3 = float(u_xlati3);
    u_xlat1.x = u_xlat0 * u_xlat3;
    u_xlat3 = float(u_xlati6);
    u_xlat1.z = u_xlat0 * u_xlat3;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.x = u_xlat16_3 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_3 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_3 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
float u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0 = _MainTex_TexelSize.z + -0.5;
    u_xlat3 = vs_TEXCOORD0.x * u_xlat0 + 0.5;
    u_xlat0 = float(1.0) / u_xlat0;
    u_xlat3 = floor(u_xlat3);
    u_xlat6 = u_xlat3 * 0.5;
    u_xlati3 = int(u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb9 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = fract(abs(u_xlat6));
    u_xlat6 = (u_xlatb9) ? u_xlat6 : (-u_xlat6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6==0.0);
#else
    u_xlatb6 = u_xlat6==0.0;
#endif
    u_xlati9 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb6) ? u_xlati3 : u_xlati9;
    u_xlati6 = u_xlati3 + 1;
    u_xlat3 = float(u_xlati3);
    u_xlat1.x = u_xlat0 * u_xlat3;
    u_xlat3 = float(u_xlati6);
    u_xlat1.z = u_xlat0 * u_xlat3;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.x = u_xlat16_3 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_3 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_3 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
float u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0 = _MainTex_TexelSize.z + -0.5;
    u_xlat3 = vs_TEXCOORD0.x * u_xlat0 + 0.5;
    u_xlat0 = float(1.0) / u_xlat0;
    u_xlat3 = floor(u_xlat3);
    u_xlat6 = u_xlat3 * 0.5;
    u_xlati3 = int(u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb9 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = fract(abs(u_xlat6));
    u_xlat6 = (u_xlatb9) ? u_xlat6 : (-u_xlat6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6==0.0);
#else
    u_xlatb6 = u_xlat6==0.0;
#endif
    u_xlati9 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb6) ? u_xlati3 : u_xlati9;
    u_xlati6 = u_xlati3 + 1;
    u_xlat3 = float(u_xlati3);
    u_xlat1.x = u_xlat0 * u_xlat3;
    u_xlat3 = float(u_xlati6);
    u_xlat1.z = u_xlat0 * u_xlat3;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.x = u_xlat16_3 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_3 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_3 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 188
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %25 %156 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 25 
                                              OpDecorate %100 RelaxedPrecision 
                                              OpDecorate %103 RelaxedPrecision 
                                              OpDecorate %103 DescriptorSet 103 
                                              OpDecorate %103 Binding 103 
                                              OpDecorate %104 RelaxedPrecision 
                                              OpDecorate %107 RelaxedPrecision 
                                              OpDecorate %107 DescriptorSet 107 
                                              OpDecorate %107 Binding 107 
                                              OpDecorate %108 RelaxedPrecision 
                                              OpDecorate %115 RelaxedPrecision 
                                              OpDecorate %116 RelaxedPrecision 
                                              OpDecorate %117 RelaxedPrecision 
                                              OpDecorate %118 RelaxedPrecision 
                                              OpDecorate %123 RelaxedPrecision 
                                              OpDecorate %125 RelaxedPrecision 
                                              OpDecorate %126 RelaxedPrecision 
                                              OpDecorate %127 RelaxedPrecision 
                                              OpDecorate %131 RelaxedPrecision 
                                              OpDecorate %132 RelaxedPrecision 
                                              OpDecorate %132 DescriptorSet 132 
                                              OpDecorate %132 Binding 132 
                                              OpDecorate %133 RelaxedPrecision 
                                              OpDecorate %134 RelaxedPrecision 
                                              OpDecorate %134 DescriptorSet 134 
                                              OpDecorate %134 Binding 134 
                                              OpDecorate %135 RelaxedPrecision 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %142 RelaxedPrecision 
                                              OpDecorate %144 RelaxedPrecision 
                                              OpDecorate %145 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %150 RelaxedPrecision 
                                              OpDecorate %153 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %156 Location 156 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %159 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %163 RelaxedPrecision 
                                              OpDecorate %165 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %173 RelaxedPrecision 
                                              OpDecorate %174 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %183 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypePointer Private %6 
                          Private f32* %8 = OpVariable Private 
                                       %9 = OpTypeVector %6 4 
                                      %10 = OpTypeStruct %9 
                                      %11 = OpTypePointer Uniform %10 
             Uniform struct {f32_4;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 0 
                                      %15 = OpTypeInt 32 0 
                                  u32 %16 = OpConstant 2 
                                      %17 = OpTypePointer Uniform %6 
                                  f32 %20 = OpConstant 3.674022E-40 
                         Private f32* %22 = OpVariable Private 
                                      %23 = OpTypeVector %6 2 
                                      %24 = OpTypePointer Input %23 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  u32 %26 = OpConstant 0 
                                      %27 = OpTypePointer Input %6 
                                  f32 %32 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                         Private f32* %39 = OpVariable Private 
                                      %42 = OpTypePointer Private %13 
                         Private i32* %43 = OpVariable Private 
                                      %46 = OpTypeBool 
                                      %47 = OpTypePointer Private %46 
                        Private bool* %48 = OpVariable Private 
                                      %57 = OpTypePointer Function %6 
                        Private bool* %66 = OpVariable Private 
                                  f32 %68 = OpConstant 3.674022E-40 
                         Private i32* %70 = OpVariable Private 
                                  i32 %72 = OpConstant -1 
                         Private i32* %78 = OpVariable Private 
                                  i32 %80 = OpConstant 1 
                                      %84 = OpTypePointer Private %9 
                       Private f32_4* %85 = OpVariable Private 
                        Private f32* %100 = OpVariable Private 
                                     %101 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %102 = OpTypePointer UniformConstant %101 
UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                     %105 = OpTypeSampler 
                                     %106 = OpTypePointer UniformConstant %105 
            UniformConstant sampler* %107 = OpVariable UniformConstant 
                                     %109 = OpTypeSampledImage %101 
                                 u32 %114 = OpConstant 3 
                        Private f32* %116 = OpVariable Private 
                                     %124 = OpTypePointer Private %23 
                      Private f32_2* %125 = OpVariable Private 
                                 f32 %128 = OpConstant 3.674022E-40 
                                 f32 %129 = OpConstant 3.674022E-40 
                               f32_2 %130 = OpConstantComposite %128 %129 
UniformConstant read_only Texture2D* %132 = OpVariable UniformConstant 
            UniformConstant sampler* %134 = OpVariable UniformConstant 
                                 f32 %141 = OpConstant 3.674022E-40 
                        Private f32* %148 = OpVariable Private 
                                 u32 %151 = OpConstant 1 
                                     %155 = OpTypePointer Output %9 
                       Output f32_4* %156 = OpVariable Output 
                                 f32 %158 = OpConstant 3.674022E-40 
                                     %160 = OpTypePointer Output %6 
                                 f32 %164 = OpConstant 3.674022E-40 
                                 f32 %171 = OpConstant 3.674022E-40 
                                 f32 %180 = OpConstant 3.674022E-40 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_2 %182 = OpConstantComposite %180 %181 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %58 = OpVariable Function 
                         Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                  f32 %19 = OpLoad %18 
                                  f32 %21 = OpFAdd %19 %20 
                                              OpStore %8 %21 
                           Input f32* %28 = OpAccessChain vs_TEXCOORD0 %26 
                                  f32 %29 = OpLoad %28 
                                  f32 %30 = OpLoad %8 
                                  f32 %31 = OpFMul %29 %30 
                                  f32 %33 = OpFAdd %31 %32 
                                              OpStore %22 %33 
                                  f32 %35 = OpLoad %8 
                                  f32 %36 = OpFDiv %34 %35 
                                              OpStore %8 %36 
                                  f32 %37 = OpLoad %22 
                                  f32 %38 = OpExtInst %1 8 %37 
                                              OpStore %22 %38 
                                  f32 %40 = OpLoad %22 
                                  f32 %41 = OpFMul %40 %32 
                                              OpStore %39 %41 
                                  f32 %44 = OpLoad %22 
                                  i32 %45 = OpConvertFToS %44 
                                              OpStore %43 %45 
                                  f32 %49 = OpLoad %39 
                                  f32 %50 = OpLoad %39 
                                  f32 %51 = OpFNegate %50 
                                 bool %52 = OpFOrdGreaterThanEqual %49 %51 
                                              OpStore %48 %52 
                                  f32 %53 = OpLoad %39 
                                  f32 %54 = OpExtInst %1 4 %53 
                                  f32 %55 = OpExtInst %1 10 %54 
                                              OpStore %39 %55 
                                 bool %56 = OpLoad %48 
                                              OpSelectionMerge %60 None 
                                              OpBranchConditional %56 %59 %62 
                                      %59 = OpLabel 
                                  f32 %61 = OpLoad %39 
                                              OpStore %58 %61 
                                              OpBranch %60 
                                      %62 = OpLabel 
                                  f32 %63 = OpLoad %39 
                                  f32 %64 = OpFNegate %63 
                                              OpStore %58 %64 
                                              OpBranch %60 
                                      %60 = OpLabel 
                                  f32 %65 = OpLoad %58 
                                              OpStore %39 %65 
                                  f32 %67 = OpLoad %39 
                                 bool %69 = OpFOrdEqual %67 %68 
                                              OpStore %66 %69 
                                  i32 %71 = OpLoad %43 
                                  i32 %73 = OpIAdd %71 %72 
                                              OpStore %70 %73 
                                 bool %74 = OpLoad %66 
                                  i32 %75 = OpLoad %43 
                                  i32 %76 = OpLoad %70 
                                  i32 %77 = OpSelect %74 %75 %76 
                                              OpStore %43 %77 
                                  i32 %79 = OpLoad %43 
                                  i32 %81 = OpIAdd %79 %80 
                                              OpStore %78 %81 
                                  i32 %82 = OpLoad %43 
                                  f32 %83 = OpConvertSToF %82 
                                              OpStore %22 %83 
                                  f32 %86 = OpLoad %8 
                                  f32 %87 = OpLoad %22 
                                  f32 %88 = OpFMul %86 %87 
                         Private f32* %89 = OpAccessChain %85 %26 
                                              OpStore %89 %88 
                                  i32 %90 = OpLoad %78 
                                  f32 %91 = OpConvertSToF %90 
                                              OpStore %22 %91 
                                  f32 %92 = OpLoad %8 
                                  f32 %93 = OpLoad %22 
                                  f32 %94 = OpFMul %92 %93 
                         Private f32* %95 = OpAccessChain %85 %16 
                                              OpStore %95 %94 
                                f32_2 %96 = OpLoad vs_TEXCOORD0 
                                f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                                f32_4 %98 = OpLoad %85 
                                f32_4 %99 = OpVectorShuffle %98 %97 0 4 2 5 
                                              OpStore %85 %99 
                 read_only Texture2D %104 = OpLoad %103 
                             sampler %108 = OpLoad %107 
          read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                               f32_4 %111 = OpLoad %85 
                               f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                               f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                 f32 %115 = OpCompositeExtract %113 3 
                                              OpStore %100 %115 
                 read_only Texture2D %117 = OpLoad %103 
                             sampler %118 = OpLoad %107 
          read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                               f32_4 %120 = OpLoad %85 
                               f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                               f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                 f32 %123 = OpCompositeExtract %122 3 
                                              OpStore %116 %123 
                                 f32 %126 = OpLoad %116 
                               f32_2 %127 = OpCompositeConstruct %126 %126 
                               f32_2 %131 = OpFMul %127 %130 
                                              OpStore %125 %131 
                 read_only Texture2D %133 = OpLoad %132 
                             sampler %135 = OpLoad %134 
          read_only Texture2DSampled %136 = OpSampledImage %133 %135 
                               f32_2 %137 = OpLoad vs_TEXCOORD0 
                               f32_4 %138 = OpImageSampleImplicitLod %136 %137 
                                 f32 %139 = OpCompositeExtract %138 3 
                                              OpStore %116 %139 
                                 f32 %140 = OpLoad %116 
                                 f32 %142 = OpFMul %140 %141 
                        Private f32* %143 = OpAccessChain %125 %26 
                                 f32 %144 = OpLoad %143 
                                 f32 %145 = OpFNegate %144 
                                 f32 %146 = OpFAdd %142 %145 
                        Private f32* %147 = OpAccessChain %125 %26 
                                              OpStore %147 %146 
                                 f32 %149 = OpLoad %116 
                                 f32 %150 = OpFMul %149 %141 
                        Private f32* %152 = OpAccessChain %125 %151 
                                 f32 %153 = OpLoad %152 
                                 f32 %154 = OpFAdd %150 %153 
                                              OpStore %148 %154 
                                 f32 %157 = OpLoad %148 
                                 f32 %159 = OpFAdd %157 %158 
                         Output f32* %161 = OpAccessChain %156 %16 
                                              OpStore %161 %159 
                                 f32 %162 = OpLoad %100 
                                 f32 %163 = OpFNegate %162 
                                 f32 %165 = OpFMul %163 %164 
                        Private f32* %166 = OpAccessChain %125 %26 
                                 f32 %167 = OpLoad %166 
                                 f32 %168 = OpFAdd %165 %167 
                        Private f32* %169 = OpAccessChain %125 %26 
                                              OpStore %169 %168 
                                 f32 %170 = OpLoad %100 
                                 f32 %172 = OpFMul %170 %171 
                                              OpStore %148 %172 
                                 f32 %173 = OpLoad %116 
                                 f32 %174 = OpFMul %173 %141 
                                 f32 %175 = OpLoad %148 
                                 f32 %176 = OpFAdd %174 %175 
                        Private f32* %177 = OpAccessChain %125 %151 
                                              OpStore %177 %176 
                               f32_2 %178 = OpLoad %125 
                               f32_2 %179 = OpVectorShuffle %178 %178 1 0 
                               f32_2 %183 = OpFAdd %179 %182 
                               f32_4 %184 = OpLoad %156 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                              OpStore %156 %185 
                         Output f32* %186 = OpAccessChain %156 %114 
                                              OpStore %186 %34 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 188
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %25 %156 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 25 
                                              OpDecorate %100 RelaxedPrecision 
                                              OpDecorate %103 RelaxedPrecision 
                                              OpDecorate %103 DescriptorSet 103 
                                              OpDecorate %103 Binding 103 
                                              OpDecorate %104 RelaxedPrecision 
                                              OpDecorate %107 RelaxedPrecision 
                                              OpDecorate %107 DescriptorSet 107 
                                              OpDecorate %107 Binding 107 
                                              OpDecorate %108 RelaxedPrecision 
                                              OpDecorate %115 RelaxedPrecision 
                                              OpDecorate %116 RelaxedPrecision 
                                              OpDecorate %117 RelaxedPrecision 
                                              OpDecorate %118 RelaxedPrecision 
                                              OpDecorate %123 RelaxedPrecision 
                                              OpDecorate %125 RelaxedPrecision 
                                              OpDecorate %126 RelaxedPrecision 
                                              OpDecorate %127 RelaxedPrecision 
                                              OpDecorate %131 RelaxedPrecision 
                                              OpDecorate %132 RelaxedPrecision 
                                              OpDecorate %132 DescriptorSet 132 
                                              OpDecorate %132 Binding 132 
                                              OpDecorate %133 RelaxedPrecision 
                                              OpDecorate %134 RelaxedPrecision 
                                              OpDecorate %134 DescriptorSet 134 
                                              OpDecorate %134 Binding 134 
                                              OpDecorate %135 RelaxedPrecision 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %142 RelaxedPrecision 
                                              OpDecorate %144 RelaxedPrecision 
                                              OpDecorate %145 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %150 RelaxedPrecision 
                                              OpDecorate %153 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %156 Location 156 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %159 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %163 RelaxedPrecision 
                                              OpDecorate %165 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %173 RelaxedPrecision 
                                              OpDecorate %174 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %183 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypePointer Private %6 
                          Private f32* %8 = OpVariable Private 
                                       %9 = OpTypeVector %6 4 
                                      %10 = OpTypeStruct %9 
                                      %11 = OpTypePointer Uniform %10 
             Uniform struct {f32_4;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 0 
                                      %15 = OpTypeInt 32 0 
                                  u32 %16 = OpConstant 2 
                                      %17 = OpTypePointer Uniform %6 
                                  f32 %20 = OpConstant 3.674022E-40 
                         Private f32* %22 = OpVariable Private 
                                      %23 = OpTypeVector %6 2 
                                      %24 = OpTypePointer Input %23 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  u32 %26 = OpConstant 0 
                                      %27 = OpTypePointer Input %6 
                                  f32 %32 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                         Private f32* %39 = OpVariable Private 
                                      %42 = OpTypePointer Private %13 
                         Private i32* %43 = OpVariable Private 
                                      %46 = OpTypeBool 
                                      %47 = OpTypePointer Private %46 
                        Private bool* %48 = OpVariable Private 
                                      %57 = OpTypePointer Function %6 
                        Private bool* %66 = OpVariable Private 
                                  f32 %68 = OpConstant 3.674022E-40 
                         Private i32* %70 = OpVariable Private 
                                  i32 %72 = OpConstant -1 
                         Private i32* %78 = OpVariable Private 
                                  i32 %80 = OpConstant 1 
                                      %84 = OpTypePointer Private %9 
                       Private f32_4* %85 = OpVariable Private 
                        Private f32* %100 = OpVariable Private 
                                     %101 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %102 = OpTypePointer UniformConstant %101 
UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                     %105 = OpTypeSampler 
                                     %106 = OpTypePointer UniformConstant %105 
            UniformConstant sampler* %107 = OpVariable UniformConstant 
                                     %109 = OpTypeSampledImage %101 
                                 u32 %114 = OpConstant 3 
                        Private f32* %116 = OpVariable Private 
                                     %124 = OpTypePointer Private %23 
                      Private f32_2* %125 = OpVariable Private 
                                 f32 %128 = OpConstant 3.674022E-40 
                                 f32 %129 = OpConstant 3.674022E-40 
                               f32_2 %130 = OpConstantComposite %128 %129 
UniformConstant read_only Texture2D* %132 = OpVariable UniformConstant 
            UniformConstant sampler* %134 = OpVariable UniformConstant 
                                 f32 %141 = OpConstant 3.674022E-40 
                        Private f32* %148 = OpVariable Private 
                                 u32 %151 = OpConstant 1 
                                     %155 = OpTypePointer Output %9 
                       Output f32_4* %156 = OpVariable Output 
                                 f32 %158 = OpConstant 3.674022E-40 
                                     %160 = OpTypePointer Output %6 
                                 f32 %164 = OpConstant 3.674022E-40 
                                 f32 %171 = OpConstant 3.674022E-40 
                                 f32 %180 = OpConstant 3.674022E-40 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_2 %182 = OpConstantComposite %180 %181 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %58 = OpVariable Function 
                         Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                  f32 %19 = OpLoad %18 
                                  f32 %21 = OpFAdd %19 %20 
                                              OpStore %8 %21 
                           Input f32* %28 = OpAccessChain vs_TEXCOORD0 %26 
                                  f32 %29 = OpLoad %28 
                                  f32 %30 = OpLoad %8 
                                  f32 %31 = OpFMul %29 %30 
                                  f32 %33 = OpFAdd %31 %32 
                                              OpStore %22 %33 
                                  f32 %35 = OpLoad %8 
                                  f32 %36 = OpFDiv %34 %35 
                                              OpStore %8 %36 
                                  f32 %37 = OpLoad %22 
                                  f32 %38 = OpExtInst %1 8 %37 
                                              OpStore %22 %38 
                                  f32 %40 = OpLoad %22 
                                  f32 %41 = OpFMul %40 %32 
                                              OpStore %39 %41 
                                  f32 %44 = OpLoad %22 
                                  i32 %45 = OpConvertFToS %44 
                                              OpStore %43 %45 
                                  f32 %49 = OpLoad %39 
                                  f32 %50 = OpLoad %39 
                                  f32 %51 = OpFNegate %50 
                                 bool %52 = OpFOrdGreaterThanEqual %49 %51 
                                              OpStore %48 %52 
                                  f32 %53 = OpLoad %39 
                                  f32 %54 = OpExtInst %1 4 %53 
                                  f32 %55 = OpExtInst %1 10 %54 
                                              OpStore %39 %55 
                                 bool %56 = OpLoad %48 
                                              OpSelectionMerge %60 None 
                                              OpBranchConditional %56 %59 %62 
                                      %59 = OpLabel 
                                  f32 %61 = OpLoad %39 
                                              OpStore %58 %61 
                                              OpBranch %60 
                                      %62 = OpLabel 
                                  f32 %63 = OpLoad %39 
                                  f32 %64 = OpFNegate %63 
                                              OpStore %58 %64 
                                              OpBranch %60 
                                      %60 = OpLabel 
                                  f32 %65 = OpLoad %58 
                                              OpStore %39 %65 
                                  f32 %67 = OpLoad %39 
                                 bool %69 = OpFOrdEqual %67 %68 
                                              OpStore %66 %69 
                                  i32 %71 = OpLoad %43 
                                  i32 %73 = OpIAdd %71 %72 
                                              OpStore %70 %73 
                                 bool %74 = OpLoad %66 
                                  i32 %75 = OpLoad %43 
                                  i32 %76 = OpLoad %70 
                                  i32 %77 = OpSelect %74 %75 %76 
                                              OpStore %43 %77 
                                  i32 %79 = OpLoad %43 
                                  i32 %81 = OpIAdd %79 %80 
                                              OpStore %78 %81 
                                  i32 %82 = OpLoad %43 
                                  f32 %83 = OpConvertSToF %82 
                                              OpStore %22 %83 
                                  f32 %86 = OpLoad %8 
                                  f32 %87 = OpLoad %22 
                                  f32 %88 = OpFMul %86 %87 
                         Private f32* %89 = OpAccessChain %85 %26 
                                              OpStore %89 %88 
                                  i32 %90 = OpLoad %78 
                                  f32 %91 = OpConvertSToF %90 
                                              OpStore %22 %91 
                                  f32 %92 = OpLoad %8 
                                  f32 %93 = OpLoad %22 
                                  f32 %94 = OpFMul %92 %93 
                         Private f32* %95 = OpAccessChain %85 %16 
                                              OpStore %95 %94 
                                f32_2 %96 = OpLoad vs_TEXCOORD0 
                                f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                                f32_4 %98 = OpLoad %85 
                                f32_4 %99 = OpVectorShuffle %98 %97 0 4 2 5 
                                              OpStore %85 %99 
                 read_only Texture2D %104 = OpLoad %103 
                             sampler %108 = OpLoad %107 
          read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                               f32_4 %111 = OpLoad %85 
                               f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                               f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                 f32 %115 = OpCompositeExtract %113 3 
                                              OpStore %100 %115 
                 read_only Texture2D %117 = OpLoad %103 
                             sampler %118 = OpLoad %107 
          read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                               f32_4 %120 = OpLoad %85 
                               f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                               f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                 f32 %123 = OpCompositeExtract %122 3 
                                              OpStore %116 %123 
                                 f32 %126 = OpLoad %116 
                               f32_2 %127 = OpCompositeConstruct %126 %126 
                               f32_2 %131 = OpFMul %127 %130 
                                              OpStore %125 %131 
                 read_only Texture2D %133 = OpLoad %132 
                             sampler %135 = OpLoad %134 
          read_only Texture2DSampled %136 = OpSampledImage %133 %135 
                               f32_2 %137 = OpLoad vs_TEXCOORD0 
                               f32_4 %138 = OpImageSampleImplicitLod %136 %137 
                                 f32 %139 = OpCompositeExtract %138 3 
                                              OpStore %116 %139 
                                 f32 %140 = OpLoad %116 
                                 f32 %142 = OpFMul %140 %141 
                        Private f32* %143 = OpAccessChain %125 %26 
                                 f32 %144 = OpLoad %143 
                                 f32 %145 = OpFNegate %144 
                                 f32 %146 = OpFAdd %142 %145 
                        Private f32* %147 = OpAccessChain %125 %26 
                                              OpStore %147 %146 
                                 f32 %149 = OpLoad %116 
                                 f32 %150 = OpFMul %149 %141 
                        Private f32* %152 = OpAccessChain %125 %151 
                                 f32 %153 = OpLoad %152 
                                 f32 %154 = OpFAdd %150 %153 
                                              OpStore %148 %154 
                                 f32 %157 = OpLoad %148 
                                 f32 %159 = OpFAdd %157 %158 
                         Output f32* %161 = OpAccessChain %156 %16 
                                              OpStore %161 %159 
                                 f32 %162 = OpLoad %100 
                                 f32 %163 = OpFNegate %162 
                                 f32 %165 = OpFMul %163 %164 
                        Private f32* %166 = OpAccessChain %125 %26 
                                 f32 %167 = OpLoad %166 
                                 f32 %168 = OpFAdd %165 %167 
                        Private f32* %169 = OpAccessChain %125 %26 
                                              OpStore %169 %168 
                                 f32 %170 = OpLoad %100 
                                 f32 %172 = OpFMul %170 %171 
                                              OpStore %148 %172 
                                 f32 %173 = OpLoad %116 
                                 f32 %174 = OpFMul %173 %141 
                                 f32 %175 = OpLoad %148 
                                 f32 %176 = OpFAdd %174 %175 
                        Private f32* %177 = OpAccessChain %125 %151 
                                              OpStore %177 %176 
                               f32_2 %178 = OpLoad %125 
                               f32_2 %179 = OpVectorShuffle %178 %178 1 0 
                               f32_2 %183 = OpFAdd %179 %182 
                               f32_4 %184 = OpLoad %156 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                              OpStore %156 %185 
                         Output f32* %186 = OpAccessChain %156 %114 
                                              OpStore %186 %34 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 188
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %25 %156 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 25 
                                              OpDecorate %100 RelaxedPrecision 
                                              OpDecorate %103 RelaxedPrecision 
                                              OpDecorate %103 DescriptorSet 103 
                                              OpDecorate %103 Binding 103 
                                              OpDecorate %104 RelaxedPrecision 
                                              OpDecorate %107 RelaxedPrecision 
                                              OpDecorate %107 DescriptorSet 107 
                                              OpDecorate %107 Binding 107 
                                              OpDecorate %108 RelaxedPrecision 
                                              OpDecorate %115 RelaxedPrecision 
                                              OpDecorate %116 RelaxedPrecision 
                                              OpDecorate %117 RelaxedPrecision 
                                              OpDecorate %118 RelaxedPrecision 
                                              OpDecorate %123 RelaxedPrecision 
                                              OpDecorate %125 RelaxedPrecision 
                                              OpDecorate %126 RelaxedPrecision 
                                              OpDecorate %127 RelaxedPrecision 
                                              OpDecorate %131 RelaxedPrecision 
                                              OpDecorate %132 RelaxedPrecision 
                                              OpDecorate %132 DescriptorSet 132 
                                              OpDecorate %132 Binding 132 
                                              OpDecorate %133 RelaxedPrecision 
                                              OpDecorate %134 RelaxedPrecision 
                                              OpDecorate %134 DescriptorSet 134 
                                              OpDecorate %134 Binding 134 
                                              OpDecorate %135 RelaxedPrecision 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %142 RelaxedPrecision 
                                              OpDecorate %144 RelaxedPrecision 
                                              OpDecorate %145 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %150 RelaxedPrecision 
                                              OpDecorate %153 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %156 Location 156 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %159 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %163 RelaxedPrecision 
                                              OpDecorate %165 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %173 RelaxedPrecision 
                                              OpDecorate %174 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %183 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypePointer Private %6 
                          Private f32* %8 = OpVariable Private 
                                       %9 = OpTypeVector %6 4 
                                      %10 = OpTypeStruct %9 
                                      %11 = OpTypePointer Uniform %10 
             Uniform struct {f32_4;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 0 
                                      %15 = OpTypeInt 32 0 
                                  u32 %16 = OpConstant 2 
                                      %17 = OpTypePointer Uniform %6 
                                  f32 %20 = OpConstant 3.674022E-40 
                         Private f32* %22 = OpVariable Private 
                                      %23 = OpTypeVector %6 2 
                                      %24 = OpTypePointer Input %23 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  u32 %26 = OpConstant 0 
                                      %27 = OpTypePointer Input %6 
                                  f32 %32 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                         Private f32* %39 = OpVariable Private 
                                      %42 = OpTypePointer Private %13 
                         Private i32* %43 = OpVariable Private 
                                      %46 = OpTypeBool 
                                      %47 = OpTypePointer Private %46 
                        Private bool* %48 = OpVariable Private 
                                      %57 = OpTypePointer Function %6 
                        Private bool* %66 = OpVariable Private 
                                  f32 %68 = OpConstant 3.674022E-40 
                         Private i32* %70 = OpVariable Private 
                                  i32 %72 = OpConstant -1 
                         Private i32* %78 = OpVariable Private 
                                  i32 %80 = OpConstant 1 
                                      %84 = OpTypePointer Private %9 
                       Private f32_4* %85 = OpVariable Private 
                        Private f32* %100 = OpVariable Private 
                                     %101 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %102 = OpTypePointer UniformConstant %101 
UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                     %105 = OpTypeSampler 
                                     %106 = OpTypePointer UniformConstant %105 
            UniformConstant sampler* %107 = OpVariable UniformConstant 
                                     %109 = OpTypeSampledImage %101 
                                 u32 %114 = OpConstant 3 
                        Private f32* %116 = OpVariable Private 
                                     %124 = OpTypePointer Private %23 
                      Private f32_2* %125 = OpVariable Private 
                                 f32 %128 = OpConstant 3.674022E-40 
                                 f32 %129 = OpConstant 3.674022E-40 
                               f32_2 %130 = OpConstantComposite %128 %129 
UniformConstant read_only Texture2D* %132 = OpVariable UniformConstant 
            UniformConstant sampler* %134 = OpVariable UniformConstant 
                                 f32 %141 = OpConstant 3.674022E-40 
                        Private f32* %148 = OpVariable Private 
                                 u32 %151 = OpConstant 1 
                                     %155 = OpTypePointer Output %9 
                       Output f32_4* %156 = OpVariable Output 
                                 f32 %158 = OpConstant 3.674022E-40 
                                     %160 = OpTypePointer Output %6 
                                 f32 %164 = OpConstant 3.674022E-40 
                                 f32 %171 = OpConstant 3.674022E-40 
                                 f32 %180 = OpConstant 3.674022E-40 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_2 %182 = OpConstantComposite %180 %181 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %58 = OpVariable Function 
                         Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                  f32 %19 = OpLoad %18 
                                  f32 %21 = OpFAdd %19 %20 
                                              OpStore %8 %21 
                           Input f32* %28 = OpAccessChain vs_TEXCOORD0 %26 
                                  f32 %29 = OpLoad %28 
                                  f32 %30 = OpLoad %8 
                                  f32 %31 = OpFMul %29 %30 
                                  f32 %33 = OpFAdd %31 %32 
                                              OpStore %22 %33 
                                  f32 %35 = OpLoad %8 
                                  f32 %36 = OpFDiv %34 %35 
                                              OpStore %8 %36 
                                  f32 %37 = OpLoad %22 
                                  f32 %38 = OpExtInst %1 8 %37 
                                              OpStore %22 %38 
                                  f32 %40 = OpLoad %22 
                                  f32 %41 = OpFMul %40 %32 
                                              OpStore %39 %41 
                                  f32 %44 = OpLoad %22 
                                  i32 %45 = OpConvertFToS %44 
                                              OpStore %43 %45 
                                  f32 %49 = OpLoad %39 
                                  f32 %50 = OpLoad %39 
                                  f32 %51 = OpFNegate %50 
                                 bool %52 = OpFOrdGreaterThanEqual %49 %51 
                                              OpStore %48 %52 
                                  f32 %53 = OpLoad %39 
                                  f32 %54 = OpExtInst %1 4 %53 
                                  f32 %55 = OpExtInst %1 10 %54 
                                              OpStore %39 %55 
                                 bool %56 = OpLoad %48 
                                              OpSelectionMerge %60 None 
                                              OpBranchConditional %56 %59 %62 
                                      %59 = OpLabel 
                                  f32 %61 = OpLoad %39 
                                              OpStore %58 %61 
                                              OpBranch %60 
                                      %62 = OpLabel 
                                  f32 %63 = OpLoad %39 
                                  f32 %64 = OpFNegate %63 
                                              OpStore %58 %64 
                                              OpBranch %60 
                                      %60 = OpLabel 
                                  f32 %65 = OpLoad %58 
                                              OpStore %39 %65 
                                  f32 %67 = OpLoad %39 
                                 bool %69 = OpFOrdEqual %67 %68 
                                              OpStore %66 %69 
                                  i32 %71 = OpLoad %43 
                                  i32 %73 = OpIAdd %71 %72 
                                              OpStore %70 %73 
                                 bool %74 = OpLoad %66 
                                  i32 %75 = OpLoad %43 
                                  i32 %76 = OpLoad %70 
                                  i32 %77 = OpSelect %74 %75 %76 
                                              OpStore %43 %77 
                                  i32 %79 = OpLoad %43 
                                  i32 %81 = OpIAdd %79 %80 
                                              OpStore %78 %81 
                                  i32 %82 = OpLoad %43 
                                  f32 %83 = OpConvertSToF %82 
                                              OpStore %22 %83 
                                  f32 %86 = OpLoad %8 
                                  f32 %87 = OpLoad %22 
                                  f32 %88 = OpFMul %86 %87 
                         Private f32* %89 = OpAccessChain %85 %26 
                                              OpStore %89 %88 
                                  i32 %90 = OpLoad %78 
                                  f32 %91 = OpConvertSToF %90 
                                              OpStore %22 %91 
                                  f32 %92 = OpLoad %8 
                                  f32 %93 = OpLoad %22 
                                  f32 %94 = OpFMul %92 %93 
                         Private f32* %95 = OpAccessChain %85 %16 
                                              OpStore %95 %94 
                                f32_2 %96 = OpLoad vs_TEXCOORD0 
                                f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                                f32_4 %98 = OpLoad %85 
                                f32_4 %99 = OpVectorShuffle %98 %97 0 4 2 5 
                                              OpStore %85 %99 
                 read_only Texture2D %104 = OpLoad %103 
                             sampler %108 = OpLoad %107 
          read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                               f32_4 %111 = OpLoad %85 
                               f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                               f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                 f32 %115 = OpCompositeExtract %113 3 
                                              OpStore %100 %115 
                 read_only Texture2D %117 = OpLoad %103 
                             sampler %118 = OpLoad %107 
          read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                               f32_4 %120 = OpLoad %85 
                               f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                               f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                 f32 %123 = OpCompositeExtract %122 3 
                                              OpStore %116 %123 
                                 f32 %126 = OpLoad %116 
                               f32_2 %127 = OpCompositeConstruct %126 %126 
                               f32_2 %131 = OpFMul %127 %130 
                                              OpStore %125 %131 
                 read_only Texture2D %133 = OpLoad %132 
                             sampler %135 = OpLoad %134 
          read_only Texture2DSampled %136 = OpSampledImage %133 %135 
                               f32_2 %137 = OpLoad vs_TEXCOORD0 
                               f32_4 %138 = OpImageSampleImplicitLod %136 %137 
                                 f32 %139 = OpCompositeExtract %138 3 
                                              OpStore %116 %139 
                                 f32 %140 = OpLoad %116 
                                 f32 %142 = OpFMul %140 %141 
                        Private f32* %143 = OpAccessChain %125 %26 
                                 f32 %144 = OpLoad %143 
                                 f32 %145 = OpFNegate %144 
                                 f32 %146 = OpFAdd %142 %145 
                        Private f32* %147 = OpAccessChain %125 %26 
                                              OpStore %147 %146 
                                 f32 %149 = OpLoad %116 
                                 f32 %150 = OpFMul %149 %141 
                        Private f32* %152 = OpAccessChain %125 %151 
                                 f32 %153 = OpLoad %152 
                                 f32 %154 = OpFAdd %150 %153 
                                              OpStore %148 %154 
                                 f32 %157 = OpLoad %148 
                                 f32 %159 = OpFAdd %157 %158 
                         Output f32* %161 = OpAccessChain %156 %16 
                                              OpStore %161 %159 
                                 f32 %162 = OpLoad %100 
                                 f32 %163 = OpFNegate %162 
                                 f32 %165 = OpFMul %163 %164 
                        Private f32* %166 = OpAccessChain %125 %26 
                                 f32 %167 = OpLoad %166 
                                 f32 %168 = OpFAdd %165 %167 
                        Private f32* %169 = OpAccessChain %125 %26 
                                              OpStore %169 %168 
                                 f32 %170 = OpLoad %100 
                                 f32 %172 = OpFMul %170 %171 
                                              OpStore %148 %172 
                                 f32 %173 = OpLoad %116 
                                 f32 %174 = OpFMul %173 %141 
                                 f32 %175 = OpLoad %148 
                                 f32 %176 = OpFAdd %174 %175 
                        Private f32* %177 = OpAccessChain %125 %151 
                                              OpStore %177 %176 
                               f32_2 %178 = OpLoad %125 
                               f32_2 %179 = OpVectorShuffle %178 %178 1 0 
                               f32_2 %183 = OpFAdd %179 %182 
                               f32_4 %184 = OpLoad %156 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                              OpStore %156 %185 
                         Output f32* %186 = OpAccessChain %156 %114 
                                              OpStore %186 %34 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
float u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0 = _MainTex_TexelSize.z + -0.5;
    u_xlat3 = vs_TEXCOORD0.x * u_xlat0 + 0.5;
    u_xlat0 = float(1.0) / u_xlat0;
    u_xlat3 = floor(u_xlat3);
    u_xlat6 = u_xlat3 * 0.5;
    u_xlati3 = int(u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb9 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = fract(abs(u_xlat6));
    u_xlat6 = (u_xlatb9) ? u_xlat6 : (-u_xlat6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6==0.0);
#else
    u_xlatb6 = u_xlat6==0.0;
#endif
    u_xlati9 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb6) ? u_xlati3 : u_xlati9;
    u_xlati6 = u_xlati3 + 1;
    u_xlat3 = float(u_xlati3);
    u_xlat1.x = u_xlat0 * u_xlat3;
    u_xlat3 = float(u_xlati6);
    u_xlat1.z = u_xlat0 * u_xlat3;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.x = u_xlat16_3 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_3 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_3 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
float u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0 = _MainTex_TexelSize.z + -0.5;
    u_xlat3 = vs_TEXCOORD0.x * u_xlat0 + 0.5;
    u_xlat0 = float(1.0) / u_xlat0;
    u_xlat3 = floor(u_xlat3);
    u_xlat6 = u_xlat3 * 0.5;
    u_xlati3 = int(u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb9 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = fract(abs(u_xlat6));
    u_xlat6 = (u_xlatb9) ? u_xlat6 : (-u_xlat6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6==0.0);
#else
    u_xlatb6 = u_xlat6==0.0;
#endif
    u_xlati9 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb6) ? u_xlati3 : u_xlati9;
    u_xlati6 = u_xlati3 + 1;
    u_xlat3 = float(u_xlati3);
    u_xlat1.x = u_xlat0 * u_xlat3;
    u_xlat3 = float(u_xlati6);
    u_xlat1.z = u_xlat0 * u_xlat3;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.x = u_xlat16_3 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_3 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_3 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
float u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
float u_xlat6;
int u_xlati6;
bool u_xlatb6;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0 = _MainTex_TexelSize.z + -0.5;
    u_xlat3 = vs_TEXCOORD0.x * u_xlat0 + 0.5;
    u_xlat0 = float(1.0) / u_xlat0;
    u_xlat3 = floor(u_xlat3);
    u_xlat6 = u_xlat3 * 0.5;
    u_xlati3 = int(u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat6>=(-u_xlat6));
#else
    u_xlatb9 = u_xlat6>=(-u_xlat6);
#endif
    u_xlat6 = fract(abs(u_xlat6));
    u_xlat6 = (u_xlatb9) ? u_xlat6 : (-u_xlat6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6==0.0);
#else
    u_xlatb6 = u_xlat6==0.0;
#endif
    u_xlati9 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb6) ? u_xlati3 : u_xlati9;
    u_xlati6 = u_xlati3 + 1;
    u_xlat3 = float(u_xlati3);
    u_xlat1.x = u_xlat0 * u_xlat3;
    u_xlat3 = float(u_xlati6);
    u_xlat1.z = u_xlat0 * u_xlat3;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.x = u_xlat16_3 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_3 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_3 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 188
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %25 %156 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 25 
                                              OpDecorate %100 RelaxedPrecision 
                                              OpDecorate %103 RelaxedPrecision 
                                              OpDecorate %103 DescriptorSet 103 
                                              OpDecorate %103 Binding 103 
                                              OpDecorate %104 RelaxedPrecision 
                                              OpDecorate %107 RelaxedPrecision 
                                              OpDecorate %107 DescriptorSet 107 
                                              OpDecorate %107 Binding 107 
                                              OpDecorate %108 RelaxedPrecision 
                                              OpDecorate %115 RelaxedPrecision 
                                              OpDecorate %116 RelaxedPrecision 
                                              OpDecorate %117 RelaxedPrecision 
                                              OpDecorate %118 RelaxedPrecision 
                                              OpDecorate %123 RelaxedPrecision 
                                              OpDecorate %125 RelaxedPrecision 
                                              OpDecorate %126 RelaxedPrecision 
                                              OpDecorate %127 RelaxedPrecision 
                                              OpDecorate %131 RelaxedPrecision 
                                              OpDecorate %132 RelaxedPrecision 
                                              OpDecorate %132 DescriptorSet 132 
                                              OpDecorate %132 Binding 132 
                                              OpDecorate %133 RelaxedPrecision 
                                              OpDecorate %134 RelaxedPrecision 
                                              OpDecorate %134 DescriptorSet 134 
                                              OpDecorate %134 Binding 134 
                                              OpDecorate %135 RelaxedPrecision 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %142 RelaxedPrecision 
                                              OpDecorate %144 RelaxedPrecision 
                                              OpDecorate %145 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %150 RelaxedPrecision 
                                              OpDecorate %153 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %156 Location 156 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %159 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %163 RelaxedPrecision 
                                              OpDecorate %165 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %173 RelaxedPrecision 
                                              OpDecorate %174 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %183 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypePointer Private %6 
                          Private f32* %8 = OpVariable Private 
                                       %9 = OpTypeVector %6 4 
                                      %10 = OpTypeStruct %9 
                                      %11 = OpTypePointer Uniform %10 
             Uniform struct {f32_4;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 0 
                                      %15 = OpTypeInt 32 0 
                                  u32 %16 = OpConstant 2 
                                      %17 = OpTypePointer Uniform %6 
                                  f32 %20 = OpConstant 3.674022E-40 
                         Private f32* %22 = OpVariable Private 
                                      %23 = OpTypeVector %6 2 
                                      %24 = OpTypePointer Input %23 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  u32 %26 = OpConstant 0 
                                      %27 = OpTypePointer Input %6 
                                  f32 %32 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                         Private f32* %39 = OpVariable Private 
                                      %42 = OpTypePointer Private %13 
                         Private i32* %43 = OpVariable Private 
                                      %46 = OpTypeBool 
                                      %47 = OpTypePointer Private %46 
                        Private bool* %48 = OpVariable Private 
                                      %57 = OpTypePointer Function %6 
                        Private bool* %66 = OpVariable Private 
                                  f32 %68 = OpConstant 3.674022E-40 
                         Private i32* %70 = OpVariable Private 
                                  i32 %72 = OpConstant -1 
                         Private i32* %78 = OpVariable Private 
                                  i32 %80 = OpConstant 1 
                                      %84 = OpTypePointer Private %9 
                       Private f32_4* %85 = OpVariable Private 
                        Private f32* %100 = OpVariable Private 
                                     %101 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %102 = OpTypePointer UniformConstant %101 
UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                     %105 = OpTypeSampler 
                                     %106 = OpTypePointer UniformConstant %105 
            UniformConstant sampler* %107 = OpVariable UniformConstant 
                                     %109 = OpTypeSampledImage %101 
                                 u32 %114 = OpConstant 3 
                        Private f32* %116 = OpVariable Private 
                                     %124 = OpTypePointer Private %23 
                      Private f32_2* %125 = OpVariable Private 
                                 f32 %128 = OpConstant 3.674022E-40 
                                 f32 %129 = OpConstant 3.674022E-40 
                               f32_2 %130 = OpConstantComposite %128 %129 
UniformConstant read_only Texture2D* %132 = OpVariable UniformConstant 
            UniformConstant sampler* %134 = OpVariable UniformConstant 
                                 f32 %141 = OpConstant 3.674022E-40 
                        Private f32* %148 = OpVariable Private 
                                 u32 %151 = OpConstant 1 
                                     %155 = OpTypePointer Output %9 
                       Output f32_4* %156 = OpVariable Output 
                                 f32 %158 = OpConstant 3.674022E-40 
                                     %160 = OpTypePointer Output %6 
                                 f32 %164 = OpConstant 3.674022E-40 
                                 f32 %171 = OpConstant 3.674022E-40 
                                 f32 %180 = OpConstant 3.674022E-40 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_2 %182 = OpConstantComposite %180 %181 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %58 = OpVariable Function 
                         Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                  f32 %19 = OpLoad %18 
                                  f32 %21 = OpFAdd %19 %20 
                                              OpStore %8 %21 
                           Input f32* %28 = OpAccessChain vs_TEXCOORD0 %26 
                                  f32 %29 = OpLoad %28 
                                  f32 %30 = OpLoad %8 
                                  f32 %31 = OpFMul %29 %30 
                                  f32 %33 = OpFAdd %31 %32 
                                              OpStore %22 %33 
                                  f32 %35 = OpLoad %8 
                                  f32 %36 = OpFDiv %34 %35 
                                              OpStore %8 %36 
                                  f32 %37 = OpLoad %22 
                                  f32 %38 = OpExtInst %1 8 %37 
                                              OpStore %22 %38 
                                  f32 %40 = OpLoad %22 
                                  f32 %41 = OpFMul %40 %32 
                                              OpStore %39 %41 
                                  f32 %44 = OpLoad %22 
                                  i32 %45 = OpConvertFToS %44 
                                              OpStore %43 %45 
                                  f32 %49 = OpLoad %39 
                                  f32 %50 = OpLoad %39 
                                  f32 %51 = OpFNegate %50 
                                 bool %52 = OpFOrdGreaterThanEqual %49 %51 
                                              OpStore %48 %52 
                                  f32 %53 = OpLoad %39 
                                  f32 %54 = OpExtInst %1 4 %53 
                                  f32 %55 = OpExtInst %1 10 %54 
                                              OpStore %39 %55 
                                 bool %56 = OpLoad %48 
                                              OpSelectionMerge %60 None 
                                              OpBranchConditional %56 %59 %62 
                                      %59 = OpLabel 
                                  f32 %61 = OpLoad %39 
                                              OpStore %58 %61 
                                              OpBranch %60 
                                      %62 = OpLabel 
                                  f32 %63 = OpLoad %39 
                                  f32 %64 = OpFNegate %63 
                                              OpStore %58 %64 
                                              OpBranch %60 
                                      %60 = OpLabel 
                                  f32 %65 = OpLoad %58 
                                              OpStore %39 %65 
                                  f32 %67 = OpLoad %39 
                                 bool %69 = OpFOrdEqual %67 %68 
                                              OpStore %66 %69 
                                  i32 %71 = OpLoad %43 
                                  i32 %73 = OpIAdd %71 %72 
                                              OpStore %70 %73 
                                 bool %74 = OpLoad %66 
                                  i32 %75 = OpLoad %43 
                                  i32 %76 = OpLoad %70 
                                  i32 %77 = OpSelect %74 %75 %76 
                                              OpStore %43 %77 
                                  i32 %79 = OpLoad %43 
                                  i32 %81 = OpIAdd %79 %80 
                                              OpStore %78 %81 
                                  i32 %82 = OpLoad %43 
                                  f32 %83 = OpConvertSToF %82 
                                              OpStore %22 %83 
                                  f32 %86 = OpLoad %8 
                                  f32 %87 = OpLoad %22 
                                  f32 %88 = OpFMul %86 %87 
                         Private f32* %89 = OpAccessChain %85 %26 
                                              OpStore %89 %88 
                                  i32 %90 = OpLoad %78 
                                  f32 %91 = OpConvertSToF %90 
                                              OpStore %22 %91 
                                  f32 %92 = OpLoad %8 
                                  f32 %93 = OpLoad %22 
                                  f32 %94 = OpFMul %92 %93 
                         Private f32* %95 = OpAccessChain %85 %16 
                                              OpStore %95 %94 
                                f32_2 %96 = OpLoad vs_TEXCOORD0 
                                f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                                f32_4 %98 = OpLoad %85 
                                f32_4 %99 = OpVectorShuffle %98 %97 0 4 2 5 
                                              OpStore %85 %99 
                 read_only Texture2D %104 = OpLoad %103 
                             sampler %108 = OpLoad %107 
          read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                               f32_4 %111 = OpLoad %85 
                               f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                               f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                 f32 %115 = OpCompositeExtract %113 3 
                                              OpStore %100 %115 
                 read_only Texture2D %117 = OpLoad %103 
                             sampler %118 = OpLoad %107 
          read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                               f32_4 %120 = OpLoad %85 
                               f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                               f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                 f32 %123 = OpCompositeExtract %122 3 
                                              OpStore %116 %123 
                                 f32 %126 = OpLoad %116 
                               f32_2 %127 = OpCompositeConstruct %126 %126 
                               f32_2 %131 = OpFMul %127 %130 
                                              OpStore %125 %131 
                 read_only Texture2D %133 = OpLoad %132 
                             sampler %135 = OpLoad %134 
          read_only Texture2DSampled %136 = OpSampledImage %133 %135 
                               f32_2 %137 = OpLoad vs_TEXCOORD0 
                               f32_4 %138 = OpImageSampleImplicitLod %136 %137 
                                 f32 %139 = OpCompositeExtract %138 3 
                                              OpStore %116 %139 
                                 f32 %140 = OpLoad %116 
                                 f32 %142 = OpFMul %140 %141 
                        Private f32* %143 = OpAccessChain %125 %26 
                                 f32 %144 = OpLoad %143 
                                 f32 %145 = OpFNegate %144 
                                 f32 %146 = OpFAdd %142 %145 
                        Private f32* %147 = OpAccessChain %125 %26 
                                              OpStore %147 %146 
                                 f32 %149 = OpLoad %116 
                                 f32 %150 = OpFMul %149 %141 
                        Private f32* %152 = OpAccessChain %125 %151 
                                 f32 %153 = OpLoad %152 
                                 f32 %154 = OpFAdd %150 %153 
                                              OpStore %148 %154 
                                 f32 %157 = OpLoad %148 
                                 f32 %159 = OpFAdd %157 %158 
                         Output f32* %161 = OpAccessChain %156 %16 
                                              OpStore %161 %159 
                                 f32 %162 = OpLoad %100 
                                 f32 %163 = OpFNegate %162 
                                 f32 %165 = OpFMul %163 %164 
                        Private f32* %166 = OpAccessChain %125 %26 
                                 f32 %167 = OpLoad %166 
                                 f32 %168 = OpFAdd %165 %167 
                        Private f32* %169 = OpAccessChain %125 %26 
                                              OpStore %169 %168 
                                 f32 %170 = OpLoad %100 
                                 f32 %172 = OpFMul %170 %171 
                                              OpStore %148 %172 
                                 f32 %173 = OpLoad %116 
                                 f32 %174 = OpFMul %173 %141 
                                 f32 %175 = OpLoad %148 
                                 f32 %176 = OpFAdd %174 %175 
                        Private f32* %177 = OpAccessChain %125 %151 
                                              OpStore %177 %176 
                               f32_2 %178 = OpLoad %125 
                               f32_2 %179 = OpVectorShuffle %178 %178 1 0 
                               f32_2 %183 = OpFAdd %179 %182 
                               f32_4 %184 = OpLoad %156 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                              OpStore %156 %185 
                         Output f32* %186 = OpAccessChain %156 %114 
                                              OpStore %186 %34 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 188
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %25 %156 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 25 
                                              OpDecorate %100 RelaxedPrecision 
                                              OpDecorate %103 RelaxedPrecision 
                                              OpDecorate %103 DescriptorSet 103 
                                              OpDecorate %103 Binding 103 
                                              OpDecorate %104 RelaxedPrecision 
                                              OpDecorate %107 RelaxedPrecision 
                                              OpDecorate %107 DescriptorSet 107 
                                              OpDecorate %107 Binding 107 
                                              OpDecorate %108 RelaxedPrecision 
                                              OpDecorate %115 RelaxedPrecision 
                                              OpDecorate %116 RelaxedPrecision 
                                              OpDecorate %117 RelaxedPrecision 
                                              OpDecorate %118 RelaxedPrecision 
                                              OpDecorate %123 RelaxedPrecision 
                                              OpDecorate %125 RelaxedPrecision 
                                              OpDecorate %126 RelaxedPrecision 
                                              OpDecorate %127 RelaxedPrecision 
                                              OpDecorate %131 RelaxedPrecision 
                                              OpDecorate %132 RelaxedPrecision 
                                              OpDecorate %132 DescriptorSet 132 
                                              OpDecorate %132 Binding 132 
                                              OpDecorate %133 RelaxedPrecision 
                                              OpDecorate %134 RelaxedPrecision 
                                              OpDecorate %134 DescriptorSet 134 
                                              OpDecorate %134 Binding 134 
                                              OpDecorate %135 RelaxedPrecision 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %142 RelaxedPrecision 
                                              OpDecorate %144 RelaxedPrecision 
                                              OpDecorate %145 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %150 RelaxedPrecision 
                                              OpDecorate %153 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %156 Location 156 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %159 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %163 RelaxedPrecision 
                                              OpDecorate %165 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %173 RelaxedPrecision 
                                              OpDecorate %174 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %183 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypePointer Private %6 
                          Private f32* %8 = OpVariable Private 
                                       %9 = OpTypeVector %6 4 
                                      %10 = OpTypeStruct %9 
                                      %11 = OpTypePointer Uniform %10 
             Uniform struct {f32_4;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 0 
                                      %15 = OpTypeInt 32 0 
                                  u32 %16 = OpConstant 2 
                                      %17 = OpTypePointer Uniform %6 
                                  f32 %20 = OpConstant 3.674022E-40 
                         Private f32* %22 = OpVariable Private 
                                      %23 = OpTypeVector %6 2 
                                      %24 = OpTypePointer Input %23 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  u32 %26 = OpConstant 0 
                                      %27 = OpTypePointer Input %6 
                                  f32 %32 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                         Private f32* %39 = OpVariable Private 
                                      %42 = OpTypePointer Private %13 
                         Private i32* %43 = OpVariable Private 
                                      %46 = OpTypeBool 
                                      %47 = OpTypePointer Private %46 
                        Private bool* %48 = OpVariable Private 
                                      %57 = OpTypePointer Function %6 
                        Private bool* %66 = OpVariable Private 
                                  f32 %68 = OpConstant 3.674022E-40 
                         Private i32* %70 = OpVariable Private 
                                  i32 %72 = OpConstant -1 
                         Private i32* %78 = OpVariable Private 
                                  i32 %80 = OpConstant 1 
                                      %84 = OpTypePointer Private %9 
                       Private f32_4* %85 = OpVariable Private 
                        Private f32* %100 = OpVariable Private 
                                     %101 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %102 = OpTypePointer UniformConstant %101 
UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                     %105 = OpTypeSampler 
                                     %106 = OpTypePointer UniformConstant %105 
            UniformConstant sampler* %107 = OpVariable UniformConstant 
                                     %109 = OpTypeSampledImage %101 
                                 u32 %114 = OpConstant 3 
                        Private f32* %116 = OpVariable Private 
                                     %124 = OpTypePointer Private %23 
                      Private f32_2* %125 = OpVariable Private 
                                 f32 %128 = OpConstant 3.674022E-40 
                                 f32 %129 = OpConstant 3.674022E-40 
                               f32_2 %130 = OpConstantComposite %128 %129 
UniformConstant read_only Texture2D* %132 = OpVariable UniformConstant 
            UniformConstant sampler* %134 = OpVariable UniformConstant 
                                 f32 %141 = OpConstant 3.674022E-40 
                        Private f32* %148 = OpVariable Private 
                                 u32 %151 = OpConstant 1 
                                     %155 = OpTypePointer Output %9 
                       Output f32_4* %156 = OpVariable Output 
                                 f32 %158 = OpConstant 3.674022E-40 
                                     %160 = OpTypePointer Output %6 
                                 f32 %164 = OpConstant 3.674022E-40 
                                 f32 %171 = OpConstant 3.674022E-40 
                                 f32 %180 = OpConstant 3.674022E-40 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_2 %182 = OpConstantComposite %180 %181 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %58 = OpVariable Function 
                         Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                  f32 %19 = OpLoad %18 
                                  f32 %21 = OpFAdd %19 %20 
                                              OpStore %8 %21 
                           Input f32* %28 = OpAccessChain vs_TEXCOORD0 %26 
                                  f32 %29 = OpLoad %28 
                                  f32 %30 = OpLoad %8 
                                  f32 %31 = OpFMul %29 %30 
                                  f32 %33 = OpFAdd %31 %32 
                                              OpStore %22 %33 
                                  f32 %35 = OpLoad %8 
                                  f32 %36 = OpFDiv %34 %35 
                                              OpStore %8 %36 
                                  f32 %37 = OpLoad %22 
                                  f32 %38 = OpExtInst %1 8 %37 
                                              OpStore %22 %38 
                                  f32 %40 = OpLoad %22 
                                  f32 %41 = OpFMul %40 %32 
                                              OpStore %39 %41 
                                  f32 %44 = OpLoad %22 
                                  i32 %45 = OpConvertFToS %44 
                                              OpStore %43 %45 
                                  f32 %49 = OpLoad %39 
                                  f32 %50 = OpLoad %39 
                                  f32 %51 = OpFNegate %50 
                                 bool %52 = OpFOrdGreaterThanEqual %49 %51 
                                              OpStore %48 %52 
                                  f32 %53 = OpLoad %39 
                                  f32 %54 = OpExtInst %1 4 %53 
                                  f32 %55 = OpExtInst %1 10 %54 
                                              OpStore %39 %55 
                                 bool %56 = OpLoad %48 
                                              OpSelectionMerge %60 None 
                                              OpBranchConditional %56 %59 %62 
                                      %59 = OpLabel 
                                  f32 %61 = OpLoad %39 
                                              OpStore %58 %61 
                                              OpBranch %60 
                                      %62 = OpLabel 
                                  f32 %63 = OpLoad %39 
                                  f32 %64 = OpFNegate %63 
                                              OpStore %58 %64 
                                              OpBranch %60 
                                      %60 = OpLabel 
                                  f32 %65 = OpLoad %58 
                                              OpStore %39 %65 
                                  f32 %67 = OpLoad %39 
                                 bool %69 = OpFOrdEqual %67 %68 
                                              OpStore %66 %69 
                                  i32 %71 = OpLoad %43 
                                  i32 %73 = OpIAdd %71 %72 
                                              OpStore %70 %73 
                                 bool %74 = OpLoad %66 
                                  i32 %75 = OpLoad %43 
                                  i32 %76 = OpLoad %70 
                                  i32 %77 = OpSelect %74 %75 %76 
                                              OpStore %43 %77 
                                  i32 %79 = OpLoad %43 
                                  i32 %81 = OpIAdd %79 %80 
                                              OpStore %78 %81 
                                  i32 %82 = OpLoad %43 
                                  f32 %83 = OpConvertSToF %82 
                                              OpStore %22 %83 
                                  f32 %86 = OpLoad %8 
                                  f32 %87 = OpLoad %22 
                                  f32 %88 = OpFMul %86 %87 
                         Private f32* %89 = OpAccessChain %85 %26 
                                              OpStore %89 %88 
                                  i32 %90 = OpLoad %78 
                                  f32 %91 = OpConvertSToF %90 
                                              OpStore %22 %91 
                                  f32 %92 = OpLoad %8 
                                  f32 %93 = OpLoad %22 
                                  f32 %94 = OpFMul %92 %93 
                         Private f32* %95 = OpAccessChain %85 %16 
                                              OpStore %95 %94 
                                f32_2 %96 = OpLoad vs_TEXCOORD0 
                                f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                                f32_4 %98 = OpLoad %85 
                                f32_4 %99 = OpVectorShuffle %98 %97 0 4 2 5 
                                              OpStore %85 %99 
                 read_only Texture2D %104 = OpLoad %103 
                             sampler %108 = OpLoad %107 
          read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                               f32_4 %111 = OpLoad %85 
                               f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                               f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                 f32 %115 = OpCompositeExtract %113 3 
                                              OpStore %100 %115 
                 read_only Texture2D %117 = OpLoad %103 
                             sampler %118 = OpLoad %107 
          read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                               f32_4 %120 = OpLoad %85 
                               f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                               f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                 f32 %123 = OpCompositeExtract %122 3 
                                              OpStore %116 %123 
                                 f32 %126 = OpLoad %116 
                               f32_2 %127 = OpCompositeConstruct %126 %126 
                               f32_2 %131 = OpFMul %127 %130 
                                              OpStore %125 %131 
                 read_only Texture2D %133 = OpLoad %132 
                             sampler %135 = OpLoad %134 
          read_only Texture2DSampled %136 = OpSampledImage %133 %135 
                               f32_2 %137 = OpLoad vs_TEXCOORD0 
                               f32_4 %138 = OpImageSampleImplicitLod %136 %137 
                                 f32 %139 = OpCompositeExtract %138 3 
                                              OpStore %116 %139 
                                 f32 %140 = OpLoad %116 
                                 f32 %142 = OpFMul %140 %141 
                        Private f32* %143 = OpAccessChain %125 %26 
                                 f32 %144 = OpLoad %143 
                                 f32 %145 = OpFNegate %144 
                                 f32 %146 = OpFAdd %142 %145 
                        Private f32* %147 = OpAccessChain %125 %26 
                                              OpStore %147 %146 
                                 f32 %149 = OpLoad %116 
                                 f32 %150 = OpFMul %149 %141 
                        Private f32* %152 = OpAccessChain %125 %151 
                                 f32 %153 = OpLoad %152 
                                 f32 %154 = OpFAdd %150 %153 
                                              OpStore %148 %154 
                                 f32 %157 = OpLoad %148 
                                 f32 %159 = OpFAdd %157 %158 
                         Output f32* %161 = OpAccessChain %156 %16 
                                              OpStore %161 %159 
                                 f32 %162 = OpLoad %100 
                                 f32 %163 = OpFNegate %162 
                                 f32 %165 = OpFMul %163 %164 
                        Private f32* %166 = OpAccessChain %125 %26 
                                 f32 %167 = OpLoad %166 
                                 f32 %168 = OpFAdd %165 %167 
                        Private f32* %169 = OpAccessChain %125 %26 
                                              OpStore %169 %168 
                                 f32 %170 = OpLoad %100 
                                 f32 %172 = OpFMul %170 %171 
                                              OpStore %148 %172 
                                 f32 %173 = OpLoad %116 
                                 f32 %174 = OpFMul %173 %141 
                                 f32 %175 = OpLoad %148 
                                 f32 %176 = OpFAdd %174 %175 
                        Private f32* %177 = OpAccessChain %125 %151 
                                              OpStore %177 %176 
                               f32_2 %178 = OpLoad %125 
                               f32_2 %179 = OpVectorShuffle %178 %178 1 0 
                               f32_2 %183 = OpFAdd %179 %182 
                               f32_4 %184 = OpLoad %156 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                              OpStore %156 %185 
                         Output f32* %186 = OpAccessChain %156 %114 
                                              OpStore %186 %34 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 188
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %25 %156 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 25 
                                              OpDecorate %100 RelaxedPrecision 
                                              OpDecorate %103 RelaxedPrecision 
                                              OpDecorate %103 DescriptorSet 103 
                                              OpDecorate %103 Binding 103 
                                              OpDecorate %104 RelaxedPrecision 
                                              OpDecorate %107 RelaxedPrecision 
                                              OpDecorate %107 DescriptorSet 107 
                                              OpDecorate %107 Binding 107 
                                              OpDecorate %108 RelaxedPrecision 
                                              OpDecorate %115 RelaxedPrecision 
                                              OpDecorate %116 RelaxedPrecision 
                                              OpDecorate %117 RelaxedPrecision 
                                              OpDecorate %118 RelaxedPrecision 
                                              OpDecorate %123 RelaxedPrecision 
                                              OpDecorate %125 RelaxedPrecision 
                                              OpDecorate %126 RelaxedPrecision 
                                              OpDecorate %127 RelaxedPrecision 
                                              OpDecorate %131 RelaxedPrecision 
                                              OpDecorate %132 RelaxedPrecision 
                                              OpDecorate %132 DescriptorSet 132 
                                              OpDecorate %132 Binding 132 
                                              OpDecorate %133 RelaxedPrecision 
                                              OpDecorate %134 RelaxedPrecision 
                                              OpDecorate %134 DescriptorSet 134 
                                              OpDecorate %134 Binding 134 
                                              OpDecorate %135 RelaxedPrecision 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %142 RelaxedPrecision 
                                              OpDecorate %144 RelaxedPrecision 
                                              OpDecorate %145 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %150 RelaxedPrecision 
                                              OpDecorate %153 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %156 Location 156 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %159 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %163 RelaxedPrecision 
                                              OpDecorate %165 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %173 RelaxedPrecision 
                                              OpDecorate %174 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %183 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypePointer Private %6 
                          Private f32* %8 = OpVariable Private 
                                       %9 = OpTypeVector %6 4 
                                      %10 = OpTypeStruct %9 
                                      %11 = OpTypePointer Uniform %10 
             Uniform struct {f32_4;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 0 
                                      %15 = OpTypeInt 32 0 
                                  u32 %16 = OpConstant 2 
                                      %17 = OpTypePointer Uniform %6 
                                  f32 %20 = OpConstant 3.674022E-40 
                         Private f32* %22 = OpVariable Private 
                                      %23 = OpTypeVector %6 2 
                                      %24 = OpTypePointer Input %23 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  u32 %26 = OpConstant 0 
                                      %27 = OpTypePointer Input %6 
                                  f32 %32 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                         Private f32* %39 = OpVariable Private 
                                      %42 = OpTypePointer Private %13 
                         Private i32* %43 = OpVariable Private 
                                      %46 = OpTypeBool 
                                      %47 = OpTypePointer Private %46 
                        Private bool* %48 = OpVariable Private 
                                      %57 = OpTypePointer Function %6 
                        Private bool* %66 = OpVariable Private 
                                  f32 %68 = OpConstant 3.674022E-40 
                         Private i32* %70 = OpVariable Private 
                                  i32 %72 = OpConstant -1 
                         Private i32* %78 = OpVariable Private 
                                  i32 %80 = OpConstant 1 
                                      %84 = OpTypePointer Private %9 
                       Private f32_4* %85 = OpVariable Private 
                        Private f32* %100 = OpVariable Private 
                                     %101 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %102 = OpTypePointer UniformConstant %101 
UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                     %105 = OpTypeSampler 
                                     %106 = OpTypePointer UniformConstant %105 
            UniformConstant sampler* %107 = OpVariable UniformConstant 
                                     %109 = OpTypeSampledImage %101 
                                 u32 %114 = OpConstant 3 
                        Private f32* %116 = OpVariable Private 
                                     %124 = OpTypePointer Private %23 
                      Private f32_2* %125 = OpVariable Private 
                                 f32 %128 = OpConstant 3.674022E-40 
                                 f32 %129 = OpConstant 3.674022E-40 
                               f32_2 %130 = OpConstantComposite %128 %129 
UniformConstant read_only Texture2D* %132 = OpVariable UniformConstant 
            UniformConstant sampler* %134 = OpVariable UniformConstant 
                                 f32 %141 = OpConstant 3.674022E-40 
                        Private f32* %148 = OpVariable Private 
                                 u32 %151 = OpConstant 1 
                                     %155 = OpTypePointer Output %9 
                       Output f32_4* %156 = OpVariable Output 
                                 f32 %158 = OpConstant 3.674022E-40 
                                     %160 = OpTypePointer Output %6 
                                 f32 %164 = OpConstant 3.674022E-40 
                                 f32 %171 = OpConstant 3.674022E-40 
                                 f32 %180 = OpConstant 3.674022E-40 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_2 %182 = OpConstantComposite %180 %181 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %58 = OpVariable Function 
                         Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                  f32 %19 = OpLoad %18 
                                  f32 %21 = OpFAdd %19 %20 
                                              OpStore %8 %21 
                           Input f32* %28 = OpAccessChain vs_TEXCOORD0 %26 
                                  f32 %29 = OpLoad %28 
                                  f32 %30 = OpLoad %8 
                                  f32 %31 = OpFMul %29 %30 
                                  f32 %33 = OpFAdd %31 %32 
                                              OpStore %22 %33 
                                  f32 %35 = OpLoad %8 
                                  f32 %36 = OpFDiv %34 %35 
                                              OpStore %8 %36 
                                  f32 %37 = OpLoad %22 
                                  f32 %38 = OpExtInst %1 8 %37 
                                              OpStore %22 %38 
                                  f32 %40 = OpLoad %22 
                                  f32 %41 = OpFMul %40 %32 
                                              OpStore %39 %41 
                                  f32 %44 = OpLoad %22 
                                  i32 %45 = OpConvertFToS %44 
                                              OpStore %43 %45 
                                  f32 %49 = OpLoad %39 
                                  f32 %50 = OpLoad %39 
                                  f32 %51 = OpFNegate %50 
                                 bool %52 = OpFOrdGreaterThanEqual %49 %51 
                                              OpStore %48 %52 
                                  f32 %53 = OpLoad %39 
                                  f32 %54 = OpExtInst %1 4 %53 
                                  f32 %55 = OpExtInst %1 10 %54 
                                              OpStore %39 %55 
                                 bool %56 = OpLoad %48 
                                              OpSelectionMerge %60 None 
                                              OpBranchConditional %56 %59 %62 
                                      %59 = OpLabel 
                                  f32 %61 = OpLoad %39 
                                              OpStore %58 %61 
                                              OpBranch %60 
                                      %62 = OpLabel 
                                  f32 %63 = OpLoad %39 
                                  f32 %64 = OpFNegate %63 
                                              OpStore %58 %64 
                                              OpBranch %60 
                                      %60 = OpLabel 
                                  f32 %65 = OpLoad %58 
                                              OpStore %39 %65 
                                  f32 %67 = OpLoad %39 
                                 bool %69 = OpFOrdEqual %67 %68 
                                              OpStore %66 %69 
                                  i32 %71 = OpLoad %43 
                                  i32 %73 = OpIAdd %71 %72 
                                              OpStore %70 %73 
                                 bool %74 = OpLoad %66 
                                  i32 %75 = OpLoad %43 
                                  i32 %76 = OpLoad %70 
                                  i32 %77 = OpSelect %74 %75 %76 
                                              OpStore %43 %77 
                                  i32 %79 = OpLoad %43 
                                  i32 %81 = OpIAdd %79 %80 
                                              OpStore %78 %81 
                                  i32 %82 = OpLoad %43 
                                  f32 %83 = OpConvertSToF %82 
                                              OpStore %22 %83 
                                  f32 %86 = OpLoad %8 
                                  f32 %87 = OpLoad %22 
                                  f32 %88 = OpFMul %86 %87 
                         Private f32* %89 = OpAccessChain %85 %26 
                                              OpStore %89 %88 
                                  i32 %90 = OpLoad %78 
                                  f32 %91 = OpConvertSToF %90 
                                              OpStore %22 %91 
                                  f32 %92 = OpLoad %8 
                                  f32 %93 = OpLoad %22 
                                  f32 %94 = OpFMul %92 %93 
                         Private f32* %95 = OpAccessChain %85 %16 
                                              OpStore %95 %94 
                                f32_2 %96 = OpLoad vs_TEXCOORD0 
                                f32_2 %97 = OpVectorShuffle %96 %96 1 1 
                                f32_4 %98 = OpLoad %85 
                                f32_4 %99 = OpVectorShuffle %98 %97 0 4 2 5 
                                              OpStore %85 %99 
                 read_only Texture2D %104 = OpLoad %103 
                             sampler %108 = OpLoad %107 
          read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                               f32_4 %111 = OpLoad %85 
                               f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                               f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                 f32 %115 = OpCompositeExtract %113 3 
                                              OpStore %100 %115 
                 read_only Texture2D %117 = OpLoad %103 
                             sampler %118 = OpLoad %107 
          read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                               f32_4 %120 = OpLoad %85 
                               f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                               f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                 f32 %123 = OpCompositeExtract %122 3 
                                              OpStore %116 %123 
                                 f32 %126 = OpLoad %116 
                               f32_2 %127 = OpCompositeConstruct %126 %126 
                               f32_2 %131 = OpFMul %127 %130 
                                              OpStore %125 %131 
                 read_only Texture2D %133 = OpLoad %132 
                             sampler %135 = OpLoad %134 
          read_only Texture2DSampled %136 = OpSampledImage %133 %135 
                               f32_2 %137 = OpLoad vs_TEXCOORD0 
                               f32_4 %138 = OpImageSampleImplicitLod %136 %137 
                                 f32 %139 = OpCompositeExtract %138 3 
                                              OpStore %116 %139 
                                 f32 %140 = OpLoad %116 
                                 f32 %142 = OpFMul %140 %141 
                        Private f32* %143 = OpAccessChain %125 %26 
                                 f32 %144 = OpLoad %143 
                                 f32 %145 = OpFNegate %144 
                                 f32 %146 = OpFAdd %142 %145 
                        Private f32* %147 = OpAccessChain %125 %26 
                                              OpStore %147 %146 
                                 f32 %149 = OpLoad %116 
                                 f32 %150 = OpFMul %149 %141 
                        Private f32* %152 = OpAccessChain %125 %151 
                                 f32 %153 = OpLoad %152 
                                 f32 %154 = OpFAdd %150 %153 
                                              OpStore %148 %154 
                                 f32 %157 = OpLoad %148 
                                 f32 %159 = OpFAdd %157 %158 
                         Output f32* %161 = OpAccessChain %156 %16 
                                              OpStore %161 %159 
                                 f32 %162 = OpLoad %100 
                                 f32 %163 = OpFNegate %162 
                                 f32 %165 = OpFMul %163 %164 
                        Private f32* %166 = OpAccessChain %125 %26 
                                 f32 %167 = OpLoad %166 
                                 f32 %168 = OpFAdd %165 %167 
                        Private f32* %169 = OpAccessChain %125 %26 
                                              OpStore %169 %168 
                                 f32 %170 = OpLoad %100 
                                 f32 %172 = OpFMul %170 %171 
                                              OpStore %148 %172 
                                 f32 %173 = OpLoad %116 
                                 f32 %174 = OpFMul %173 %141 
                                 f32 %175 = OpLoad %148 
                                 f32 %176 = OpFAdd %174 %175 
                        Private f32* %177 = OpAccessChain %125 %151 
                                              OpStore %177 %176 
                               f32_2 %178 = OpLoad %125 
                               f32_2 %179 = OpVectorShuffle %178 %178 1 0 
                               f32_2 %183 = OpFAdd %179 %182 
                               f32_4 %184 = OpLoad %156 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                              OpStore %156 %185 
                         Output f32* %186 = OpAccessChain %156 %114 
                                              OpStore %186 %34 
                                              OpReturn
                                              OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "Flip_SemiPlanarYCbCrA_To_RGBA"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 439144
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bool u_xlatb1;
mediump vec2 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = _MainTex_TexelSize.z + -0.5;
    u_xlat3.xyz = vs_TEXCOORD0.xxy * vec3(0.5, 0.5, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat0.x + 0.5;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_6 = texture(_MainTex, u_xlat3.yz).w;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat9 = u_xlat3.x * 0.5;
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat9>=(-u_xlat9));
#else
    u_xlatb1 = u_xlat9>=(-u_xlat9);
#endif
    u_xlat9 = fract(abs(u_xlat9));
    u_xlat9 = (u_xlatb1) ? u_xlat9 : (-u_xlat9);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9==0.0);
#else
    u_xlatb9 = u_xlat9==0.0;
#endif
    u_xlati1 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb9) ? u_xlati3 : u_xlati1;
    u_xlati9 = u_xlati3 + 1;
    u_xlat3.x = float(u_xlati3);
    u_xlat1.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = float(u_xlati9);
    u_xlat1.z = u_xlat0.x * u_xlat3.x;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_2.x = u_xlat16_6 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_6 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_6 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_2.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_2.x * 1.15625;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bool u_xlatb1;
mediump vec2 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = _MainTex_TexelSize.z + -0.5;
    u_xlat3.xyz = vs_TEXCOORD0.xxy * vec3(0.5, 0.5, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat0.x + 0.5;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_6 = texture(_MainTex, u_xlat3.yz).w;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat9 = u_xlat3.x * 0.5;
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat9>=(-u_xlat9));
#else
    u_xlatb1 = u_xlat9>=(-u_xlat9);
#endif
    u_xlat9 = fract(abs(u_xlat9));
    u_xlat9 = (u_xlatb1) ? u_xlat9 : (-u_xlat9);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9==0.0);
#else
    u_xlatb9 = u_xlat9==0.0;
#endif
    u_xlati1 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb9) ? u_xlati3 : u_xlati1;
    u_xlati9 = u_xlati3 + 1;
    u_xlat3.x = float(u_xlati3);
    u_xlat1.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = float(u_xlati9);
    u_xlat1.z = u_xlat0.x * u_xlat3.x;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_2.x = u_xlat16_6 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_6 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_6 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_2.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_2.x * 1.15625;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bool u_xlatb1;
mediump vec2 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = _MainTex_TexelSize.z + -0.5;
    u_xlat3.xyz = vs_TEXCOORD0.xxy * vec3(0.5, 0.5, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat0.x + 0.5;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_6 = texture(_MainTex, u_xlat3.yz).w;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat9 = u_xlat3.x * 0.5;
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat9>=(-u_xlat9));
#else
    u_xlatb1 = u_xlat9>=(-u_xlat9);
#endif
    u_xlat9 = fract(abs(u_xlat9));
    u_xlat9 = (u_xlatb1) ? u_xlat9 : (-u_xlat9);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9==0.0);
#else
    u_xlatb9 = u_xlat9==0.0;
#endif
    u_xlati1 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb9) ? u_xlati3 : u_xlati1;
    u_xlati9 = u_xlati3 + 1;
    u_xlat3.x = float(u_xlati3);
    u_xlat1.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = float(u_xlati9);
    u_xlat1.z = u_xlat0.x * u_xlat3.x;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_2.x = u_xlat16_6 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_6 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_6 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_2.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_2.x * 1.15625;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %30 %178 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %11 0 Offset 11 
                                              OpDecorate %11 Block 
                                              OpDecorate %13 DescriptorSet 13 
                                              OpDecorate %13 Binding 13 
                                              OpDecorate vs_TEXCOORD0 Location 30 
                                              OpDecorate %48 RelaxedPrecision 
                                              OpDecorate %51 RelaxedPrecision 
                                              OpDecorate %51 DescriptorSet 51 
                                              OpDecorate %51 Binding 51 
                                              OpDecorate %52 RelaxedPrecision 
                                              OpDecorate %55 RelaxedPrecision 
                                              OpDecorate %55 DescriptorSet 55 
                                              OpDecorate %55 Binding 55 
                                              OpDecorate %56 RelaxedPrecision 
                                              OpDecorate %63 RelaxedPrecision 
                                              OpDecorate %137 RelaxedPrecision 
                                              OpDecorate %138 RelaxedPrecision 
                                              OpDecorate %138 DescriptorSet 138 
                                              OpDecorate %138 Binding 138 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %140 DescriptorSet 140 
                                              OpDecorate %140 Binding 140 
                                              OpDecorate %141 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %147 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %155 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %161 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %164 RelaxedPrecision 
                                              OpDecorate %166 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %171 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %178 Location 178 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %181 RelaxedPrecision 
                                              OpDecorate %184 RelaxedPrecision 
                                              OpDecorate %185 RelaxedPrecision 
                                              OpDecorate %187 RelaxedPrecision 
                                              OpDecorate %189 RelaxedPrecision 
                                              OpDecorate %190 RelaxedPrecision 
                                              OpDecorate %192 RelaxedPrecision 
                                              OpDecorate %194 RelaxedPrecision 
                                              OpDecorate %195 RelaxedPrecision 
                                              OpDecorate %196 RelaxedPrecision 
                                              OpDecorate %197 RelaxedPrecision 
                                              OpDecorate %198 RelaxedPrecision 
                                              OpDecorate %200 RelaxedPrecision 
                                              OpDecorate %201 RelaxedPrecision 
                                              OpDecorate %205 RelaxedPrecision 
                                              OpDecorate %213 RelaxedPrecision 
                                              OpDecorate %214 RelaxedPrecision 
                                              OpDecorate %218 RelaxedPrecision 
                                              OpDecorate %219 RelaxedPrecision 
                                              OpDecorate %221 RelaxedPrecision 
                                              OpDecorate %224 RelaxedPrecision 
                                              OpDecorate %225 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 2 
                                       %8 = OpTypePointer Private %7 
                        Private f32_2* %9 = OpVariable Private 
                                      %10 = OpTypeVector %6 4 
                                      %11 = OpTypeStruct %10 
                                      %12 = OpTypePointer Uniform %11 
             Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                      %14 = OpTypeInt 32 1 
                                  i32 %15 = OpConstant 0 
                                      %16 = OpTypeInt 32 0 
                                  u32 %17 = OpConstant 2 
                                      %18 = OpTypePointer Uniform %6 
                                  f32 %21 = OpConstant 3.674022E-40 
                                  u32 %23 = OpConstant 0 
                                      %24 = OpTypePointer Private %6 
                                      %26 = OpTypeVector %6 3 
                                      %27 = OpTypePointer Private %26 
                       Private f32_3* %28 = OpVariable Private 
                                      %29 = OpTypePointer Input %7 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  f32 %33 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                                f32_3 %35 = OpConstantComposite %33 %33 %34 
                         Private f32* %48 = OpVariable Private 
                                      %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %50 = OpTypePointer UniformConstant %49 
 UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                      %53 = OpTypeSampler 
                                      %54 = OpTypePointer UniformConstant %53 
             UniformConstant sampler* %55 = OpVariable UniformConstant 
                                      %57 = OpTypeSampledImage %49 
                                  u32 %62 = OpConstant 3 
                         Private f32* %68 = OpVariable Private 
                                      %72 = OpTypePointer Private %14 
                         Private i32* %73 = OpVariable Private 
                                      %77 = OpTypeBool 
                                      %78 = OpTypePointer Private %77 
                        Private bool* %79 = OpVariable Private 
                                      %88 = OpTypePointer Function %6 
                        Private bool* %97 = OpVariable Private 
                                  f32 %99 = OpConstant 3.674022E-40 
                        Private i32* %101 = OpVariable Private 
                                 i32 %103 = OpConstant -1 
                        Private i32* %109 = OpVariable Private 
                                 i32 %111 = OpConstant 1 
                                     %116 = OpTypePointer Private %10 
                      Private f32_4* %117 = OpVariable Private 
                        Private f32* %137 = OpVariable Private 
UniformConstant read_only Texture2D* %138 = OpVariable UniformConstant 
            UniformConstant sampler* %140 = OpVariable UniformConstant 
                        Private f32* %147 = OpVariable Private 
                      Private f32_2* %155 = OpVariable Private 
                                 f32 %158 = OpConstant 3.674022E-40 
                                 f32 %159 = OpConstant 3.674022E-40 
                               f32_2 %160 = OpConstantComposite %158 %159 
                                 f32 %163 = OpConstant 3.674022E-40 
                        Private f32* %170 = OpVariable Private 
                                 u32 %173 = OpConstant 1 
                                     %177 = OpTypePointer Output %10 
                       Output f32_4* %178 = OpVariable Output 
                                 f32 %180 = OpConstant 3.674022E-40 
                                     %182 = OpTypePointer Output %6 
                                 f32 %186 = OpConstant 3.674022E-40 
                                 f32 %193 = OpConstant 3.674022E-40 
                                 f32 %202 = OpConstant 3.674022E-40 
                                 f32 %203 = OpConstant 3.674022E-40 
                               f32_2 %204 = OpConstantComposite %202 %203 
                               f32_2 %209 = OpConstantComposite %33 %34 
                               f32_2 %211 = OpConstantComposite %33 %99 
                                 f32 %220 = OpConstant 3.674022E-40 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %89 = OpVariable Function 
                         Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                  f32 %20 = OpLoad %19 
                                  f32 %22 = OpFAdd %20 %21 
                         Private f32* %25 = OpAccessChain %9 %23 
                                              OpStore %25 %22 
                                f32_2 %31 = OpLoad vs_TEXCOORD0 
                                f32_3 %32 = OpVectorShuffle %31 %31 0 0 1 
                                f32_3 %36 = OpFMul %32 %35 
                                              OpStore %28 %36 
                         Private f32* %37 = OpAccessChain %28 %23 
                                  f32 %38 = OpLoad %37 
                         Private f32* %39 = OpAccessChain %9 %23 
                                  f32 %40 = OpLoad %39 
                                  f32 %41 = OpFMul %38 %40 
                                  f32 %42 = OpFAdd %41 %33 
                         Private f32* %43 = OpAccessChain %28 %23 
                                              OpStore %43 %42 
                         Private f32* %44 = OpAccessChain %9 %23 
                                  f32 %45 = OpLoad %44 
                                  f32 %46 = OpFDiv %34 %45 
                         Private f32* %47 = OpAccessChain %9 %23 
                                              OpStore %47 %46 
                  read_only Texture2D %52 = OpLoad %51 
                              sampler %56 = OpLoad %55 
           read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                f32_3 %59 = OpLoad %28 
                                f32_2 %60 = OpVectorShuffle %59 %59 1 2 
                                f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                  f32 %63 = OpCompositeExtract %61 3 
                                              OpStore %48 %63 
                         Private f32* %64 = OpAccessChain %28 %23 
                                  f32 %65 = OpLoad %64 
                                  f32 %66 = OpExtInst %1 8 %65 
                         Private f32* %67 = OpAccessChain %28 %23 
                                              OpStore %67 %66 
                         Private f32* %69 = OpAccessChain %28 %23 
                                  f32 %70 = OpLoad %69 
                                  f32 %71 = OpFMul %70 %33 
                                              OpStore %68 %71 
                         Private f32* %74 = OpAccessChain %28 %23 
                                  f32 %75 = OpLoad %74 
                                  i32 %76 = OpConvertFToS %75 
                                              OpStore %73 %76 
                                  f32 %80 = OpLoad %68 
                                  f32 %81 = OpLoad %68 
                                  f32 %82 = OpFNegate %81 
                                 bool %83 = OpFOrdGreaterThanEqual %80 %82 
                                              OpStore %79 %83 
                                  f32 %84 = OpLoad %68 
                                  f32 %85 = OpExtInst %1 4 %84 
                                  f32 %86 = OpExtInst %1 10 %85 
                                              OpStore %68 %86 
                                 bool %87 = OpLoad %79 
                                              OpSelectionMerge %91 None 
                                              OpBranchConditional %87 %90 %93 
                                      %90 = OpLabel 
                                  f32 %92 = OpLoad %68 
                                              OpStore %89 %92 
                                              OpBranch %91 
                                      %93 = OpLabel 
                                  f32 %94 = OpLoad %68 
                                  f32 %95 = OpFNegate %94 
                                              OpStore %89 %95 
                                              OpBranch %91 
                                      %91 = OpLabel 
                                  f32 %96 = OpLoad %89 
                                              OpStore %68 %96 
                                  f32 %98 = OpLoad %68 
                                bool %100 = OpFOrdEqual %98 %99 
                                              OpStore %97 %100 
                                 i32 %102 = OpLoad %73 
                                 i32 %104 = OpIAdd %102 %103 
                                              OpStore %101 %104 
                                bool %105 = OpLoad %97 
                                 i32 %106 = OpLoad %73 
                                 i32 %107 = OpLoad %101 
                                 i32 %108 = OpSelect %105 %106 %107 
                                              OpStore %73 %108 
                                 i32 %110 = OpLoad %73 
                                 i32 %112 = OpIAdd %110 %111 
                                              OpStore %109 %112 
                                 i32 %113 = OpLoad %73 
                                 f32 %114 = OpConvertSToF %113 
                        Private f32* %115 = OpAccessChain %28 %23 
                                              OpStore %115 %114 
                        Private f32* %118 = OpAccessChain %9 %23 
                                 f32 %119 = OpLoad %118 
                        Private f32* %120 = OpAccessChain %28 %23 
                                 f32 %121 = OpLoad %120 
                                 f32 %122 = OpFMul %119 %121 
                        Private f32* %123 = OpAccessChain %117 %23 
                                              OpStore %123 %122 
                                 i32 %124 = OpLoad %109 
                                 f32 %125 = OpConvertSToF %124 
                        Private f32* %126 = OpAccessChain %28 %23 
                                              OpStore %126 %125 
                        Private f32* %127 = OpAccessChain %9 %23 
                                 f32 %128 = OpLoad %127 
                        Private f32* %129 = OpAccessChain %28 %23 
                                 f32 %130 = OpLoad %129 
                                 f32 %131 = OpFMul %128 %130 
                        Private f32* %132 = OpAccessChain %117 %17 
                                              OpStore %132 %131 
                               f32_2 %133 = OpLoad vs_TEXCOORD0 
                               f32_2 %134 = OpVectorShuffle %133 %133 1 1 
                               f32_4 %135 = OpLoad %117 
                               f32_4 %136 = OpVectorShuffle %135 %134 0 4 2 5 
                                              OpStore %117 %136 
                 read_only Texture2D %139 = OpLoad %138 
                             sampler %141 = OpLoad %140 
          read_only Texture2DSampled %142 = OpSampledImage %139 %141 
                               f32_4 %143 = OpLoad %117 
                               f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                               f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                                 f32 %146 = OpCompositeExtract %145 3 
                                              OpStore %137 %146 
                 read_only Texture2D %148 = OpLoad %138 
                             sampler %149 = OpLoad %140 
          read_only Texture2DSampled %150 = OpSampledImage %148 %149 
                               f32_4 %151 = OpLoad %117 
                               f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                               f32_4 %153 = OpImageSampleImplicitLod %150 %152 
                                 f32 %154 = OpCompositeExtract %153 3 
                                              OpStore %147 %154 
                                 f32 %156 = OpLoad %147 
                               f32_2 %157 = OpCompositeConstruct %156 %156 
                               f32_2 %161 = OpFMul %157 %160 
                                              OpStore %155 %161 
                                 f32 %162 = OpLoad %48 
                                 f32 %164 = OpFMul %162 %163 
                        Private f32* %165 = OpAccessChain %155 %23 
                                 f32 %166 = OpLoad %165 
                                 f32 %167 = OpFNegate %166 
                                 f32 %168 = OpFAdd %164 %167 
                        Private f32* %169 = OpAccessChain %155 %23 
                                              OpStore %169 %168 
                                 f32 %171 = OpLoad %48 
                                 f32 %172 = OpFMul %171 %163 
                        Private f32* %174 = OpAccessChain %155 %173 
                                 f32 %175 = OpLoad %174 
                                 f32 %176 = OpFAdd %172 %175 
                                              OpStore %170 %176 
                                 f32 %179 = OpLoad %170 
                                 f32 %181 = OpFAdd %179 %180 
                         Output f32* %183 = OpAccessChain %178 %17 
                                              OpStore %183 %181 
                                 f32 %184 = OpLoad %137 
                                 f32 %185 = OpFNegate %184 
                                 f32 %187 = OpFMul %185 %186 
                        Private f32* %188 = OpAccessChain %155 %23 
                                 f32 %189 = OpLoad %188 
                                 f32 %190 = OpFAdd %187 %189 
                        Private f32* %191 = OpAccessChain %155 %23 
                                              OpStore %191 %190 
                                 f32 %192 = OpLoad %137 
                                 f32 %194 = OpFMul %192 %193 
                                              OpStore %170 %194 
                                 f32 %195 = OpLoad %48 
                                 f32 %196 = OpFMul %195 %163 
                                 f32 %197 = OpLoad %170 
                                 f32 %198 = OpFAdd %196 %197 
                        Private f32* %199 = OpAccessChain %155 %173 
                                              OpStore %199 %198 
                               f32_2 %200 = OpLoad %155 
                               f32_2 %201 = OpVectorShuffle %200 %200 1 0 
                               f32_2 %205 = OpFAdd %201 %204 
                               f32_4 %206 = OpLoad %178 
                               f32_4 %207 = OpVectorShuffle %206 %205 4 5 2 3 
                                              OpStore %178 %207 
                               f32_2 %208 = OpLoad vs_TEXCOORD0 
                               f32_2 %210 = OpFMul %208 %209 
                               f32_2 %212 = OpFAdd %210 %211 
                                              OpStore %9 %212 
                 read_only Texture2D %213 = OpLoad %51 
                             sampler %214 = OpLoad %55 
          read_only Texture2DSampled %215 = OpSampledImage %213 %214 
                               f32_2 %216 = OpLoad %9 
                               f32_4 %217 = OpImageSampleImplicitLod %215 %216 
                                 f32 %218 = OpCompositeExtract %217 3 
                                              OpStore %137 %218 
                                 f32 %219 = OpLoad %137 
                                 f32 %221 = OpFAdd %219 %220 
                        Private f32* %222 = OpAccessChain %155 %23 
                                              OpStore %222 %221 
                        Private f32* %223 = OpAccessChain %155 %23 
                                 f32 %224 = OpLoad %223 
                                 f32 %225 = OpFMul %224 %163 
                         Output f32* %226 = OpAccessChain %178 %62 
                                              OpStore %226 %225 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %30 %178 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %11 0 Offset 11 
                                              OpDecorate %11 Block 
                                              OpDecorate %13 DescriptorSet 13 
                                              OpDecorate %13 Binding 13 
                                              OpDecorate vs_TEXCOORD0 Location 30 
                                              OpDecorate %48 RelaxedPrecision 
                                              OpDecorate %51 RelaxedPrecision 
                                              OpDecorate %51 DescriptorSet 51 
                                              OpDecorate %51 Binding 51 
                                              OpDecorate %52 RelaxedPrecision 
                                              OpDecorate %55 RelaxedPrecision 
                                              OpDecorate %55 DescriptorSet 55 
                                              OpDecorate %55 Binding 55 
                                              OpDecorate %56 RelaxedPrecision 
                                              OpDecorate %63 RelaxedPrecision 
                                              OpDecorate %137 RelaxedPrecision 
                                              OpDecorate %138 RelaxedPrecision 
                                              OpDecorate %138 DescriptorSet 138 
                                              OpDecorate %138 Binding 138 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %140 DescriptorSet 140 
                                              OpDecorate %140 Binding 140 
                                              OpDecorate %141 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %147 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %155 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %161 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %164 RelaxedPrecision 
                                              OpDecorate %166 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %171 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %178 Location 178 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %181 RelaxedPrecision 
                                              OpDecorate %184 RelaxedPrecision 
                                              OpDecorate %185 RelaxedPrecision 
                                              OpDecorate %187 RelaxedPrecision 
                                              OpDecorate %189 RelaxedPrecision 
                                              OpDecorate %190 RelaxedPrecision 
                                              OpDecorate %192 RelaxedPrecision 
                                              OpDecorate %194 RelaxedPrecision 
                                              OpDecorate %195 RelaxedPrecision 
                                              OpDecorate %196 RelaxedPrecision 
                                              OpDecorate %197 RelaxedPrecision 
                                              OpDecorate %198 RelaxedPrecision 
                                              OpDecorate %200 RelaxedPrecision 
                                              OpDecorate %201 RelaxedPrecision 
                                              OpDecorate %205 RelaxedPrecision 
                                              OpDecorate %213 RelaxedPrecision 
                                              OpDecorate %214 RelaxedPrecision 
                                              OpDecorate %218 RelaxedPrecision 
                                              OpDecorate %219 RelaxedPrecision 
                                              OpDecorate %221 RelaxedPrecision 
                                              OpDecorate %224 RelaxedPrecision 
                                              OpDecorate %225 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 2 
                                       %8 = OpTypePointer Private %7 
                        Private f32_2* %9 = OpVariable Private 
                                      %10 = OpTypeVector %6 4 
                                      %11 = OpTypeStruct %10 
                                      %12 = OpTypePointer Uniform %11 
             Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                      %14 = OpTypeInt 32 1 
                                  i32 %15 = OpConstant 0 
                                      %16 = OpTypeInt 32 0 
                                  u32 %17 = OpConstant 2 
                                      %18 = OpTypePointer Uniform %6 
                                  f32 %21 = OpConstant 3.674022E-40 
                                  u32 %23 = OpConstant 0 
                                      %24 = OpTypePointer Private %6 
                                      %26 = OpTypeVector %6 3 
                                      %27 = OpTypePointer Private %26 
                       Private f32_3* %28 = OpVariable Private 
                                      %29 = OpTypePointer Input %7 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  f32 %33 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                                f32_3 %35 = OpConstantComposite %33 %33 %34 
                         Private f32* %48 = OpVariable Private 
                                      %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %50 = OpTypePointer UniformConstant %49 
 UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                      %53 = OpTypeSampler 
                                      %54 = OpTypePointer UniformConstant %53 
             UniformConstant sampler* %55 = OpVariable UniformConstant 
                                      %57 = OpTypeSampledImage %49 
                                  u32 %62 = OpConstant 3 
                         Private f32* %68 = OpVariable Private 
                                      %72 = OpTypePointer Private %14 
                         Private i32* %73 = OpVariable Private 
                                      %77 = OpTypeBool 
                                      %78 = OpTypePointer Private %77 
                        Private bool* %79 = OpVariable Private 
                                      %88 = OpTypePointer Function %6 
                        Private bool* %97 = OpVariable Private 
                                  f32 %99 = OpConstant 3.674022E-40 
                        Private i32* %101 = OpVariable Private 
                                 i32 %103 = OpConstant -1 
                        Private i32* %109 = OpVariable Private 
                                 i32 %111 = OpConstant 1 
                                     %116 = OpTypePointer Private %10 
                      Private f32_4* %117 = OpVariable Private 
                        Private f32* %137 = OpVariable Private 
UniformConstant read_only Texture2D* %138 = OpVariable UniformConstant 
            UniformConstant sampler* %140 = OpVariable UniformConstant 
                        Private f32* %147 = OpVariable Private 
                      Private f32_2* %155 = OpVariable Private 
                                 f32 %158 = OpConstant 3.674022E-40 
                                 f32 %159 = OpConstant 3.674022E-40 
                               f32_2 %160 = OpConstantComposite %158 %159 
                                 f32 %163 = OpConstant 3.674022E-40 
                        Private f32* %170 = OpVariable Private 
                                 u32 %173 = OpConstant 1 
                                     %177 = OpTypePointer Output %10 
                       Output f32_4* %178 = OpVariable Output 
                                 f32 %180 = OpConstant 3.674022E-40 
                                     %182 = OpTypePointer Output %6 
                                 f32 %186 = OpConstant 3.674022E-40 
                                 f32 %193 = OpConstant 3.674022E-40 
                                 f32 %202 = OpConstant 3.674022E-40 
                                 f32 %203 = OpConstant 3.674022E-40 
                               f32_2 %204 = OpConstantComposite %202 %203 
                               f32_2 %209 = OpConstantComposite %33 %34 
                               f32_2 %211 = OpConstantComposite %33 %99 
                                 f32 %220 = OpConstant 3.674022E-40 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %89 = OpVariable Function 
                         Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                  f32 %20 = OpLoad %19 
                                  f32 %22 = OpFAdd %20 %21 
                         Private f32* %25 = OpAccessChain %9 %23 
                                              OpStore %25 %22 
                                f32_2 %31 = OpLoad vs_TEXCOORD0 
                                f32_3 %32 = OpVectorShuffle %31 %31 0 0 1 
                                f32_3 %36 = OpFMul %32 %35 
                                              OpStore %28 %36 
                         Private f32* %37 = OpAccessChain %28 %23 
                                  f32 %38 = OpLoad %37 
                         Private f32* %39 = OpAccessChain %9 %23 
                                  f32 %40 = OpLoad %39 
                                  f32 %41 = OpFMul %38 %40 
                                  f32 %42 = OpFAdd %41 %33 
                         Private f32* %43 = OpAccessChain %28 %23 
                                              OpStore %43 %42 
                         Private f32* %44 = OpAccessChain %9 %23 
                                  f32 %45 = OpLoad %44 
                                  f32 %46 = OpFDiv %34 %45 
                         Private f32* %47 = OpAccessChain %9 %23 
                                              OpStore %47 %46 
                  read_only Texture2D %52 = OpLoad %51 
                              sampler %56 = OpLoad %55 
           read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                f32_3 %59 = OpLoad %28 
                                f32_2 %60 = OpVectorShuffle %59 %59 1 2 
                                f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                  f32 %63 = OpCompositeExtract %61 3 
                                              OpStore %48 %63 
                         Private f32* %64 = OpAccessChain %28 %23 
                                  f32 %65 = OpLoad %64 
                                  f32 %66 = OpExtInst %1 8 %65 
                         Private f32* %67 = OpAccessChain %28 %23 
                                              OpStore %67 %66 
                         Private f32* %69 = OpAccessChain %28 %23 
                                  f32 %70 = OpLoad %69 
                                  f32 %71 = OpFMul %70 %33 
                                              OpStore %68 %71 
                         Private f32* %74 = OpAccessChain %28 %23 
                                  f32 %75 = OpLoad %74 
                                  i32 %76 = OpConvertFToS %75 
                                              OpStore %73 %76 
                                  f32 %80 = OpLoad %68 
                                  f32 %81 = OpLoad %68 
                                  f32 %82 = OpFNegate %81 
                                 bool %83 = OpFOrdGreaterThanEqual %80 %82 
                                              OpStore %79 %83 
                                  f32 %84 = OpLoad %68 
                                  f32 %85 = OpExtInst %1 4 %84 
                                  f32 %86 = OpExtInst %1 10 %85 
                                              OpStore %68 %86 
                                 bool %87 = OpLoad %79 
                                              OpSelectionMerge %91 None 
                                              OpBranchConditional %87 %90 %93 
                                      %90 = OpLabel 
                                  f32 %92 = OpLoad %68 
                                              OpStore %89 %92 
                                              OpBranch %91 
                                      %93 = OpLabel 
                                  f32 %94 = OpLoad %68 
                                  f32 %95 = OpFNegate %94 
                                              OpStore %89 %95 
                                              OpBranch %91 
                                      %91 = OpLabel 
                                  f32 %96 = OpLoad %89 
                                              OpStore %68 %96 
                                  f32 %98 = OpLoad %68 
                                bool %100 = OpFOrdEqual %98 %99 
                                              OpStore %97 %100 
                                 i32 %102 = OpLoad %73 
                                 i32 %104 = OpIAdd %102 %103 
                                              OpStore %101 %104 
                                bool %105 = OpLoad %97 
                                 i32 %106 = OpLoad %73 
                                 i32 %107 = OpLoad %101 
                                 i32 %108 = OpSelect %105 %106 %107 
                                              OpStore %73 %108 
                                 i32 %110 = OpLoad %73 
                                 i32 %112 = OpIAdd %110 %111 
                                              OpStore %109 %112 
                                 i32 %113 = OpLoad %73 
                                 f32 %114 = OpConvertSToF %113 
                        Private f32* %115 = OpAccessChain %28 %23 
                                              OpStore %115 %114 
                        Private f32* %118 = OpAccessChain %9 %23 
                                 f32 %119 = OpLoad %118 
                        Private f32* %120 = OpAccessChain %28 %23 
                                 f32 %121 = OpLoad %120 
                                 f32 %122 = OpFMul %119 %121 
                        Private f32* %123 = OpAccessChain %117 %23 
                                              OpStore %123 %122 
                                 i32 %124 = OpLoad %109 
                                 f32 %125 = OpConvertSToF %124 
                        Private f32* %126 = OpAccessChain %28 %23 
                                              OpStore %126 %125 
                        Private f32* %127 = OpAccessChain %9 %23 
                                 f32 %128 = OpLoad %127 
                        Private f32* %129 = OpAccessChain %28 %23 
                                 f32 %130 = OpLoad %129 
                                 f32 %131 = OpFMul %128 %130 
                        Private f32* %132 = OpAccessChain %117 %17 
                                              OpStore %132 %131 
                               f32_2 %133 = OpLoad vs_TEXCOORD0 
                               f32_2 %134 = OpVectorShuffle %133 %133 1 1 
                               f32_4 %135 = OpLoad %117 
                               f32_4 %136 = OpVectorShuffle %135 %134 0 4 2 5 
                                              OpStore %117 %136 
                 read_only Texture2D %139 = OpLoad %138 
                             sampler %141 = OpLoad %140 
          read_only Texture2DSampled %142 = OpSampledImage %139 %141 
                               f32_4 %143 = OpLoad %117 
                               f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                               f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                                 f32 %146 = OpCompositeExtract %145 3 
                                              OpStore %137 %146 
                 read_only Texture2D %148 = OpLoad %138 
                             sampler %149 = OpLoad %140 
          read_only Texture2DSampled %150 = OpSampledImage %148 %149 
                               f32_4 %151 = OpLoad %117 
                               f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                               f32_4 %153 = OpImageSampleImplicitLod %150 %152 
                                 f32 %154 = OpCompositeExtract %153 3 
                                              OpStore %147 %154 
                                 f32 %156 = OpLoad %147 
                               f32_2 %157 = OpCompositeConstruct %156 %156 
                               f32_2 %161 = OpFMul %157 %160 
                                              OpStore %155 %161 
                                 f32 %162 = OpLoad %48 
                                 f32 %164 = OpFMul %162 %163 
                        Private f32* %165 = OpAccessChain %155 %23 
                                 f32 %166 = OpLoad %165 
                                 f32 %167 = OpFNegate %166 
                                 f32 %168 = OpFAdd %164 %167 
                        Private f32* %169 = OpAccessChain %155 %23 
                                              OpStore %169 %168 
                                 f32 %171 = OpLoad %48 
                                 f32 %172 = OpFMul %171 %163 
                        Private f32* %174 = OpAccessChain %155 %173 
                                 f32 %175 = OpLoad %174 
                                 f32 %176 = OpFAdd %172 %175 
                                              OpStore %170 %176 
                                 f32 %179 = OpLoad %170 
                                 f32 %181 = OpFAdd %179 %180 
                         Output f32* %183 = OpAccessChain %178 %17 
                                              OpStore %183 %181 
                                 f32 %184 = OpLoad %137 
                                 f32 %185 = OpFNegate %184 
                                 f32 %187 = OpFMul %185 %186 
                        Private f32* %188 = OpAccessChain %155 %23 
                                 f32 %189 = OpLoad %188 
                                 f32 %190 = OpFAdd %187 %189 
                        Private f32* %191 = OpAccessChain %155 %23 
                                              OpStore %191 %190 
                                 f32 %192 = OpLoad %137 
                                 f32 %194 = OpFMul %192 %193 
                                              OpStore %170 %194 
                                 f32 %195 = OpLoad %48 
                                 f32 %196 = OpFMul %195 %163 
                                 f32 %197 = OpLoad %170 
                                 f32 %198 = OpFAdd %196 %197 
                        Private f32* %199 = OpAccessChain %155 %173 
                                              OpStore %199 %198 
                               f32_2 %200 = OpLoad %155 
                               f32_2 %201 = OpVectorShuffle %200 %200 1 0 
                               f32_2 %205 = OpFAdd %201 %204 
                               f32_4 %206 = OpLoad %178 
                               f32_4 %207 = OpVectorShuffle %206 %205 4 5 2 3 
                                              OpStore %178 %207 
                               f32_2 %208 = OpLoad vs_TEXCOORD0 
                               f32_2 %210 = OpFMul %208 %209 
                               f32_2 %212 = OpFAdd %210 %211 
                                              OpStore %9 %212 
                 read_only Texture2D %213 = OpLoad %51 
                             sampler %214 = OpLoad %55 
          read_only Texture2DSampled %215 = OpSampledImage %213 %214 
                               f32_2 %216 = OpLoad %9 
                               f32_4 %217 = OpImageSampleImplicitLod %215 %216 
                                 f32 %218 = OpCompositeExtract %217 3 
                                              OpStore %137 %218 
                                 f32 %219 = OpLoad %137 
                                 f32 %221 = OpFAdd %219 %220 
                        Private f32* %222 = OpAccessChain %155 %23 
                                              OpStore %222 %221 
                        Private f32* %223 = OpAccessChain %155 %23 
                                 f32 %224 = OpLoad %223 
                                 f32 %225 = OpFMul %224 %163 
                         Output f32* %226 = OpAccessChain %178 %62 
                                              OpStore %226 %225 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %30 %178 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %11 0 Offset 11 
                                              OpDecorate %11 Block 
                                              OpDecorate %13 DescriptorSet 13 
                                              OpDecorate %13 Binding 13 
                                              OpDecorate vs_TEXCOORD0 Location 30 
                                              OpDecorate %48 RelaxedPrecision 
                                              OpDecorate %51 RelaxedPrecision 
                                              OpDecorate %51 DescriptorSet 51 
                                              OpDecorate %51 Binding 51 
                                              OpDecorate %52 RelaxedPrecision 
                                              OpDecorate %55 RelaxedPrecision 
                                              OpDecorate %55 DescriptorSet 55 
                                              OpDecorate %55 Binding 55 
                                              OpDecorate %56 RelaxedPrecision 
                                              OpDecorate %63 RelaxedPrecision 
                                              OpDecorate %137 RelaxedPrecision 
                                              OpDecorate %138 RelaxedPrecision 
                                              OpDecorate %138 DescriptorSet 138 
                                              OpDecorate %138 Binding 138 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %140 DescriptorSet 140 
                                              OpDecorate %140 Binding 140 
                                              OpDecorate %141 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %147 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %155 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %161 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %164 RelaxedPrecision 
                                              OpDecorate %166 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %171 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %178 Location 178 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %181 RelaxedPrecision 
                                              OpDecorate %184 RelaxedPrecision 
                                              OpDecorate %185 RelaxedPrecision 
                                              OpDecorate %187 RelaxedPrecision 
                                              OpDecorate %189 RelaxedPrecision 
                                              OpDecorate %190 RelaxedPrecision 
                                              OpDecorate %192 RelaxedPrecision 
                                              OpDecorate %194 RelaxedPrecision 
                                              OpDecorate %195 RelaxedPrecision 
                                              OpDecorate %196 RelaxedPrecision 
                                              OpDecorate %197 RelaxedPrecision 
                                              OpDecorate %198 RelaxedPrecision 
                                              OpDecorate %200 RelaxedPrecision 
                                              OpDecorate %201 RelaxedPrecision 
                                              OpDecorate %205 RelaxedPrecision 
                                              OpDecorate %213 RelaxedPrecision 
                                              OpDecorate %214 RelaxedPrecision 
                                              OpDecorate %218 RelaxedPrecision 
                                              OpDecorate %219 RelaxedPrecision 
                                              OpDecorate %221 RelaxedPrecision 
                                              OpDecorate %224 RelaxedPrecision 
                                              OpDecorate %225 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 2 
                                       %8 = OpTypePointer Private %7 
                        Private f32_2* %9 = OpVariable Private 
                                      %10 = OpTypeVector %6 4 
                                      %11 = OpTypeStruct %10 
                                      %12 = OpTypePointer Uniform %11 
             Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                      %14 = OpTypeInt 32 1 
                                  i32 %15 = OpConstant 0 
                                      %16 = OpTypeInt 32 0 
                                  u32 %17 = OpConstant 2 
                                      %18 = OpTypePointer Uniform %6 
                                  f32 %21 = OpConstant 3.674022E-40 
                                  u32 %23 = OpConstant 0 
                                      %24 = OpTypePointer Private %6 
                                      %26 = OpTypeVector %6 3 
                                      %27 = OpTypePointer Private %26 
                       Private f32_3* %28 = OpVariable Private 
                                      %29 = OpTypePointer Input %7 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  f32 %33 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                                f32_3 %35 = OpConstantComposite %33 %33 %34 
                         Private f32* %48 = OpVariable Private 
                                      %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %50 = OpTypePointer UniformConstant %49 
 UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                      %53 = OpTypeSampler 
                                      %54 = OpTypePointer UniformConstant %53 
             UniformConstant sampler* %55 = OpVariable UniformConstant 
                                      %57 = OpTypeSampledImage %49 
                                  u32 %62 = OpConstant 3 
                         Private f32* %68 = OpVariable Private 
                                      %72 = OpTypePointer Private %14 
                         Private i32* %73 = OpVariable Private 
                                      %77 = OpTypeBool 
                                      %78 = OpTypePointer Private %77 
                        Private bool* %79 = OpVariable Private 
                                      %88 = OpTypePointer Function %6 
                        Private bool* %97 = OpVariable Private 
                                  f32 %99 = OpConstant 3.674022E-40 
                        Private i32* %101 = OpVariable Private 
                                 i32 %103 = OpConstant -1 
                        Private i32* %109 = OpVariable Private 
                                 i32 %111 = OpConstant 1 
                                     %116 = OpTypePointer Private %10 
                      Private f32_4* %117 = OpVariable Private 
                        Private f32* %137 = OpVariable Private 
UniformConstant read_only Texture2D* %138 = OpVariable UniformConstant 
            UniformConstant sampler* %140 = OpVariable UniformConstant 
                        Private f32* %147 = OpVariable Private 
                      Private f32_2* %155 = OpVariable Private 
                                 f32 %158 = OpConstant 3.674022E-40 
                                 f32 %159 = OpConstant 3.674022E-40 
                               f32_2 %160 = OpConstantComposite %158 %159 
                                 f32 %163 = OpConstant 3.674022E-40 
                        Private f32* %170 = OpVariable Private 
                                 u32 %173 = OpConstant 1 
                                     %177 = OpTypePointer Output %10 
                       Output f32_4* %178 = OpVariable Output 
                                 f32 %180 = OpConstant 3.674022E-40 
                                     %182 = OpTypePointer Output %6 
                                 f32 %186 = OpConstant 3.674022E-40 
                                 f32 %193 = OpConstant 3.674022E-40 
                                 f32 %202 = OpConstant 3.674022E-40 
                                 f32 %203 = OpConstant 3.674022E-40 
                               f32_2 %204 = OpConstantComposite %202 %203 
                               f32_2 %209 = OpConstantComposite %33 %34 
                               f32_2 %211 = OpConstantComposite %33 %99 
                                 f32 %220 = OpConstant 3.674022E-40 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %89 = OpVariable Function 
                         Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                  f32 %20 = OpLoad %19 
                                  f32 %22 = OpFAdd %20 %21 
                         Private f32* %25 = OpAccessChain %9 %23 
                                              OpStore %25 %22 
                                f32_2 %31 = OpLoad vs_TEXCOORD0 
                                f32_3 %32 = OpVectorShuffle %31 %31 0 0 1 
                                f32_3 %36 = OpFMul %32 %35 
                                              OpStore %28 %36 
                         Private f32* %37 = OpAccessChain %28 %23 
                                  f32 %38 = OpLoad %37 
                         Private f32* %39 = OpAccessChain %9 %23 
                                  f32 %40 = OpLoad %39 
                                  f32 %41 = OpFMul %38 %40 
                                  f32 %42 = OpFAdd %41 %33 
                         Private f32* %43 = OpAccessChain %28 %23 
                                              OpStore %43 %42 
                         Private f32* %44 = OpAccessChain %9 %23 
                                  f32 %45 = OpLoad %44 
                                  f32 %46 = OpFDiv %34 %45 
                         Private f32* %47 = OpAccessChain %9 %23 
                                              OpStore %47 %46 
                  read_only Texture2D %52 = OpLoad %51 
                              sampler %56 = OpLoad %55 
           read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                f32_3 %59 = OpLoad %28 
                                f32_2 %60 = OpVectorShuffle %59 %59 1 2 
                                f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                  f32 %63 = OpCompositeExtract %61 3 
                                              OpStore %48 %63 
                         Private f32* %64 = OpAccessChain %28 %23 
                                  f32 %65 = OpLoad %64 
                                  f32 %66 = OpExtInst %1 8 %65 
                         Private f32* %67 = OpAccessChain %28 %23 
                                              OpStore %67 %66 
                         Private f32* %69 = OpAccessChain %28 %23 
                                  f32 %70 = OpLoad %69 
                                  f32 %71 = OpFMul %70 %33 
                                              OpStore %68 %71 
                         Private f32* %74 = OpAccessChain %28 %23 
                                  f32 %75 = OpLoad %74 
                                  i32 %76 = OpConvertFToS %75 
                                              OpStore %73 %76 
                                  f32 %80 = OpLoad %68 
                                  f32 %81 = OpLoad %68 
                                  f32 %82 = OpFNegate %81 
                                 bool %83 = OpFOrdGreaterThanEqual %80 %82 
                                              OpStore %79 %83 
                                  f32 %84 = OpLoad %68 
                                  f32 %85 = OpExtInst %1 4 %84 
                                  f32 %86 = OpExtInst %1 10 %85 
                                              OpStore %68 %86 
                                 bool %87 = OpLoad %79 
                                              OpSelectionMerge %91 None 
                                              OpBranchConditional %87 %90 %93 
                                      %90 = OpLabel 
                                  f32 %92 = OpLoad %68 
                                              OpStore %89 %92 
                                              OpBranch %91 
                                      %93 = OpLabel 
                                  f32 %94 = OpLoad %68 
                                  f32 %95 = OpFNegate %94 
                                              OpStore %89 %95 
                                              OpBranch %91 
                                      %91 = OpLabel 
                                  f32 %96 = OpLoad %89 
                                              OpStore %68 %96 
                                  f32 %98 = OpLoad %68 
                                bool %100 = OpFOrdEqual %98 %99 
                                              OpStore %97 %100 
                                 i32 %102 = OpLoad %73 
                                 i32 %104 = OpIAdd %102 %103 
                                              OpStore %101 %104 
                                bool %105 = OpLoad %97 
                                 i32 %106 = OpLoad %73 
                                 i32 %107 = OpLoad %101 
                                 i32 %108 = OpSelect %105 %106 %107 
                                              OpStore %73 %108 
                                 i32 %110 = OpLoad %73 
                                 i32 %112 = OpIAdd %110 %111 
                                              OpStore %109 %112 
                                 i32 %113 = OpLoad %73 
                                 f32 %114 = OpConvertSToF %113 
                        Private f32* %115 = OpAccessChain %28 %23 
                                              OpStore %115 %114 
                        Private f32* %118 = OpAccessChain %9 %23 
                                 f32 %119 = OpLoad %118 
                        Private f32* %120 = OpAccessChain %28 %23 
                                 f32 %121 = OpLoad %120 
                                 f32 %122 = OpFMul %119 %121 
                        Private f32* %123 = OpAccessChain %117 %23 
                                              OpStore %123 %122 
                                 i32 %124 = OpLoad %109 
                                 f32 %125 = OpConvertSToF %124 
                        Private f32* %126 = OpAccessChain %28 %23 
                                              OpStore %126 %125 
                        Private f32* %127 = OpAccessChain %9 %23 
                                 f32 %128 = OpLoad %127 
                        Private f32* %129 = OpAccessChain %28 %23 
                                 f32 %130 = OpLoad %129 
                                 f32 %131 = OpFMul %128 %130 
                        Private f32* %132 = OpAccessChain %117 %17 
                                              OpStore %132 %131 
                               f32_2 %133 = OpLoad vs_TEXCOORD0 
                               f32_2 %134 = OpVectorShuffle %133 %133 1 1 
                               f32_4 %135 = OpLoad %117 
                               f32_4 %136 = OpVectorShuffle %135 %134 0 4 2 5 
                                              OpStore %117 %136 
                 read_only Texture2D %139 = OpLoad %138 
                             sampler %141 = OpLoad %140 
          read_only Texture2DSampled %142 = OpSampledImage %139 %141 
                               f32_4 %143 = OpLoad %117 
                               f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                               f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                                 f32 %146 = OpCompositeExtract %145 3 
                                              OpStore %137 %146 
                 read_only Texture2D %148 = OpLoad %138 
                             sampler %149 = OpLoad %140 
          read_only Texture2DSampled %150 = OpSampledImage %148 %149 
                               f32_4 %151 = OpLoad %117 
                               f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                               f32_4 %153 = OpImageSampleImplicitLod %150 %152 
                                 f32 %154 = OpCompositeExtract %153 3 
                                              OpStore %147 %154 
                                 f32 %156 = OpLoad %147 
                               f32_2 %157 = OpCompositeConstruct %156 %156 
                               f32_2 %161 = OpFMul %157 %160 
                                              OpStore %155 %161 
                                 f32 %162 = OpLoad %48 
                                 f32 %164 = OpFMul %162 %163 
                        Private f32* %165 = OpAccessChain %155 %23 
                                 f32 %166 = OpLoad %165 
                                 f32 %167 = OpFNegate %166 
                                 f32 %168 = OpFAdd %164 %167 
                        Private f32* %169 = OpAccessChain %155 %23 
                                              OpStore %169 %168 
                                 f32 %171 = OpLoad %48 
                                 f32 %172 = OpFMul %171 %163 
                        Private f32* %174 = OpAccessChain %155 %173 
                                 f32 %175 = OpLoad %174 
                                 f32 %176 = OpFAdd %172 %175 
                                              OpStore %170 %176 
                                 f32 %179 = OpLoad %170 
                                 f32 %181 = OpFAdd %179 %180 
                         Output f32* %183 = OpAccessChain %178 %17 
                                              OpStore %183 %181 
                                 f32 %184 = OpLoad %137 
                                 f32 %185 = OpFNegate %184 
                                 f32 %187 = OpFMul %185 %186 
                        Private f32* %188 = OpAccessChain %155 %23 
                                 f32 %189 = OpLoad %188 
                                 f32 %190 = OpFAdd %187 %189 
                        Private f32* %191 = OpAccessChain %155 %23 
                                              OpStore %191 %190 
                                 f32 %192 = OpLoad %137 
                                 f32 %194 = OpFMul %192 %193 
                                              OpStore %170 %194 
                                 f32 %195 = OpLoad %48 
                                 f32 %196 = OpFMul %195 %163 
                                 f32 %197 = OpLoad %170 
                                 f32 %198 = OpFAdd %196 %197 
                        Private f32* %199 = OpAccessChain %155 %173 
                                              OpStore %199 %198 
                               f32_2 %200 = OpLoad %155 
                               f32_2 %201 = OpVectorShuffle %200 %200 1 0 
                               f32_2 %205 = OpFAdd %201 %204 
                               f32_4 %206 = OpLoad %178 
                               f32_4 %207 = OpVectorShuffle %206 %205 4 5 2 3 
                                              OpStore %178 %207 
                               f32_2 %208 = OpLoad vs_TEXCOORD0 
                               f32_2 %210 = OpFMul %208 %209 
                               f32_2 %212 = OpFAdd %210 %211 
                                              OpStore %9 %212 
                 read_only Texture2D %213 = OpLoad %51 
                             sampler %214 = OpLoad %55 
          read_only Texture2DSampled %215 = OpSampledImage %213 %214 
                               f32_2 %216 = OpLoad %9 
                               f32_4 %217 = OpImageSampleImplicitLod %215 %216 
                                 f32 %218 = OpCompositeExtract %217 3 
                                              OpStore %137 %218 
                                 f32 %219 = OpLoad %137 
                                 f32 %221 = OpFAdd %219 %220 
                        Private f32* %222 = OpAccessChain %155 %23 
                                              OpStore %222 %221 
                        Private f32* %223 = OpAccessChain %155 %23 
                                 f32 %224 = OpLoad %223 
                                 f32 %225 = OpFMul %224 %163 
                         Output f32* %226 = OpAccessChain %178 %62 
                                              OpStore %226 %225 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bool u_xlatb1;
mediump vec2 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = _MainTex_TexelSize.z + -0.5;
    u_xlat3.xyz = vs_TEXCOORD0.xxy * vec3(0.5, 0.5, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat0.x + 0.5;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_6 = texture(_MainTex, u_xlat3.yz).w;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat9 = u_xlat3.x * 0.5;
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat9>=(-u_xlat9));
#else
    u_xlatb1 = u_xlat9>=(-u_xlat9);
#endif
    u_xlat9 = fract(abs(u_xlat9));
    u_xlat9 = (u_xlatb1) ? u_xlat9 : (-u_xlat9);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9==0.0);
#else
    u_xlatb9 = u_xlat9==0.0;
#endif
    u_xlati1 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb9) ? u_xlati3 : u_xlati1;
    u_xlati9 = u_xlati3 + 1;
    u_xlat3.x = float(u_xlati3);
    u_xlat1.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = float(u_xlati9);
    u_xlat1.z = u_xlat0.x * u_xlat3.x;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_2.x = u_xlat16_6 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_6 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_6 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_2.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_2.x * 1.15625;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bool u_xlatb1;
mediump vec2 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = _MainTex_TexelSize.z + -0.5;
    u_xlat3.xyz = vs_TEXCOORD0.xxy * vec3(0.5, 0.5, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat0.x + 0.5;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_6 = texture(_MainTex, u_xlat3.yz).w;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat9 = u_xlat3.x * 0.5;
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat9>=(-u_xlat9));
#else
    u_xlatb1 = u_xlat9>=(-u_xlat9);
#endif
    u_xlat9 = fract(abs(u_xlat9));
    u_xlat9 = (u_xlatb1) ? u_xlat9 : (-u_xlat9);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9==0.0);
#else
    u_xlatb9 = u_xlat9==0.0;
#endif
    u_xlati1 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb9) ? u_xlati3 : u_xlati1;
    u_xlati9 = u_xlati3 + 1;
    u_xlat3.x = float(u_xlati3);
    u_xlat1.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = float(u_xlati9);
    u_xlat1.z = u_xlat0.x * u_xlat3.x;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_2.x = u_xlat16_6 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_6 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_6 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_2.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_2.x * 1.15625;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
int u_xlati1;
bool u_xlatb1;
mediump vec2 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = _MainTex_TexelSize.z + -0.5;
    u_xlat3.xyz = vs_TEXCOORD0.xxy * vec3(0.5, 0.5, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat0.x + 0.5;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_6 = texture(_MainTex, u_xlat3.yz).w;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat9 = u_xlat3.x * 0.5;
    u_xlati3 = int(u_xlat3.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat9>=(-u_xlat9));
#else
    u_xlatb1 = u_xlat9>=(-u_xlat9);
#endif
    u_xlat9 = fract(abs(u_xlat9));
    u_xlat9 = (u_xlatb1) ? u_xlat9 : (-u_xlat9);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9==0.0);
#else
    u_xlatb9 = u_xlat9==0.0;
#endif
    u_xlati1 = u_xlati3 + int(0xFFFFFFFFu);
    u_xlati3 = (u_xlatb9) ? u_xlati3 : u_xlati1;
    u_xlati9 = u_xlati3 + 1;
    u_xlat3.x = float(u_xlati3);
    u_xlat1.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.x = float(u_xlati9);
    u_xlat1.z = u_xlat0.x * u_xlat3.x;
    u_xlat1.yw = vs_TEXCOORD0.yy;
    u_xlat16_0 = texture(_SecondTex, u_xlat1.zw).w;
    u_xlat16_3 = texture(_SecondTex, u_xlat1.xy).w;
    u_xlat16_2.xy = vec2(u_xlat16_3) * vec2(0.390625, 1.984375);
    u_xlat16_2.x = u_xlat16_6 * 1.15625 + (-u_xlat16_2.x);
    u_xlat16_5 = u_xlat16_6 * 1.15625 + u_xlat16_2.y;
    SV_Target0.z = u_xlat16_5 + -1.06861997;
    u_xlat16_2.x = (-u_xlat16_0) * 0.8125 + u_xlat16_2.x;
    u_xlat16_5 = u_xlat16_0 * 1.59375;
    u_xlat16_2.y = u_xlat16_6 * 1.15625 + u_xlat16_5;
    SV_Target0.xy = u_xlat16_2.yx + vec2(-0.872539997, 0.531369984);
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_2.x = u_xlat16_0 + -0.0627449974;
    SV_Target0.w = u_xlat16_2.x * 1.15625;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %30 %178 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %11 0 Offset 11 
                                              OpDecorate %11 Block 
                                              OpDecorate %13 DescriptorSet 13 
                                              OpDecorate %13 Binding 13 
                                              OpDecorate vs_TEXCOORD0 Location 30 
                                              OpDecorate %48 RelaxedPrecision 
                                              OpDecorate %51 RelaxedPrecision 
                                              OpDecorate %51 DescriptorSet 51 
                                              OpDecorate %51 Binding 51 
                                              OpDecorate %52 RelaxedPrecision 
                                              OpDecorate %55 RelaxedPrecision 
                                              OpDecorate %55 DescriptorSet 55 
                                              OpDecorate %55 Binding 55 
                                              OpDecorate %56 RelaxedPrecision 
                                              OpDecorate %63 RelaxedPrecision 
                                              OpDecorate %137 RelaxedPrecision 
                                              OpDecorate %138 RelaxedPrecision 
                                              OpDecorate %138 DescriptorSet 138 
                                              OpDecorate %138 Binding 138 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %140 DescriptorSet 140 
                                              OpDecorate %140 Binding 140 
                                              OpDecorate %141 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %147 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %155 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %161 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %164 RelaxedPrecision 
                                              OpDecorate %166 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %171 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %178 Location 178 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %181 RelaxedPrecision 
                                              OpDecorate %184 RelaxedPrecision 
                                              OpDecorate %185 RelaxedPrecision 
                                              OpDecorate %187 RelaxedPrecision 
                                              OpDecorate %189 RelaxedPrecision 
                                              OpDecorate %190 RelaxedPrecision 
                                              OpDecorate %192 RelaxedPrecision 
                                              OpDecorate %194 RelaxedPrecision 
                                              OpDecorate %195 RelaxedPrecision 
                                              OpDecorate %196 RelaxedPrecision 
                                              OpDecorate %197 RelaxedPrecision 
                                              OpDecorate %198 RelaxedPrecision 
                                              OpDecorate %200 RelaxedPrecision 
                                              OpDecorate %201 RelaxedPrecision 
                                              OpDecorate %205 RelaxedPrecision 
                                              OpDecorate %213 RelaxedPrecision 
                                              OpDecorate %214 RelaxedPrecision 
                                              OpDecorate %218 RelaxedPrecision 
                                              OpDecorate %219 RelaxedPrecision 
                                              OpDecorate %221 RelaxedPrecision 
                                              OpDecorate %224 RelaxedPrecision 
                                              OpDecorate %225 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 2 
                                       %8 = OpTypePointer Private %7 
                        Private f32_2* %9 = OpVariable Private 
                                      %10 = OpTypeVector %6 4 
                                      %11 = OpTypeStruct %10 
                                      %12 = OpTypePointer Uniform %11 
             Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                      %14 = OpTypeInt 32 1 
                                  i32 %15 = OpConstant 0 
                                      %16 = OpTypeInt 32 0 
                                  u32 %17 = OpConstant 2 
                                      %18 = OpTypePointer Uniform %6 
                                  f32 %21 = OpConstant 3.674022E-40 
                                  u32 %23 = OpConstant 0 
                                      %24 = OpTypePointer Private %6 
                                      %26 = OpTypeVector %6 3 
                                      %27 = OpTypePointer Private %26 
                       Private f32_3* %28 = OpVariable Private 
                                      %29 = OpTypePointer Input %7 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  f32 %33 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                                f32_3 %35 = OpConstantComposite %33 %33 %34 
                         Private f32* %48 = OpVariable Private 
                                      %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %50 = OpTypePointer UniformConstant %49 
 UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                      %53 = OpTypeSampler 
                                      %54 = OpTypePointer UniformConstant %53 
             UniformConstant sampler* %55 = OpVariable UniformConstant 
                                      %57 = OpTypeSampledImage %49 
                                  u32 %62 = OpConstant 3 
                         Private f32* %68 = OpVariable Private 
                                      %72 = OpTypePointer Private %14 
                         Private i32* %73 = OpVariable Private 
                                      %77 = OpTypeBool 
                                      %78 = OpTypePointer Private %77 
                        Private bool* %79 = OpVariable Private 
                                      %88 = OpTypePointer Function %6 
                        Private bool* %97 = OpVariable Private 
                                  f32 %99 = OpConstant 3.674022E-40 
                        Private i32* %101 = OpVariable Private 
                                 i32 %103 = OpConstant -1 
                        Private i32* %109 = OpVariable Private 
                                 i32 %111 = OpConstant 1 
                                     %116 = OpTypePointer Private %10 
                      Private f32_4* %117 = OpVariable Private 
                        Private f32* %137 = OpVariable Private 
UniformConstant read_only Texture2D* %138 = OpVariable UniformConstant 
            UniformConstant sampler* %140 = OpVariable UniformConstant 
                        Private f32* %147 = OpVariable Private 
                      Private f32_2* %155 = OpVariable Private 
                                 f32 %158 = OpConstant 3.674022E-40 
                                 f32 %159 = OpConstant 3.674022E-40 
                               f32_2 %160 = OpConstantComposite %158 %159 
                                 f32 %163 = OpConstant 3.674022E-40 
                        Private f32* %170 = OpVariable Private 
                                 u32 %173 = OpConstant 1 
                                     %177 = OpTypePointer Output %10 
                       Output f32_4* %178 = OpVariable Output 
                                 f32 %180 = OpConstant 3.674022E-40 
                                     %182 = OpTypePointer Output %6 
                                 f32 %186 = OpConstant 3.674022E-40 
                                 f32 %193 = OpConstant 3.674022E-40 
                                 f32 %202 = OpConstant 3.674022E-40 
                                 f32 %203 = OpConstant 3.674022E-40 
                               f32_2 %204 = OpConstantComposite %202 %203 
                               f32_2 %209 = OpConstantComposite %33 %34 
                               f32_2 %211 = OpConstantComposite %33 %99 
                                 f32 %220 = OpConstant 3.674022E-40 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %89 = OpVariable Function 
                         Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                  f32 %20 = OpLoad %19 
                                  f32 %22 = OpFAdd %20 %21 
                         Private f32* %25 = OpAccessChain %9 %23 
                                              OpStore %25 %22 
                                f32_2 %31 = OpLoad vs_TEXCOORD0 
                                f32_3 %32 = OpVectorShuffle %31 %31 0 0 1 
                                f32_3 %36 = OpFMul %32 %35 
                                              OpStore %28 %36 
                         Private f32* %37 = OpAccessChain %28 %23 
                                  f32 %38 = OpLoad %37 
                         Private f32* %39 = OpAccessChain %9 %23 
                                  f32 %40 = OpLoad %39 
                                  f32 %41 = OpFMul %38 %40 
                                  f32 %42 = OpFAdd %41 %33 
                         Private f32* %43 = OpAccessChain %28 %23 
                                              OpStore %43 %42 
                         Private f32* %44 = OpAccessChain %9 %23 
                                  f32 %45 = OpLoad %44 
                                  f32 %46 = OpFDiv %34 %45 
                         Private f32* %47 = OpAccessChain %9 %23 
                                              OpStore %47 %46 
                  read_only Texture2D %52 = OpLoad %51 
                              sampler %56 = OpLoad %55 
           read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                f32_3 %59 = OpLoad %28 
                                f32_2 %60 = OpVectorShuffle %59 %59 1 2 
                                f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                  f32 %63 = OpCompositeExtract %61 3 
                                              OpStore %48 %63 
                         Private f32* %64 = OpAccessChain %28 %23 
                                  f32 %65 = OpLoad %64 
                                  f32 %66 = OpExtInst %1 8 %65 
                         Private f32* %67 = OpAccessChain %28 %23 
                                              OpStore %67 %66 
                         Private f32* %69 = OpAccessChain %28 %23 
                                  f32 %70 = OpLoad %69 
                                  f32 %71 = OpFMul %70 %33 
                                              OpStore %68 %71 
                         Private f32* %74 = OpAccessChain %28 %23 
                                  f32 %75 = OpLoad %74 
                                  i32 %76 = OpConvertFToS %75 
                                              OpStore %73 %76 
                                  f32 %80 = OpLoad %68 
                                  f32 %81 = OpLoad %68 
                                  f32 %82 = OpFNegate %81 
                                 bool %83 = OpFOrdGreaterThanEqual %80 %82 
                                              OpStore %79 %83 
                                  f32 %84 = OpLoad %68 
                                  f32 %85 = OpExtInst %1 4 %84 
                                  f32 %86 = OpExtInst %1 10 %85 
                                              OpStore %68 %86 
                                 bool %87 = OpLoad %79 
                                              OpSelectionMerge %91 None 
                                              OpBranchConditional %87 %90 %93 
                                      %90 = OpLabel 
                                  f32 %92 = OpLoad %68 
                                              OpStore %89 %92 
                                              OpBranch %91 
                                      %93 = OpLabel 
                                  f32 %94 = OpLoad %68 
                                  f32 %95 = OpFNegate %94 
                                              OpStore %89 %95 
                                              OpBranch %91 
                                      %91 = OpLabel 
                                  f32 %96 = OpLoad %89 
                                              OpStore %68 %96 
                                  f32 %98 = OpLoad %68 
                                bool %100 = OpFOrdEqual %98 %99 
                                              OpStore %97 %100 
                                 i32 %102 = OpLoad %73 
                                 i32 %104 = OpIAdd %102 %103 
                                              OpStore %101 %104 
                                bool %105 = OpLoad %97 
                                 i32 %106 = OpLoad %73 
                                 i32 %107 = OpLoad %101 
                                 i32 %108 = OpSelect %105 %106 %107 
                                              OpStore %73 %108 
                                 i32 %110 = OpLoad %73 
                                 i32 %112 = OpIAdd %110 %111 
                                              OpStore %109 %112 
                                 i32 %113 = OpLoad %73 
                                 f32 %114 = OpConvertSToF %113 
                        Private f32* %115 = OpAccessChain %28 %23 
                                              OpStore %115 %114 
                        Private f32* %118 = OpAccessChain %9 %23 
                                 f32 %119 = OpLoad %118 
                        Private f32* %120 = OpAccessChain %28 %23 
                                 f32 %121 = OpLoad %120 
                                 f32 %122 = OpFMul %119 %121 
                        Private f32* %123 = OpAccessChain %117 %23 
                                              OpStore %123 %122 
                                 i32 %124 = OpLoad %109 
                                 f32 %125 = OpConvertSToF %124 
                        Private f32* %126 = OpAccessChain %28 %23 
                                              OpStore %126 %125 
                        Private f32* %127 = OpAccessChain %9 %23 
                                 f32 %128 = OpLoad %127 
                        Private f32* %129 = OpAccessChain %28 %23 
                                 f32 %130 = OpLoad %129 
                                 f32 %131 = OpFMul %128 %130 
                        Private f32* %132 = OpAccessChain %117 %17 
                                              OpStore %132 %131 
                               f32_2 %133 = OpLoad vs_TEXCOORD0 
                               f32_2 %134 = OpVectorShuffle %133 %133 1 1 
                               f32_4 %135 = OpLoad %117 
                               f32_4 %136 = OpVectorShuffle %135 %134 0 4 2 5 
                                              OpStore %117 %136 
                 read_only Texture2D %139 = OpLoad %138 
                             sampler %141 = OpLoad %140 
          read_only Texture2DSampled %142 = OpSampledImage %139 %141 
                               f32_4 %143 = OpLoad %117 
                               f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                               f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                                 f32 %146 = OpCompositeExtract %145 3 
                                              OpStore %137 %146 
                 read_only Texture2D %148 = OpLoad %138 
                             sampler %149 = OpLoad %140 
          read_only Texture2DSampled %150 = OpSampledImage %148 %149 
                               f32_4 %151 = OpLoad %117 
                               f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                               f32_4 %153 = OpImageSampleImplicitLod %150 %152 
                                 f32 %154 = OpCompositeExtract %153 3 
                                              OpStore %147 %154 
                                 f32 %156 = OpLoad %147 
                               f32_2 %157 = OpCompositeConstruct %156 %156 
                               f32_2 %161 = OpFMul %157 %160 
                                              OpStore %155 %161 
                                 f32 %162 = OpLoad %48 
                                 f32 %164 = OpFMul %162 %163 
                        Private f32* %165 = OpAccessChain %155 %23 
                                 f32 %166 = OpLoad %165 
                                 f32 %167 = OpFNegate %166 
                                 f32 %168 = OpFAdd %164 %167 
                        Private f32* %169 = OpAccessChain %155 %23 
                                              OpStore %169 %168 
                                 f32 %171 = OpLoad %48 
                                 f32 %172 = OpFMul %171 %163 
                        Private f32* %174 = OpAccessChain %155 %173 
                                 f32 %175 = OpLoad %174 
                                 f32 %176 = OpFAdd %172 %175 
                                              OpStore %170 %176 
                                 f32 %179 = OpLoad %170 
                                 f32 %181 = OpFAdd %179 %180 
                         Output f32* %183 = OpAccessChain %178 %17 
                                              OpStore %183 %181 
                                 f32 %184 = OpLoad %137 
                                 f32 %185 = OpFNegate %184 
                                 f32 %187 = OpFMul %185 %186 
                        Private f32* %188 = OpAccessChain %155 %23 
                                 f32 %189 = OpLoad %188 
                                 f32 %190 = OpFAdd %187 %189 
                        Private f32* %191 = OpAccessChain %155 %23 
                                              OpStore %191 %190 
                                 f32 %192 = OpLoad %137 
                                 f32 %194 = OpFMul %192 %193 
                                              OpStore %170 %194 
                                 f32 %195 = OpLoad %48 
                                 f32 %196 = OpFMul %195 %163 
                                 f32 %197 = OpLoad %170 
                                 f32 %198 = OpFAdd %196 %197 
                        Private f32* %199 = OpAccessChain %155 %173 
                                              OpStore %199 %198 
                               f32_2 %200 = OpLoad %155 
                               f32_2 %201 = OpVectorShuffle %200 %200 1 0 
                               f32_2 %205 = OpFAdd %201 %204 
                               f32_4 %206 = OpLoad %178 
                               f32_4 %207 = OpVectorShuffle %206 %205 4 5 2 3 
                                              OpStore %178 %207 
                               f32_2 %208 = OpLoad vs_TEXCOORD0 
                               f32_2 %210 = OpFMul %208 %209 
                               f32_2 %212 = OpFAdd %210 %211 
                                              OpStore %9 %212 
                 read_only Texture2D %213 = OpLoad %51 
                             sampler %214 = OpLoad %55 
          read_only Texture2DSampled %215 = OpSampledImage %213 %214 
                               f32_2 %216 = OpLoad %9 
                               f32_4 %217 = OpImageSampleImplicitLod %215 %216 
                                 f32 %218 = OpCompositeExtract %217 3 
                                              OpStore %137 %218 
                                 f32 %219 = OpLoad %137 
                                 f32 %221 = OpFAdd %219 %220 
                        Private f32* %222 = OpAccessChain %155 %23 
                                              OpStore %222 %221 
                        Private f32* %223 = OpAccessChain %155 %23 
                                 f32 %224 = OpLoad %223 
                                 f32 %225 = OpFMul %224 %163 
                         Output f32* %226 = OpAccessChain %178 %62 
                                              OpStore %226 %225 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %30 %178 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %11 0 Offset 11 
                                              OpDecorate %11 Block 
                                              OpDecorate %13 DescriptorSet 13 
                                              OpDecorate %13 Binding 13 
                                              OpDecorate vs_TEXCOORD0 Location 30 
                                              OpDecorate %48 RelaxedPrecision 
                                              OpDecorate %51 RelaxedPrecision 
                                              OpDecorate %51 DescriptorSet 51 
                                              OpDecorate %51 Binding 51 
                                              OpDecorate %52 RelaxedPrecision 
                                              OpDecorate %55 RelaxedPrecision 
                                              OpDecorate %55 DescriptorSet 55 
                                              OpDecorate %55 Binding 55 
                                              OpDecorate %56 RelaxedPrecision 
                                              OpDecorate %63 RelaxedPrecision 
                                              OpDecorate %137 RelaxedPrecision 
                                              OpDecorate %138 RelaxedPrecision 
                                              OpDecorate %138 DescriptorSet 138 
                                              OpDecorate %138 Binding 138 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %140 DescriptorSet 140 
                                              OpDecorate %140 Binding 140 
                                              OpDecorate %141 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %147 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %155 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %161 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %164 RelaxedPrecision 
                                              OpDecorate %166 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %171 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %178 Location 178 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %181 RelaxedPrecision 
                                              OpDecorate %184 RelaxedPrecision 
                                              OpDecorate %185 RelaxedPrecision 
                                              OpDecorate %187 RelaxedPrecision 
                                              OpDecorate %189 RelaxedPrecision 
                                              OpDecorate %190 RelaxedPrecision 
                                              OpDecorate %192 RelaxedPrecision 
                                              OpDecorate %194 RelaxedPrecision 
                                              OpDecorate %195 RelaxedPrecision 
                                              OpDecorate %196 RelaxedPrecision 
                                              OpDecorate %197 RelaxedPrecision 
                                              OpDecorate %198 RelaxedPrecision 
                                              OpDecorate %200 RelaxedPrecision 
                                              OpDecorate %201 RelaxedPrecision 
                                              OpDecorate %205 RelaxedPrecision 
                                              OpDecorate %213 RelaxedPrecision 
                                              OpDecorate %214 RelaxedPrecision 
                                              OpDecorate %218 RelaxedPrecision 
                                              OpDecorate %219 RelaxedPrecision 
                                              OpDecorate %221 RelaxedPrecision 
                                              OpDecorate %224 RelaxedPrecision 
                                              OpDecorate %225 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 2 
                                       %8 = OpTypePointer Private %7 
                        Private f32_2* %9 = OpVariable Private 
                                      %10 = OpTypeVector %6 4 
                                      %11 = OpTypeStruct %10 
                                      %12 = OpTypePointer Uniform %11 
             Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                      %14 = OpTypeInt 32 1 
                                  i32 %15 = OpConstant 0 
                                      %16 = OpTypeInt 32 0 
                                  u32 %17 = OpConstant 2 
                                      %18 = OpTypePointer Uniform %6 
                                  f32 %21 = OpConstant 3.674022E-40 
                                  u32 %23 = OpConstant 0 
                                      %24 = OpTypePointer Private %6 
                                      %26 = OpTypeVector %6 3 
                                      %27 = OpTypePointer Private %26 
                       Private f32_3* %28 = OpVariable Private 
                                      %29 = OpTypePointer Input %7 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  f32 %33 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                                f32_3 %35 = OpConstantComposite %33 %33 %34 
                         Private f32* %48 = OpVariable Private 
                                      %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %50 = OpTypePointer UniformConstant %49 
 UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                      %53 = OpTypeSampler 
                                      %54 = OpTypePointer UniformConstant %53 
             UniformConstant sampler* %55 = OpVariable UniformConstant 
                                      %57 = OpTypeSampledImage %49 
                                  u32 %62 = OpConstant 3 
                         Private f32* %68 = OpVariable Private 
                                      %72 = OpTypePointer Private %14 
                         Private i32* %73 = OpVariable Private 
                                      %77 = OpTypeBool 
                                      %78 = OpTypePointer Private %77 
                        Private bool* %79 = OpVariable Private 
                                      %88 = OpTypePointer Function %6 
                        Private bool* %97 = OpVariable Private 
                                  f32 %99 = OpConstant 3.674022E-40 
                        Private i32* %101 = OpVariable Private 
                                 i32 %103 = OpConstant -1 
                        Private i32* %109 = OpVariable Private 
                                 i32 %111 = OpConstant 1 
                                     %116 = OpTypePointer Private %10 
                      Private f32_4* %117 = OpVariable Private 
                        Private f32* %137 = OpVariable Private 
UniformConstant read_only Texture2D* %138 = OpVariable UniformConstant 
            UniformConstant sampler* %140 = OpVariable UniformConstant 
                        Private f32* %147 = OpVariable Private 
                      Private f32_2* %155 = OpVariable Private 
                                 f32 %158 = OpConstant 3.674022E-40 
                                 f32 %159 = OpConstant 3.674022E-40 
                               f32_2 %160 = OpConstantComposite %158 %159 
                                 f32 %163 = OpConstant 3.674022E-40 
                        Private f32* %170 = OpVariable Private 
                                 u32 %173 = OpConstant 1 
                                     %177 = OpTypePointer Output %10 
                       Output f32_4* %178 = OpVariable Output 
                                 f32 %180 = OpConstant 3.674022E-40 
                                     %182 = OpTypePointer Output %6 
                                 f32 %186 = OpConstant 3.674022E-40 
                                 f32 %193 = OpConstant 3.674022E-40 
                                 f32 %202 = OpConstant 3.674022E-40 
                                 f32 %203 = OpConstant 3.674022E-40 
                               f32_2 %204 = OpConstantComposite %202 %203 
                               f32_2 %209 = OpConstantComposite %33 %34 
                               f32_2 %211 = OpConstantComposite %33 %99 
                                 f32 %220 = OpConstant 3.674022E-40 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %89 = OpVariable Function 
                         Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                  f32 %20 = OpLoad %19 
                                  f32 %22 = OpFAdd %20 %21 
                         Private f32* %25 = OpAccessChain %9 %23 
                                              OpStore %25 %22 
                                f32_2 %31 = OpLoad vs_TEXCOORD0 
                                f32_3 %32 = OpVectorShuffle %31 %31 0 0 1 
                                f32_3 %36 = OpFMul %32 %35 
                                              OpStore %28 %36 
                         Private f32* %37 = OpAccessChain %28 %23 
                                  f32 %38 = OpLoad %37 
                         Private f32* %39 = OpAccessChain %9 %23 
                                  f32 %40 = OpLoad %39 
                                  f32 %41 = OpFMul %38 %40 
                                  f32 %42 = OpFAdd %41 %33 
                         Private f32* %43 = OpAccessChain %28 %23 
                                              OpStore %43 %42 
                         Private f32* %44 = OpAccessChain %9 %23 
                                  f32 %45 = OpLoad %44 
                                  f32 %46 = OpFDiv %34 %45 
                         Private f32* %47 = OpAccessChain %9 %23 
                                              OpStore %47 %46 
                  read_only Texture2D %52 = OpLoad %51 
                              sampler %56 = OpLoad %55 
           read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                f32_3 %59 = OpLoad %28 
                                f32_2 %60 = OpVectorShuffle %59 %59 1 2 
                                f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                  f32 %63 = OpCompositeExtract %61 3 
                                              OpStore %48 %63 
                         Private f32* %64 = OpAccessChain %28 %23 
                                  f32 %65 = OpLoad %64 
                                  f32 %66 = OpExtInst %1 8 %65 
                         Private f32* %67 = OpAccessChain %28 %23 
                                              OpStore %67 %66 
                         Private f32* %69 = OpAccessChain %28 %23 
                                  f32 %70 = OpLoad %69 
                                  f32 %71 = OpFMul %70 %33 
                                              OpStore %68 %71 
                         Private f32* %74 = OpAccessChain %28 %23 
                                  f32 %75 = OpLoad %74 
                                  i32 %76 = OpConvertFToS %75 
                                              OpStore %73 %76 
                                  f32 %80 = OpLoad %68 
                                  f32 %81 = OpLoad %68 
                                  f32 %82 = OpFNegate %81 
                                 bool %83 = OpFOrdGreaterThanEqual %80 %82 
                                              OpStore %79 %83 
                                  f32 %84 = OpLoad %68 
                                  f32 %85 = OpExtInst %1 4 %84 
                                  f32 %86 = OpExtInst %1 10 %85 
                                              OpStore %68 %86 
                                 bool %87 = OpLoad %79 
                                              OpSelectionMerge %91 None 
                                              OpBranchConditional %87 %90 %93 
                                      %90 = OpLabel 
                                  f32 %92 = OpLoad %68 
                                              OpStore %89 %92 
                                              OpBranch %91 
                                      %93 = OpLabel 
                                  f32 %94 = OpLoad %68 
                                  f32 %95 = OpFNegate %94 
                                              OpStore %89 %95 
                                              OpBranch %91 
                                      %91 = OpLabel 
                                  f32 %96 = OpLoad %89 
                                              OpStore %68 %96 
                                  f32 %98 = OpLoad %68 
                                bool %100 = OpFOrdEqual %98 %99 
                                              OpStore %97 %100 
                                 i32 %102 = OpLoad %73 
                                 i32 %104 = OpIAdd %102 %103 
                                              OpStore %101 %104 
                                bool %105 = OpLoad %97 
                                 i32 %106 = OpLoad %73 
                                 i32 %107 = OpLoad %101 
                                 i32 %108 = OpSelect %105 %106 %107 
                                              OpStore %73 %108 
                                 i32 %110 = OpLoad %73 
                                 i32 %112 = OpIAdd %110 %111 
                                              OpStore %109 %112 
                                 i32 %113 = OpLoad %73 
                                 f32 %114 = OpConvertSToF %113 
                        Private f32* %115 = OpAccessChain %28 %23 
                                              OpStore %115 %114 
                        Private f32* %118 = OpAccessChain %9 %23 
                                 f32 %119 = OpLoad %118 
                        Private f32* %120 = OpAccessChain %28 %23 
                                 f32 %121 = OpLoad %120 
                                 f32 %122 = OpFMul %119 %121 
                        Private f32* %123 = OpAccessChain %117 %23 
                                              OpStore %123 %122 
                                 i32 %124 = OpLoad %109 
                                 f32 %125 = OpConvertSToF %124 
                        Private f32* %126 = OpAccessChain %28 %23 
                                              OpStore %126 %125 
                        Private f32* %127 = OpAccessChain %9 %23 
                                 f32 %128 = OpLoad %127 
                        Private f32* %129 = OpAccessChain %28 %23 
                                 f32 %130 = OpLoad %129 
                                 f32 %131 = OpFMul %128 %130 
                        Private f32* %132 = OpAccessChain %117 %17 
                                              OpStore %132 %131 
                               f32_2 %133 = OpLoad vs_TEXCOORD0 
                               f32_2 %134 = OpVectorShuffle %133 %133 1 1 
                               f32_4 %135 = OpLoad %117 
                               f32_4 %136 = OpVectorShuffle %135 %134 0 4 2 5 
                                              OpStore %117 %136 
                 read_only Texture2D %139 = OpLoad %138 
                             sampler %141 = OpLoad %140 
          read_only Texture2DSampled %142 = OpSampledImage %139 %141 
                               f32_4 %143 = OpLoad %117 
                               f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                               f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                                 f32 %146 = OpCompositeExtract %145 3 
                                              OpStore %137 %146 
                 read_only Texture2D %148 = OpLoad %138 
                             sampler %149 = OpLoad %140 
          read_only Texture2DSampled %150 = OpSampledImage %148 %149 
                               f32_4 %151 = OpLoad %117 
                               f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                               f32_4 %153 = OpImageSampleImplicitLod %150 %152 
                                 f32 %154 = OpCompositeExtract %153 3 
                                              OpStore %147 %154 
                                 f32 %156 = OpLoad %147 
                               f32_2 %157 = OpCompositeConstruct %156 %156 
                               f32_2 %161 = OpFMul %157 %160 
                                              OpStore %155 %161 
                                 f32 %162 = OpLoad %48 
                                 f32 %164 = OpFMul %162 %163 
                        Private f32* %165 = OpAccessChain %155 %23 
                                 f32 %166 = OpLoad %165 
                                 f32 %167 = OpFNegate %166 
                                 f32 %168 = OpFAdd %164 %167 
                        Private f32* %169 = OpAccessChain %155 %23 
                                              OpStore %169 %168 
                                 f32 %171 = OpLoad %48 
                                 f32 %172 = OpFMul %171 %163 
                        Private f32* %174 = OpAccessChain %155 %173 
                                 f32 %175 = OpLoad %174 
                                 f32 %176 = OpFAdd %172 %175 
                                              OpStore %170 %176 
                                 f32 %179 = OpLoad %170 
                                 f32 %181 = OpFAdd %179 %180 
                         Output f32* %183 = OpAccessChain %178 %17 
                                              OpStore %183 %181 
                                 f32 %184 = OpLoad %137 
                                 f32 %185 = OpFNegate %184 
                                 f32 %187 = OpFMul %185 %186 
                        Private f32* %188 = OpAccessChain %155 %23 
                                 f32 %189 = OpLoad %188 
                                 f32 %190 = OpFAdd %187 %189 
                        Private f32* %191 = OpAccessChain %155 %23 
                                              OpStore %191 %190 
                                 f32 %192 = OpLoad %137 
                                 f32 %194 = OpFMul %192 %193 
                                              OpStore %170 %194 
                                 f32 %195 = OpLoad %48 
                                 f32 %196 = OpFMul %195 %163 
                                 f32 %197 = OpLoad %170 
                                 f32 %198 = OpFAdd %196 %197 
                        Private f32* %199 = OpAccessChain %155 %173 
                                              OpStore %199 %198 
                               f32_2 %200 = OpLoad %155 
                               f32_2 %201 = OpVectorShuffle %200 %200 1 0 
                               f32_2 %205 = OpFAdd %201 %204 
                               f32_4 %206 = OpLoad %178 
                               f32_4 %207 = OpVectorShuffle %206 %205 4 5 2 3 
                                              OpStore %178 %207 
                               f32_2 %208 = OpLoad vs_TEXCOORD0 
                               f32_2 %210 = OpFMul %208 %209 
                               f32_2 %212 = OpFAdd %210 %211 
                                              OpStore %9 %212 
                 read_only Texture2D %213 = OpLoad %51 
                             sampler %214 = OpLoad %55 
          read_only Texture2DSampled %215 = OpSampledImage %213 %214 
                               f32_2 %216 = OpLoad %9 
                               f32_4 %217 = OpImageSampleImplicitLod %215 %216 
                                 f32 %218 = OpCompositeExtract %217 3 
                                              OpStore %137 %218 
                                 f32 %219 = OpLoad %137 
                                 f32 %221 = OpFAdd %219 %220 
                        Private f32* %222 = OpAccessChain %155 %23 
                                              OpStore %222 %221 
                        Private f32* %223 = OpAccessChain %155 %23 
                                 f32 %224 = OpLoad %223 
                                 f32 %225 = OpFMul %224 %163 
                         Output f32* %226 = OpAccessChain %178 %62 
                                              OpStore %226 %225 
                                              OpReturn
                                              OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %30 %178 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %11 0 Offset 11 
                                              OpDecorate %11 Block 
                                              OpDecorate %13 DescriptorSet 13 
                                              OpDecorate %13 Binding 13 
                                              OpDecorate vs_TEXCOORD0 Location 30 
                                              OpDecorate %48 RelaxedPrecision 
                                              OpDecorate %51 RelaxedPrecision 
                                              OpDecorate %51 DescriptorSet 51 
                                              OpDecorate %51 Binding 51 
                                              OpDecorate %52 RelaxedPrecision 
                                              OpDecorate %55 RelaxedPrecision 
                                              OpDecorate %55 DescriptorSet 55 
                                              OpDecorate %55 Binding 55 
                                              OpDecorate %56 RelaxedPrecision 
                                              OpDecorate %63 RelaxedPrecision 
                                              OpDecorate %137 RelaxedPrecision 
                                              OpDecorate %138 RelaxedPrecision 
                                              OpDecorate %138 DescriptorSet 138 
                                              OpDecorate %138 Binding 138 
                                              OpDecorate %139 RelaxedPrecision 
                                              OpDecorate %140 RelaxedPrecision 
                                              OpDecorate %140 DescriptorSet 140 
                                              OpDecorate %140 Binding 140 
                                              OpDecorate %141 RelaxedPrecision 
                                              OpDecorate %146 RelaxedPrecision 
                                              OpDecorate %147 RelaxedPrecision 
                                              OpDecorate %148 RelaxedPrecision 
                                              OpDecorate %149 RelaxedPrecision 
                                              OpDecorate %154 RelaxedPrecision 
                                              OpDecorate %155 RelaxedPrecision 
                                              OpDecorate %156 RelaxedPrecision 
                                              OpDecorate %157 RelaxedPrecision 
                                              OpDecorate %161 RelaxedPrecision 
                                              OpDecorate %162 RelaxedPrecision 
                                              OpDecorate %164 RelaxedPrecision 
                                              OpDecorate %166 RelaxedPrecision 
                                              OpDecorate %167 RelaxedPrecision 
                                              OpDecorate %168 RelaxedPrecision 
                                              OpDecorate %170 RelaxedPrecision 
                                              OpDecorate %171 RelaxedPrecision 
                                              OpDecorate %172 RelaxedPrecision 
                                              OpDecorate %175 RelaxedPrecision 
                                              OpDecorate %176 RelaxedPrecision 
                                              OpDecorate %178 RelaxedPrecision 
                                              OpDecorate %178 Location 178 
                                              OpDecorate %179 RelaxedPrecision 
                                              OpDecorate %181 RelaxedPrecision 
                                              OpDecorate %184 RelaxedPrecision 
                                              OpDecorate %185 RelaxedPrecision 
                                              OpDecorate %187 RelaxedPrecision 
                                              OpDecorate %189 RelaxedPrecision 
                                              OpDecorate %190 RelaxedPrecision 
                                              OpDecorate %192 RelaxedPrecision 
                                              OpDecorate %194 RelaxedPrecision 
                                              OpDecorate %195 RelaxedPrecision 
                                              OpDecorate %196 RelaxedPrecision 
                                              OpDecorate %197 RelaxedPrecision 
                                              OpDecorate %198 RelaxedPrecision 
                                              OpDecorate %200 RelaxedPrecision 
                                              OpDecorate %201 RelaxedPrecision 
                                              OpDecorate %205 RelaxedPrecision 
                                              OpDecorate %213 RelaxedPrecision 
                                              OpDecorate %214 RelaxedPrecision 
                                              OpDecorate %218 RelaxedPrecision 
                                              OpDecorate %219 RelaxedPrecision 
                                              OpDecorate %221 RelaxedPrecision 
                                              OpDecorate %224 RelaxedPrecision 
                                              OpDecorate %225 RelaxedPrecision 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 2 
                                       %8 = OpTypePointer Private %7 
                        Private f32_2* %9 = OpVariable Private 
                                      %10 = OpTypeVector %6 4 
                                      %11 = OpTypeStruct %10 
                                      %12 = OpTypePointer Uniform %11 
             Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                      %14 = OpTypeInt 32 1 
                                  i32 %15 = OpConstant 0 
                                      %16 = OpTypeInt 32 0 
                                  u32 %17 = OpConstant 2 
                                      %18 = OpTypePointer Uniform %6 
                                  f32 %21 = OpConstant 3.674022E-40 
                                  u32 %23 = OpConstant 0 
                                      %24 = OpTypePointer Private %6 
                                      %26 = OpTypeVector %6 3 
                                      %27 = OpTypePointer Private %26 
                       Private f32_3* %28 = OpVariable Private 
                                      %29 = OpTypePointer Input %7 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  f32 %33 = OpConstant 3.674022E-40 
                                  f32 %34 = OpConstant 3.674022E-40 
                                f32_3 %35 = OpConstantComposite %33 %33 %34 
                         Private f32* %48 = OpVariable Private 
                                      %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %50 = OpTypePointer UniformConstant %49 
 UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                      %53 = OpTypeSampler 
                                      %54 = OpTypePointer UniformConstant %53 
             UniformConstant sampler* %55 = OpVariable UniformConstant 
                                      %57 = OpTypeSampledImage %49 
                                  u32 %62 = OpConstant 3 
                         Private f32* %68 = OpVariable Private 
                                      %72 = OpTypePointer Private %14 
                         Private i32* %73 = OpVariable Private 
                                      %77 = OpTypeBool 
                                      %78 = OpTypePointer Private %77 
                        Private bool* %79 = OpVariable Private 
                                      %88 = OpTypePointer Function %6 
                        Private bool* %97 = OpVariable Private 
                                  f32 %99 = OpConstant 3.674022E-40 
                        Private i32* %101 = OpVariable Private 
                                 i32 %103 = OpConstant -1 
                        Private i32* %109 = OpVariable Private 
                                 i32 %111 = OpConstant 1 
                                     %116 = OpTypePointer Private %10 
                      Private f32_4* %117 = OpVariable Private 
                        Private f32* %137 = OpVariable Private 
UniformConstant read_only Texture2D* %138 = OpVariable UniformConstant 
            UniformConstant sampler* %140 = OpVariable UniformConstant 
                        Private f32* %147 = OpVariable Private 
                      Private f32_2* %155 = OpVariable Private 
                                 f32 %158 = OpConstant 3.674022E-40 
                                 f32 %159 = OpConstant 3.674022E-40 
                               f32_2 %160 = OpConstantComposite %158 %159 
                                 f32 %163 = OpConstant 3.674022E-40 
                        Private f32* %170 = OpVariable Private 
                                 u32 %173 = OpConstant 1 
                                     %177 = OpTypePointer Output %10 
                       Output f32_4* %178 = OpVariable Output 
                                 f32 %180 = OpConstant 3.674022E-40 
                                     %182 = OpTypePointer Output %6 
                                 f32 %186 = OpConstant 3.674022E-40 
                                 f32 %193 = OpConstant 3.674022E-40 
                                 f32 %202 = OpConstant 3.674022E-40 
                                 f32 %203 = OpConstant 3.674022E-40 
                               f32_2 %204 = OpConstantComposite %202 %203 
                               f32_2 %209 = OpConstantComposite %33 %34 
                               f32_2 %211 = OpConstantComposite %33 %99 
                                 f32 %220 = OpConstant 3.674022E-40 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                        Function f32* %89 = OpVariable Function 
                         Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                  f32 %20 = OpLoad %19 
                                  f32 %22 = OpFAdd %20 %21 
                         Private f32* %25 = OpAccessChain %9 %23 
                                              OpStore %25 %22 
                                f32_2 %31 = OpLoad vs_TEXCOORD0 
                                f32_3 %32 = OpVectorShuffle %31 %31 0 0 1 
                                f32_3 %36 = OpFMul %32 %35 
                                              OpStore %28 %36 
                         Private f32* %37 = OpAccessChain %28 %23 
                                  f32 %38 = OpLoad %37 
                         Private f32* %39 = OpAccessChain %9 %23 
                                  f32 %40 = OpLoad %39 
                                  f32 %41 = OpFMul %38 %40 
                                  f32 %42 = OpFAdd %41 %33 
                         Private f32* %43 = OpAccessChain %28 %23 
                                              OpStore %43 %42 
                         Private f32* %44 = OpAccessChain %9 %23 
                                  f32 %45 = OpLoad %44 
                                  f32 %46 = OpFDiv %34 %45 
                         Private f32* %47 = OpAccessChain %9 %23 
                                              OpStore %47 %46 
                  read_only Texture2D %52 = OpLoad %51 
                              sampler %56 = OpLoad %55 
           read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                f32_3 %59 = OpLoad %28 
                                f32_2 %60 = OpVectorShuffle %59 %59 1 2 
                                f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                  f32 %63 = OpCompositeExtract %61 3 
                                              OpStore %48 %63 
                         Private f32* %64 = OpAccessChain %28 %23 
                                  f32 %65 = OpLoad %64 
                                  f32 %66 = OpExtInst %1 8 %65 
                         Private f32* %67 = OpAccessChain %28 %23 
                                              OpStore %67 %66 
                         Private f32* %69 = OpAccessChain %28 %23 
                                  f32 %70 = OpLoad %69 
                                  f32 %71 = OpFMul %70 %33 
                                              OpStore %68 %71 
                         Private f32* %74 = OpAccessChain %28 %23 
                                  f32 %75 = OpLoad %74 
                                  i32 %76 = OpConvertFToS %75 
                                              OpStore %73 %76 
                                  f32 %80 = OpLoad %68 
                                  f32 %81 = OpLoad %68 
                                  f32 %82 = OpFNegate %81 
                                 bool %83 = OpFOrdGreaterThanEqual %80 %82 
                                              OpStore %79 %83 
                                  f32 %84 = OpLoad %68 
                                  f32 %85 = OpExtInst %1 4 %84 
                                  f32 %86 = OpExtInst %1 10 %85 
                                              OpStore %68 %86 
                                 bool %87 = OpLoad %79 
                                              OpSelectionMerge %91 None 
                                              OpBranchConditional %87 %90 %93 
                                      %90 = OpLabel 
                                  f32 %92 = OpLoad %68 
                                              OpStore %89 %92 
                                              OpBranch %91 
                                      %93 = OpLabel 
                                  f32 %94 = OpLoad %68 
                                  f32 %95 = OpFNegate %94 
                                              OpStore %89 %95 
                                              OpBranch %91 
                                      %91 = OpLabel 
                                  f32 %96 = OpLoad %89 
                                              OpStore %68 %96 
                                  f32 %98 = OpLoad %68 
                                bool %100 = OpFOrdEqual %98 %99 
                                              OpStore %97 %100 
                                 i32 %102 = OpLoad %73 
                                 i32 %104 = OpIAdd %102 %103 
                                              OpStore %101 %104 
                                bool %105 = OpLoad %97 
                                 i32 %106 = OpLoad %73 
                                 i32 %107 = OpLoad %101 
                                 i32 %108 = OpSelect %105 %106 %107 
                                              OpStore %73 %108 
                                 i32 %110 = OpLoad %73 
                                 i32 %112 = OpIAdd %110 %111 
                                              OpStore %109 %112 
                                 i32 %113 = OpLoad %73 
                                 f32 %114 = OpConvertSToF %113 
                        Private f32* %115 = OpAccessChain %28 %23 
                                              OpStore %115 %114 
                        Private f32* %118 = OpAccessChain %9 %23 
                                 f32 %119 = OpLoad %118 
                        Private f32* %120 = OpAccessChain %28 %23 
                                 f32 %121 = OpLoad %120 
                                 f32 %122 = OpFMul %119 %121 
                        Private f32* %123 = OpAccessChain %117 %23 
                                              OpStore %123 %122 
                                 i32 %124 = OpLoad %109 
                                 f32 %125 = OpConvertSToF %124 
                        Private f32* %126 = OpAccessChain %28 %23 
                                              OpStore %126 %125 
                        Private f32* %127 = OpAccessChain %9 %23 
                                 f32 %128 = OpLoad %127 
                        Private f32* %129 = OpAccessChain %28 %23 
                                 f32 %130 = OpLoad %129 
                                 f32 %131 = OpFMul %128 %130 
                        Private f32* %132 = OpAccessChain %117 %17 
                                              OpStore %132 %131 
                               f32_2 %133 = OpLoad vs_TEXCOORD0 
                               f32_2 %134 = OpVectorShuffle %133 %133 1 1 
                               f32_4 %135 = OpLoad %117 
                               f32_4 %136 = OpVectorShuffle %135 %134 0 4 2 5 
                                              OpStore %117 %136 
                 read_only Texture2D %139 = OpLoad %138 
                             sampler %141 = OpLoad %140 
          read_only Texture2DSampled %142 = OpSampledImage %139 %141 
                               f32_4 %143 = OpLoad %117 
                               f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                               f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                                 f32 %146 = OpCompositeExtract %145 3 
                                              OpStore %137 %146 
                 read_only Texture2D %148 = OpLoad %138 
                             sampler %149 = OpLoad %140 
          read_only Texture2DSampled %150 = OpSampledImage %148 %149 
                               f32_4 %151 = OpLoad %117 
                               f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                               f32_4 %153 = OpImageSampleImplicitLod %150 %152 
                                 f32 %154 = OpCompositeExtract %153 3 
                                              OpStore %147 %154 
                                 f32 %156 = OpLoad %147 
                               f32_2 %157 = OpCompositeConstruct %156 %156 
                               f32_2 %161 = OpFMul %157 %160 
                                              OpStore %155 %161 
                                 f32 %162 = OpLoad %48 
                                 f32 %164 = OpFMul %162 %163 
                        Private f32* %165 = OpAccessChain %155 %23 
                                 f32 %166 = OpLoad %165 
                                 f32 %167 = OpFNegate %166 
                                 f32 %168 = OpFAdd %164 %167 
                        Private f32* %169 = OpAccessChain %155 %23 
                                              OpStore %169 %168 
                                 f32 %171 = OpLoad %48 
                                 f32 %172 = OpFMul %171 %163 
                        Private f32* %174 = OpAccessChain %155 %173 
                                 f32 %175 = OpLoad %174 
                                 f32 %176 = OpFAdd %172 %175 
                                              OpStore %170 %176 
                                 f32 %179 = OpLoad %170 
                                 f32 %181 = OpFAdd %179 %180 
                         Output f32* %183 = OpAccessChain %178 %17 
                                              OpStore %183 %181 
                                 f32 %184 = OpLoad %137 
                                 f32 %185 = OpFNegate %184 
                                 f32 %187 = OpFMul %185 %186 
                        Private f32* %188 = OpAccessChain %155 %23 
                                 f32 %189 = OpLoad %188 
                                 f32 %190 = OpFAdd %187 %189 
                        Private f32* %191 = OpAccessChain %155 %23 
                                              OpStore %191 %190 
                                 f32 %192 = OpLoad %137 
                                 f32 %194 = OpFMul %192 %193 
                                              OpStore %170 %194 
                                 f32 %195 = OpLoad %48 
                                 f32 %196 = OpFMul %195 %163 
                                 f32 %197 = OpLoad %170 
                                 f32 %198 = OpFAdd %196 %197 
                        Private f32* %199 = OpAccessChain %155 %173 
                                              OpStore %199 %198 
                               f32_2 %200 = OpLoad %155 
                               f32_2 %201 = OpVectorShuffle %200 %200 1 0 
                               f32_2 %205 = OpFAdd %201 %204 
                               f32_4 %206 = OpLoad %178 
                               f32_4 %207 = OpVectorShuffle %206 %205 4 5 2 3 
                                              OpStore %178 %207 
                               f32_2 %208 = OpLoad vs_TEXCOORD0 
                               f32_2 %210 = OpFMul %208 %209 
                               f32_2 %212 = OpFAdd %210 %211 
                                              OpStore %9 %212 
                 read_only Texture2D %213 = OpLoad %51 
                             sampler %214 = OpLoad %55 
          read_only Texture2DSampled %215 = OpSampledImage %213 %214 
                               f32_2 %216 = OpLoad %9 
                               f32_4 %217 = OpImageSampleImplicitLod %215 %216 
                                 f32 %218 = OpCompositeExtract %217 3 
                                              OpStore %137 %218 
                                 f32 %219 = OpLoad %137 
                                 f32 %221 = OpFAdd %219 %220 
                        Private f32* %222 = OpAccessChain %155 %23 
                                              OpStore %222 %221 
                        Private f32* %223 = OpAccessChain %155 %23 
                                 f32 %224 = OpLoad %223 
                                 f32 %225 = OpFMul %224 %163 
                         Output f32* %226 = OpAccessChain %178 %62 
                                              OpStore %226 %225 
                                              OpReturn
                                              OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "Flip_NV12_To_RGB1"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 495367
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec2 u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.xy = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_2.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_0) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_2.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec2 u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.xy = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_2.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_0) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_2.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec2 u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.xy = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_2.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_0) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_2.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %67 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %30 RelaxedPrecision 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 Location 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                                     %28 = OpTypePointer Private %19 
                      Private f32_2* %29 = OpVariable Private 
UniformConstant read_only Texture2D* %30 = OpVariable UniformConstant 
            UniformConstant sampler* %32 = OpVariable UniformConstant 
                                     %38 = OpTypeVector %6 3 
                                     %39 = OpTypePointer Private %38 
                      Private f32_3* %40 = OpVariable Private 
                                 f32 %43 = OpConstant 3.674022E-40 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %43 %44 %45 
                        Private f32* %48 = OpVariable Private 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 1 
                               f32_2 %59 = OpConstantComposite %50 %50 
                                     %66 = OpTypePointer Output %23 
                       Output f32_4* %67 = OpVariable Output 
                                 f32 %70 = OpConstant 3.674022E-40 
                                 f32 %71 = OpConstant 3.674022E-40 
                               f32_2 %72 = OpConstantComposite %70 %71 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 u32 %83 = OpConstant 0 
                                 f32 %87 = OpConstant 3.674022E-40 
                                     %89 = OpTypePointer Output %6 
                                 f32 %91 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                 read_only Texture2D %31 = OpLoad %30 
                             sampler %33 = OpLoad %32 
          read_only Texture2DSampled %34 = OpSampledImage %31 %33 
                               f32_2 %35 = OpLoad vs_TEXCOORD0 
                               f32_4 %36 = OpImageSampleImplicitLod %34 %35 
                               f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                             OpStore %29 %37 
                               f32_2 %41 = OpLoad %29 
                               f32_3 %42 = OpVectorShuffle %41 %41 1 0 0 
                               f32_3 %47 = OpFMul %42 %46 
                                             OpStore %40 %47 
                                 f32 %49 = OpLoad %8 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %40 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                                             OpStore %48 %56 
                                 f32 %57 = OpLoad %8 
                               f32_2 %58 = OpCompositeConstruct %57 %57 
                               f32_2 %60 = OpFMul %58 %59 
                               f32_3 %61 = OpLoad %40 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 2 
                               f32_2 %63 = OpFAdd %60 %62 
                               f32_3 %64 = OpLoad %40 
                               f32_3 %65 = OpVectorShuffle %64 %63 3 1 4 
                                             OpStore %40 %65 
                               f32_3 %68 = OpLoad %40 
                               f32_2 %69 = OpVectorShuffle %68 %68 0 2 
                               f32_2 %73 = OpFAdd %69 %72 
                               f32_4 %74 = OpLoad %67 
                               f32_4 %75 = OpVectorShuffle %74 %73 4 1 5 3 
                                             OpStore %67 %75 
                        Private f32* %76 = OpAccessChain %29 %52 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %80 = OpFMul %78 %79 
                                 f32 %81 = OpLoad %48 
                                 f32 %82 = OpFAdd %80 %81 
                        Private f32* %84 = OpAccessChain %40 %83 
                                             OpStore %84 %82 
                        Private f32* %85 = OpAccessChain %40 %83 
                                 f32 %86 = OpLoad %85 
                                 f32 %88 = OpFAdd %86 %87 
                         Output f32* %90 = OpAccessChain %67 %52 
                                             OpStore %90 %88 
                         Output f32* %92 = OpAccessChain %67 %26 
                                             OpStore %92 %91 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %67 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %30 RelaxedPrecision 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 Location 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                                     %28 = OpTypePointer Private %19 
                      Private f32_2* %29 = OpVariable Private 
UniformConstant read_only Texture2D* %30 = OpVariable UniformConstant 
            UniformConstant sampler* %32 = OpVariable UniformConstant 
                                     %38 = OpTypeVector %6 3 
                                     %39 = OpTypePointer Private %38 
                      Private f32_3* %40 = OpVariable Private 
                                 f32 %43 = OpConstant 3.674022E-40 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %43 %44 %45 
                        Private f32* %48 = OpVariable Private 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 1 
                               f32_2 %59 = OpConstantComposite %50 %50 
                                     %66 = OpTypePointer Output %23 
                       Output f32_4* %67 = OpVariable Output 
                                 f32 %70 = OpConstant 3.674022E-40 
                                 f32 %71 = OpConstant 3.674022E-40 
                               f32_2 %72 = OpConstantComposite %70 %71 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 u32 %83 = OpConstant 0 
                                 f32 %87 = OpConstant 3.674022E-40 
                                     %89 = OpTypePointer Output %6 
                                 f32 %91 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                 read_only Texture2D %31 = OpLoad %30 
                             sampler %33 = OpLoad %32 
          read_only Texture2DSampled %34 = OpSampledImage %31 %33 
                               f32_2 %35 = OpLoad vs_TEXCOORD0 
                               f32_4 %36 = OpImageSampleImplicitLod %34 %35 
                               f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                             OpStore %29 %37 
                               f32_2 %41 = OpLoad %29 
                               f32_3 %42 = OpVectorShuffle %41 %41 1 0 0 
                               f32_3 %47 = OpFMul %42 %46 
                                             OpStore %40 %47 
                                 f32 %49 = OpLoad %8 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %40 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                                             OpStore %48 %56 
                                 f32 %57 = OpLoad %8 
                               f32_2 %58 = OpCompositeConstruct %57 %57 
                               f32_2 %60 = OpFMul %58 %59 
                               f32_3 %61 = OpLoad %40 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 2 
                               f32_2 %63 = OpFAdd %60 %62 
                               f32_3 %64 = OpLoad %40 
                               f32_3 %65 = OpVectorShuffle %64 %63 3 1 4 
                                             OpStore %40 %65 
                               f32_3 %68 = OpLoad %40 
                               f32_2 %69 = OpVectorShuffle %68 %68 0 2 
                               f32_2 %73 = OpFAdd %69 %72 
                               f32_4 %74 = OpLoad %67 
                               f32_4 %75 = OpVectorShuffle %74 %73 4 1 5 3 
                                             OpStore %67 %75 
                        Private f32* %76 = OpAccessChain %29 %52 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %80 = OpFMul %78 %79 
                                 f32 %81 = OpLoad %48 
                                 f32 %82 = OpFAdd %80 %81 
                        Private f32* %84 = OpAccessChain %40 %83 
                                             OpStore %84 %82 
                        Private f32* %85 = OpAccessChain %40 %83 
                                 f32 %86 = OpLoad %85 
                                 f32 %88 = OpFAdd %86 %87 
                         Output f32* %90 = OpAccessChain %67 %52 
                                             OpStore %90 %88 
                         Output f32* %92 = OpAccessChain %67 %26 
                                             OpStore %92 %91 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %67 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %30 RelaxedPrecision 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 Location 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                                     %28 = OpTypePointer Private %19 
                      Private f32_2* %29 = OpVariable Private 
UniformConstant read_only Texture2D* %30 = OpVariable UniformConstant 
            UniformConstant sampler* %32 = OpVariable UniformConstant 
                                     %38 = OpTypeVector %6 3 
                                     %39 = OpTypePointer Private %38 
                      Private f32_3* %40 = OpVariable Private 
                                 f32 %43 = OpConstant 3.674022E-40 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %43 %44 %45 
                        Private f32* %48 = OpVariable Private 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 1 
                               f32_2 %59 = OpConstantComposite %50 %50 
                                     %66 = OpTypePointer Output %23 
                       Output f32_4* %67 = OpVariable Output 
                                 f32 %70 = OpConstant 3.674022E-40 
                                 f32 %71 = OpConstant 3.674022E-40 
                               f32_2 %72 = OpConstantComposite %70 %71 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 u32 %83 = OpConstant 0 
                                 f32 %87 = OpConstant 3.674022E-40 
                                     %89 = OpTypePointer Output %6 
                                 f32 %91 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                 read_only Texture2D %31 = OpLoad %30 
                             sampler %33 = OpLoad %32 
          read_only Texture2DSampled %34 = OpSampledImage %31 %33 
                               f32_2 %35 = OpLoad vs_TEXCOORD0 
                               f32_4 %36 = OpImageSampleImplicitLod %34 %35 
                               f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                             OpStore %29 %37 
                               f32_2 %41 = OpLoad %29 
                               f32_3 %42 = OpVectorShuffle %41 %41 1 0 0 
                               f32_3 %47 = OpFMul %42 %46 
                                             OpStore %40 %47 
                                 f32 %49 = OpLoad %8 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %40 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                                             OpStore %48 %56 
                                 f32 %57 = OpLoad %8 
                               f32_2 %58 = OpCompositeConstruct %57 %57 
                               f32_2 %60 = OpFMul %58 %59 
                               f32_3 %61 = OpLoad %40 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 2 
                               f32_2 %63 = OpFAdd %60 %62 
                               f32_3 %64 = OpLoad %40 
                               f32_3 %65 = OpVectorShuffle %64 %63 3 1 4 
                                             OpStore %40 %65 
                               f32_3 %68 = OpLoad %40 
                               f32_2 %69 = OpVectorShuffle %68 %68 0 2 
                               f32_2 %73 = OpFAdd %69 %72 
                               f32_4 %74 = OpLoad %67 
                               f32_4 %75 = OpVectorShuffle %74 %73 4 1 5 3 
                                             OpStore %67 %75 
                        Private f32* %76 = OpAccessChain %29 %52 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %80 = OpFMul %78 %79 
                                 f32 %81 = OpLoad %48 
                                 f32 %82 = OpFAdd %80 %81 
                        Private f32* %84 = OpAccessChain %40 %83 
                                             OpStore %84 %82 
                        Private f32* %85 = OpAccessChain %40 %83 
                                 f32 %86 = OpLoad %85 
                                 f32 %88 = OpFAdd %86 %87 
                         Output f32* %90 = OpAccessChain %67 %52 
                                             OpStore %90 %88 
                         Output f32* %92 = OpAccessChain %67 %26 
                                             OpStore %92 %91 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec2 u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.xy = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_2.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_0) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_2.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec2 u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.xy = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_2.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_0) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_2.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec2 u_xlat16_2;
mediump float u_xlat16_3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_2.xy = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_2.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_0 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_0) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_2.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %67 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %30 RelaxedPrecision 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 Location 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                                     %28 = OpTypePointer Private %19 
                      Private f32_2* %29 = OpVariable Private 
UniformConstant read_only Texture2D* %30 = OpVariable UniformConstant 
            UniformConstant sampler* %32 = OpVariable UniformConstant 
                                     %38 = OpTypeVector %6 3 
                                     %39 = OpTypePointer Private %38 
                      Private f32_3* %40 = OpVariable Private 
                                 f32 %43 = OpConstant 3.674022E-40 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %43 %44 %45 
                        Private f32* %48 = OpVariable Private 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 1 
                               f32_2 %59 = OpConstantComposite %50 %50 
                                     %66 = OpTypePointer Output %23 
                       Output f32_4* %67 = OpVariable Output 
                                 f32 %70 = OpConstant 3.674022E-40 
                                 f32 %71 = OpConstant 3.674022E-40 
                               f32_2 %72 = OpConstantComposite %70 %71 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 u32 %83 = OpConstant 0 
                                 f32 %87 = OpConstant 3.674022E-40 
                                     %89 = OpTypePointer Output %6 
                                 f32 %91 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                 read_only Texture2D %31 = OpLoad %30 
                             sampler %33 = OpLoad %32 
          read_only Texture2DSampled %34 = OpSampledImage %31 %33 
                               f32_2 %35 = OpLoad vs_TEXCOORD0 
                               f32_4 %36 = OpImageSampleImplicitLod %34 %35 
                               f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                             OpStore %29 %37 
                               f32_2 %41 = OpLoad %29 
                               f32_3 %42 = OpVectorShuffle %41 %41 1 0 0 
                               f32_3 %47 = OpFMul %42 %46 
                                             OpStore %40 %47 
                                 f32 %49 = OpLoad %8 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %40 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                                             OpStore %48 %56 
                                 f32 %57 = OpLoad %8 
                               f32_2 %58 = OpCompositeConstruct %57 %57 
                               f32_2 %60 = OpFMul %58 %59 
                               f32_3 %61 = OpLoad %40 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 2 
                               f32_2 %63 = OpFAdd %60 %62 
                               f32_3 %64 = OpLoad %40 
                               f32_3 %65 = OpVectorShuffle %64 %63 3 1 4 
                                             OpStore %40 %65 
                               f32_3 %68 = OpLoad %40 
                               f32_2 %69 = OpVectorShuffle %68 %68 0 2 
                               f32_2 %73 = OpFAdd %69 %72 
                               f32_4 %74 = OpLoad %67 
                               f32_4 %75 = OpVectorShuffle %74 %73 4 1 5 3 
                                             OpStore %67 %75 
                        Private f32* %76 = OpAccessChain %29 %52 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %80 = OpFMul %78 %79 
                                 f32 %81 = OpLoad %48 
                                 f32 %82 = OpFAdd %80 %81 
                        Private f32* %84 = OpAccessChain %40 %83 
                                             OpStore %84 %82 
                        Private f32* %85 = OpAccessChain %40 %83 
                                 f32 %86 = OpLoad %85 
                                 f32 %88 = OpFAdd %86 %87 
                         Output f32* %90 = OpAccessChain %67 %52 
                                             OpStore %90 %88 
                         Output f32* %92 = OpAccessChain %67 %26 
                                             OpStore %92 %91 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %67 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %30 RelaxedPrecision 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 Location 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                                     %28 = OpTypePointer Private %19 
                      Private f32_2* %29 = OpVariable Private 
UniformConstant read_only Texture2D* %30 = OpVariable UniformConstant 
            UniformConstant sampler* %32 = OpVariable UniformConstant 
                                     %38 = OpTypeVector %6 3 
                                     %39 = OpTypePointer Private %38 
                      Private f32_3* %40 = OpVariable Private 
                                 f32 %43 = OpConstant 3.674022E-40 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %43 %44 %45 
                        Private f32* %48 = OpVariable Private 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 1 
                               f32_2 %59 = OpConstantComposite %50 %50 
                                     %66 = OpTypePointer Output %23 
                       Output f32_4* %67 = OpVariable Output 
                                 f32 %70 = OpConstant 3.674022E-40 
                                 f32 %71 = OpConstant 3.674022E-40 
                               f32_2 %72 = OpConstantComposite %70 %71 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 u32 %83 = OpConstant 0 
                                 f32 %87 = OpConstant 3.674022E-40 
                                     %89 = OpTypePointer Output %6 
                                 f32 %91 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                 read_only Texture2D %31 = OpLoad %30 
                             sampler %33 = OpLoad %32 
          read_only Texture2DSampled %34 = OpSampledImage %31 %33 
                               f32_2 %35 = OpLoad vs_TEXCOORD0 
                               f32_4 %36 = OpImageSampleImplicitLod %34 %35 
                               f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                             OpStore %29 %37 
                               f32_2 %41 = OpLoad %29 
                               f32_3 %42 = OpVectorShuffle %41 %41 1 0 0 
                               f32_3 %47 = OpFMul %42 %46 
                                             OpStore %40 %47 
                                 f32 %49 = OpLoad %8 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %40 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                                             OpStore %48 %56 
                                 f32 %57 = OpLoad %8 
                               f32_2 %58 = OpCompositeConstruct %57 %57 
                               f32_2 %60 = OpFMul %58 %59 
                               f32_3 %61 = OpLoad %40 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 2 
                               f32_2 %63 = OpFAdd %60 %62 
                               f32_3 %64 = OpLoad %40 
                               f32_3 %65 = OpVectorShuffle %64 %63 3 1 4 
                                             OpStore %40 %65 
                               f32_3 %68 = OpLoad %40 
                               f32_2 %69 = OpVectorShuffle %68 %68 0 2 
                               f32_2 %73 = OpFAdd %69 %72 
                               f32_4 %74 = OpLoad %67 
                               f32_4 %75 = OpVectorShuffle %74 %73 4 1 5 3 
                                             OpStore %67 %75 
                        Private f32* %76 = OpAccessChain %29 %52 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %80 = OpFMul %78 %79 
                                 f32 %81 = OpLoad %48 
                                 f32 %82 = OpFAdd %80 %81 
                        Private f32* %84 = OpAccessChain %40 %83 
                                             OpStore %84 %82 
                        Private f32* %85 = OpAccessChain %40 %83 
                                 f32 %86 = OpLoad %85 
                                 f32 %88 = OpFAdd %86 %87 
                         Output f32* %90 = OpAccessChain %67 %52 
                                             OpStore %90 %88 
                         Output f32* %92 = OpAccessChain %67 %26 
                                             OpStore %92 %91 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %67 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpDecorate %30 RelaxedPrecision 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %37 RelaxedPrecision 
                                             OpDecorate %40 RelaxedPrecision 
                                             OpDecorate %41 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %47 RelaxedPrecision 
                                             OpDecorate %48 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %54 RelaxedPrecision 
                                             OpDecorate %55 RelaxedPrecision 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %57 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %61 RelaxedPrecision 
                                             OpDecorate %62 RelaxedPrecision 
                                             OpDecorate %63 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 Location 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %69 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %77 RelaxedPrecision 
                                             OpDecorate %78 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                                     %28 = OpTypePointer Private %19 
                      Private f32_2* %29 = OpVariable Private 
UniformConstant read_only Texture2D* %30 = OpVariable UniformConstant 
            UniformConstant sampler* %32 = OpVariable UniformConstant 
                                     %38 = OpTypeVector %6 3 
                                     %39 = OpTypePointer Private %38 
                      Private f32_3* %40 = OpVariable Private 
                                 f32 %43 = OpConstant 3.674022E-40 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 f32 %45 = OpConstant 3.674022E-40 
                               f32_3 %46 = OpConstantComposite %43 %44 %45 
                        Private f32* %48 = OpVariable Private 
                                 f32 %50 = OpConstant 3.674022E-40 
                                 u32 %52 = OpConstant 1 
                               f32_2 %59 = OpConstantComposite %50 %50 
                                     %66 = OpTypePointer Output %23 
                       Output f32_4* %67 = OpVariable Output 
                                 f32 %70 = OpConstant 3.674022E-40 
                                 f32 %71 = OpConstant 3.674022E-40 
                               f32_2 %72 = OpConstantComposite %70 %71 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 u32 %83 = OpConstant 0 
                                 f32 %87 = OpConstant 3.674022E-40 
                                     %89 = OpTypePointer Output %6 
                                 f32 %91 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                 read_only Texture2D %31 = OpLoad %30 
                             sampler %33 = OpLoad %32 
          read_only Texture2DSampled %34 = OpSampledImage %31 %33 
                               f32_2 %35 = OpLoad vs_TEXCOORD0 
                               f32_4 %36 = OpImageSampleImplicitLod %34 %35 
                               f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                             OpStore %29 %37 
                               f32_2 %41 = OpLoad %29 
                               f32_3 %42 = OpVectorShuffle %41 %41 1 0 0 
                               f32_3 %47 = OpFMul %42 %46 
                                             OpStore %40 %47 
                                 f32 %49 = OpLoad %8 
                                 f32 %51 = OpFMul %49 %50 
                        Private f32* %53 = OpAccessChain %40 %52 
                                 f32 %54 = OpLoad %53 
                                 f32 %55 = OpFNegate %54 
                                 f32 %56 = OpFAdd %51 %55 
                                             OpStore %48 %56 
                                 f32 %57 = OpLoad %8 
                               f32_2 %58 = OpCompositeConstruct %57 %57 
                               f32_2 %60 = OpFMul %58 %59 
                               f32_3 %61 = OpLoad %40 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 2 
                               f32_2 %63 = OpFAdd %60 %62 
                               f32_3 %64 = OpLoad %40 
                               f32_3 %65 = OpVectorShuffle %64 %63 3 1 4 
                                             OpStore %40 %65 
                               f32_3 %68 = OpLoad %40 
                               f32_2 %69 = OpVectorShuffle %68 %68 0 2 
                               f32_2 %73 = OpFAdd %69 %72 
                               f32_4 %74 = OpLoad %67 
                               f32_4 %75 = OpVectorShuffle %74 %73 4 1 5 3 
                                             OpStore %67 %75 
                        Private f32* %76 = OpAccessChain %29 %52 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %80 = OpFMul %78 %79 
                                 f32 %81 = OpLoad %48 
                                 f32 %82 = OpFAdd %80 %81 
                        Private f32* %84 = OpAccessChain %40 %83 
                                             OpStore %84 %82 
                        Private f32* %85 = OpAccessChain %40 %83 
                                 f32 %86 = OpLoad %85 
                                 f32 %88 = OpFAdd %86 %87 
                         Output f32* %90 = OpAccessChain %67 %52 
                                             OpStore %90 %88 
                         Output f32* %92 = OpAccessChain %67 %26 
                                             OpStore %92 %91 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "Flip_NV12_To_RGBA"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 556898
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier00 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier01 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
SubProgram "vulkan hw_tier02 " {
Local Keywords { "ADJUST_TO_LINEARSPACE" }
""
}
}
}
 Pass {
  Name "Flip_P010_To_RGB1"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 628868
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = texture(_MainTex, vs_TEXCOORD0.xy).x;
    u_xlat0.yz = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(64.0615845, 64.0615845, 64.0615845) + vec3(-0.0625, -0.5, -0.5);
    u_xlat1.x = dot(vec2(1.16439998, 1.79270005), u_xlat0.xz);
    u_xlat1.y = dot(vec3(1.16439998, -0.213300005, -0.532899976), u_xlat0.xyz);
    u_xlat1.z = dot(vec2(1.16439998, 2.11240005), u_xlat0.xy);
    u_xlat1.w = 1.0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = texture(_MainTex, vs_TEXCOORD0.xy).x;
    u_xlat0.yz = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(64.0615845, 64.0615845, 64.0615845) + vec3(-0.0625, -0.5, -0.5);
    u_xlat1.x = dot(vec2(1.16439998, 1.79270005), u_xlat0.xz);
    u_xlat1.y = dot(vec3(1.16439998, -0.213300005, -0.532899976), u_xlat0.xyz);
    u_xlat1.z = dot(vec2(1.16439998, 2.11240005), u_xlat0.xy);
    u_xlat1.w = 1.0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = texture(_MainTex, vs_TEXCOORD0.xy).x;
    u_xlat0.yz = texture(_SecondTex, vs_TEXCOORD0.xy).xy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(64.0615845, 64.0615845, 64.0615845) + vec3(-0.0625, -0.5, -0.5);
    u_xlat1.x = dot(vec2(1.16439998, 1.79270005), u_xlat0.xz);
    u_xlat1.y = dot(vec3(1.16439998, -0.213300005, -0.532899976), u_xlat0.xyz);
    u_xlat1.z = dot(vec2(1.16439998, 2.11240005), u_xlat0.xy);
    u_xlat1.w = 1.0;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 79
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %76 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %76 Location 76 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 0 
                                     %29 = OpTypePointer Private %6 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
            UniformConstant sampler* %33 = OpVariable UniformConstant 
                                 f32 %42 = OpConstant 3.674022E-40 
                               f32_3 %43 = OpConstantComposite %42 %42 %42 
                                 f32 %45 = OpConstant 3.674022E-40 
                                 f32 %46 = OpConstant 3.674022E-40 
                               f32_3 %47 = OpConstantComposite %45 %46 %46 
                                     %49 = OpTypePointer Private %24 
                      Private f32_4* %50 = OpVariable Private 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                               f32_2 %53 = OpConstantComposite %51 %52 
                                 f32 %58 = OpConstant 3.674022E-40 
                                 f32 %59 = OpConstant 3.674022E-40 
                               f32_3 %60 = OpConstantComposite %51 %58 %59 
                                 u32 %63 = OpConstant 1 
                                 f32 %65 = OpConstant 3.674022E-40 
                               f32_2 %66 = OpConstantComposite %51 %65 
                                 u32 %70 = OpConstant 2 
                                 f32 %72 = OpConstant 3.674022E-40 
                                 u32 %73 = OpConstant 3 
                                     %75 = OpTypePointer Output %24 
                       Output f32_4* %76 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32 %28 = OpCompositeExtract %25 0 
                        Private f32* %30 = OpAccessChain %9 %27 
                                             OpStore %30 %28 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %34 = OpLoad %33 
          read_only Texture2DSampled %35 = OpSampledImage %32 %34 
                               f32_2 %36 = OpLoad vs_TEXCOORD0 
                               f32_4 %37 = OpImageSampleImplicitLod %35 %36 
                               f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               f32_3 %39 = OpLoad %9 
                               f32_3 %40 = OpVectorShuffle %39 %38 0 3 4 
                                             OpStore %9 %40 
                               f32_3 %41 = OpLoad %9 
                               f32_3 %44 = OpFMul %41 %43 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                               f32_3 %54 = OpLoad %9 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 2 
                                 f32 %56 = OpDot %53 %55 
                        Private f32* %57 = OpAccessChain %50 %27 
                                             OpStore %57 %56 
                               f32_3 %61 = OpLoad %9 
                                 f32 %62 = OpDot %60 %61 
                        Private f32* %64 = OpAccessChain %50 %63 
                                             OpStore %64 %62 
                               f32_3 %67 = OpLoad %9 
                               f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                 f32 %69 = OpDot %66 %68 
                        Private f32* %71 = OpAccessChain %50 %70 
                                             OpStore %71 %69 
                        Private f32* %74 = OpAccessChain %50 %73 
                                             OpStore %74 %72 
                               f32_4 %77 = OpLoad %50 
                                             OpStore %76 %77 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 79
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %76 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %76 Location 76 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 0 
                                     %29 = OpTypePointer Private %6 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
            UniformConstant sampler* %33 = OpVariable UniformConstant 
                                 f32 %42 = OpConstant 3.674022E-40 
                               f32_3 %43 = OpConstantComposite %42 %42 %42 
                                 f32 %45 = OpConstant 3.674022E-40 
                                 f32 %46 = OpConstant 3.674022E-40 
                               f32_3 %47 = OpConstantComposite %45 %46 %46 
                                     %49 = OpTypePointer Private %24 
                      Private f32_4* %50 = OpVariable Private 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                               f32_2 %53 = OpConstantComposite %51 %52 
                                 f32 %58 = OpConstant 3.674022E-40 
                                 f32 %59 = OpConstant 3.674022E-40 
                               f32_3 %60 = OpConstantComposite %51 %58 %59 
                                 u32 %63 = OpConstant 1 
                                 f32 %65 = OpConstant 3.674022E-40 
                               f32_2 %66 = OpConstantComposite %51 %65 
                                 u32 %70 = OpConstant 2 
                                 f32 %72 = OpConstant 3.674022E-40 
                                 u32 %73 = OpConstant 3 
                                     %75 = OpTypePointer Output %24 
                       Output f32_4* %76 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32 %28 = OpCompositeExtract %25 0 
                        Private f32* %30 = OpAccessChain %9 %27 
                                             OpStore %30 %28 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %34 = OpLoad %33 
          read_only Texture2DSampled %35 = OpSampledImage %32 %34 
                               f32_2 %36 = OpLoad vs_TEXCOORD0 
                               f32_4 %37 = OpImageSampleImplicitLod %35 %36 
                               f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               f32_3 %39 = OpLoad %9 
                               f32_3 %40 = OpVectorShuffle %39 %38 0 3 4 
                                             OpStore %9 %40 
                               f32_3 %41 = OpLoad %9 
                               f32_3 %44 = OpFMul %41 %43 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                               f32_3 %54 = OpLoad %9 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 2 
                                 f32 %56 = OpDot %53 %55 
                        Private f32* %57 = OpAccessChain %50 %27 
                                             OpStore %57 %56 
                               f32_3 %61 = OpLoad %9 
                                 f32 %62 = OpDot %60 %61 
                        Private f32* %64 = OpAccessChain %50 %63 
                                             OpStore %64 %62 
                               f32_3 %67 = OpLoad %9 
                               f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                 f32 %69 = OpDot %66 %68 
                        Private f32* %71 = OpAccessChain %50 %70 
                                             OpStore %71 %69 
                        Private f32* %74 = OpAccessChain %50 %73 
                                             OpStore %74 %72 
                               f32_4 %77 = OpLoad %50 
                                             OpStore %76 %77 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 79
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %76 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %13 RelaxedPrecision 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %17 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %31 RelaxedPrecision 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %32 RelaxedPrecision 
                                             OpDecorate %33 RelaxedPrecision 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %34 RelaxedPrecision 
                                             OpDecorate %76 RelaxedPrecision 
                                             OpDecorate %76 Location 76 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 0 
                                     %29 = OpTypePointer Private %6 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
            UniformConstant sampler* %33 = OpVariable UniformConstant 
                                 f32 %42 = OpConstant 3.674022E-40 
                               f32_3 %43 = OpConstantComposite %42 %42 %42 
                                 f32 %45 = OpConstant 3.674022E-40 
                                 f32 %46 = OpConstant 3.674022E-40 
                               f32_3 %47 = OpConstantComposite %45 %46 %46 
                                     %49 = OpTypePointer Private %24 
                      Private f32_4* %50 = OpVariable Private 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                               f32_2 %53 = OpConstantComposite %51 %52 
                                 f32 %58 = OpConstant 3.674022E-40 
                                 f32 %59 = OpConstant 3.674022E-40 
                               f32_3 %60 = OpConstantComposite %51 %58 %59 
                                 u32 %63 = OpConstant 1 
                                 f32 %65 = OpConstant 3.674022E-40 
                               f32_2 %66 = OpConstantComposite %51 %65 
                                 u32 %70 = OpConstant 2 
                                 f32 %72 = OpConstant 3.674022E-40 
                                 u32 %73 = OpConstant 3 
                                     %75 = OpTypePointer Output %24 
                       Output f32_4* %76 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32 %28 = OpCompositeExtract %25 0 
                        Private f32* %30 = OpAccessChain %9 %27 
                                             OpStore %30 %28 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %34 = OpLoad %33 
          read_only Texture2DSampled %35 = OpSampledImage %32 %34 
                               f32_2 %36 = OpLoad vs_TEXCOORD0 
                               f32_4 %37 = OpImageSampleImplicitLod %35 %36 
                               f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               f32_3 %39 = OpLoad %9 
                               f32_3 %40 = OpVectorShuffle %39 %38 0 3 4 
                                             OpStore %9 %40 
                               f32_3 %41 = OpLoad %9 
                               f32_3 %44 = OpFMul %41 %43 
                               f32_3 %48 = OpFAdd %44 %47 
                                             OpStore %9 %48 
                               f32_3 %54 = OpLoad %9 
                               f32_2 %55 = OpVectorShuffle %54 %54 0 2 
                                 f32 %56 = OpDot %53 %55 
                        Private f32* %57 = OpAccessChain %50 %27 
                                             OpStore %57 %56 
                               f32_3 %61 = OpLoad %9 
                                 f32 %62 = OpDot %60 %61 
                        Private f32* %64 = OpAccessChain %50 %63 
                                             OpStore %64 %62 
                               f32_3 %67 = OpLoad %9 
                               f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                 f32 %69 = OpDot %66 %68 
                        Private f32* %71 = OpAccessChain %50 %70 
                                             OpStore %71 %69 
                        Private f32* %74 = OpAccessChain %50 %73 
                                             OpStore %74 %72 
                               f32_4 %77 = OpLoad %50 
                                             OpStore %76 %77 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
}
}
 Pass {
  Name "Flip_P010_To_RGBA"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 666010
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec2 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(0.5, 0.0);
    u_xlat16_0.x = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_1.x = u_xlat16_0.x + -0.0627449974;
    SV_Target0.w = u_xlat16_1.x * 1.15625;
    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(0.5, 1.0);
    u_xlat16_4 = texture(_MainTex, u_xlat0.xy).w;
    u_xlat16_0.xy = texture(_SecondTex, u_xlat0.xy).xy;
    u_xlat16_1.xyz = u_xlat16_0.yxx * vec3(1.59375, 0.390625, 1.984375);
    u_xlat16_3 = u_xlat16_4 * 1.15625 + (-u_xlat16_1.y);
    u_xlat16_1.xz = vec2(u_xlat16_4) * vec2(1.15625, 1.15625) + u_xlat16_1.xz;
    SV_Target0.xz = u_xlat16_1.xz + vec2(-0.872539997, -1.06861997);
    u_xlat16_1.x = (-u_xlat16_0.y) * 0.8125 + u_xlat16_3;
    SV_Target0.y = u_xlat16_1.x + 0.531369984;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 113
; Schema: 0
                                                     OpCapability Shader 
                                              %1 = OpExtInstImport "GLSL.std.450" 
                                                     OpMemoryModel Logical GLSL450 
                                                     OpEntryPoint Vertex %4 "main" %11 %72 %84 %96 
                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                     OpDecorate %11 Location 11 
                                                     OpDecorate %16 ArrayStride 16 
                                                     OpDecorate %17 ArrayStride 17 
                                                     OpMemberDecorate %18 0 Offset 18 
                                                     OpMemberDecorate %18 1 Offset 18 
                                                     OpMemberDecorate %18 2 Offset 18 
                                                     OpDecorate %18 Block 
                                                     OpDecorate %20 DescriptorSet 20 
                                                     OpDecorate %20 Binding 20 
                                                     OpMemberDecorate %70 0 BuiltIn 70 
                                                     OpMemberDecorate %70 1 BuiltIn 70 
                                                     OpMemberDecorate %70 2 BuiltIn 70 
                                                     OpDecorate %70 Block 
                                                     OpDecorate %84 Location 84 
                                                     OpDecorate vs_TEXCOORD0 Location 96 
                                              %2 = OpTypeVoid 
                                              %3 = OpTypeFunction %2 
                                              %6 = OpTypeFloat 32 
                                              %7 = OpTypeVector %6 4 
                                              %8 = OpTypePointer Private %7 
                               Private f32_4* %9 = OpVariable Private 
                                             %10 = OpTypePointer Input %7 
                                Input f32_4* %11 = OpVariable Input 
                                             %14 = OpTypeInt 32 0 
                                         u32 %15 = OpConstant 4 
                                             %16 = OpTypeArray %7 %15 
                                             %17 = OpTypeArray %7 %15 
                                             %18 = OpTypeStruct %16 %17 %7 
                                             %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                             %21 = OpTypeInt 32 1 
                                         i32 %22 = OpConstant 0 
                                         i32 %23 = OpConstant 1 
                                             %24 = OpTypePointer Uniform %7 
                                         i32 %35 = OpConstant 2 
                                         i32 %44 = OpConstant 3 
                              Private f32_4* %48 = OpVariable Private 
                                         u32 %68 = OpConstant 1 
                                             %69 = OpTypeArray %6 %68 
                                             %70 = OpTypeStruct %7 %6 %69 
                                             %71 = OpTypePointer Output %70 
        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                             %80 = OpTypePointer Output %7 
                                             %82 = OpTypeVector %6 2 
                                             %83 = OpTypePointer Input %82 
                                Input f32_2* %84 = OpVariable Input 
                                         f32 %86 = OpConstant 3.674022E-40 
                                         f32 %87 = OpConstant 3.674022E-40 
                                       f32_2 %88 = OpConstantComposite %86 %87 
                                         f32 %90 = OpConstant 3.674022E-40 
                                       f32_2 %91 = OpConstantComposite %90 %86 
                                             %95 = OpTypePointer Output %82 
                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                            %107 = OpTypePointer Output %6 
                                         void %4 = OpFunction None %3 
                                              %5 = OpLabel 
                                       f32_4 %12 = OpLoad %11 
                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                       f32_4 %26 = OpLoad %25 
                                       f32_4 %27 = OpFMul %13 %26 
                                                     OpStore %9 %27 
                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                       f32_4 %29 = OpLoad %28 
                                       f32_4 %30 = OpLoad %11 
                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                       f32_4 %32 = OpFMul %29 %31 
                                       f32_4 %33 = OpLoad %9 
                                       f32_4 %34 = OpFAdd %32 %33 
                                                     OpStore %9 %34 
                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                       f32_4 %37 = OpLoad %36 
                                       f32_4 %38 = OpLoad %11 
                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                       f32_4 %40 = OpFMul %37 %39 
                                       f32_4 %41 = OpLoad %9 
                                       f32_4 %42 = OpFAdd %40 %41 
                                                     OpStore %9 %42 
                                       f32_4 %43 = OpLoad %9 
                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                       f32_4 %46 = OpLoad %45 
                                       f32_4 %47 = OpFAdd %43 %46 
                                                     OpStore %9 %47 
                                       f32_4 %49 = OpLoad %9 
                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                       f32_4 %52 = OpLoad %51 
                                       f32_4 %53 = OpFMul %50 %52 
                                                     OpStore %48 %53 
                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                       f32_4 %55 = OpLoad %54 
                                       f32_4 %56 = OpLoad %9 
                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                       f32_4 %58 = OpFMul %55 %57 
                                       f32_4 %59 = OpLoad %48 
                                       f32_4 %60 = OpFAdd %58 %59 
                                                     OpStore %48 %60 
                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                       f32_4 %62 = OpLoad %61 
                                       f32_4 %63 = OpLoad %9 
                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                       f32_4 %65 = OpFMul %62 %64 
                                       f32_4 %66 = OpLoad %48 
                                       f32_4 %67 = OpFAdd %65 %66 
                                                     OpStore %48 %67 
                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                       f32_4 %74 = OpLoad %73 
                                       f32_4 %75 = OpLoad %9 
                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                       f32_4 %77 = OpFMul %74 %76 
                                       f32_4 %78 = OpLoad %48 
                                       f32_4 %79 = OpFAdd %77 %78 
                               Output f32_4* %81 = OpAccessChain %72 %22 
                                                     OpStore %81 %79 
                                       f32_2 %85 = OpLoad %84 
                                       f32_2 %89 = OpFMul %85 %88 
                                       f32_2 %92 = OpFAdd %89 %91 
                                       f32_4 %93 = OpLoad %9 
                                       f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 3 
                                                     OpStore %9 %94 
                                       f32_4 %97 = OpLoad %9 
                                       f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %99 = OpAccessChain %20 %35 
                                      f32_4 %100 = OpLoad %99 
                                      f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                      f32_2 %102 = OpFMul %98 %101 
                             Uniform f32_4* %103 = OpAccessChain %20 %35 
                                      f32_4 %104 = OpLoad %103 
                                      f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                      f32_2 %106 = OpFAdd %102 %105 
                                                     OpStore vs_TEXCOORD0 %106 
                                Output f32* %108 = OpAccessChain %72 %22 %68 
                                        f32 %109 = OpLoad %108 
                                        f32 %110 = OpFNegate %109 
                                Output f32* %111 = OpAccessChain %72 %22 %68 
                                                     OpStore %111 %110 
                                                     OpReturn
                                                     OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 119
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %49 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 11 
                                             OpDecorate %20 RelaxedPrecision 
                                             OpDecorate %23 RelaxedPrecision 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %24 RelaxedPrecision 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate %28 RelaxedPrecision 
                                             OpDecorate %36 RelaxedPrecision 
                                             OpDecorate %42 RelaxedPrecision 
                                             OpDecorate %44 RelaxedPrecision 
                                             OpDecorate %46 RelaxedPrecision 
                                             OpDecorate %49 RelaxedPrecision 
                                             OpDecorate %49 Location 49 
                                             OpDecorate %51 RelaxedPrecision 
                                             OpDecorate %53 RelaxedPrecision 
                                             OpDecorate %58 RelaxedPrecision 
                                             OpDecorate %59 RelaxedPrecision 
                                             OpDecorate %60 RelaxedPrecision 
                                             OpDecorate %64 RelaxedPrecision 
                                             OpDecorate %65 RelaxedPrecision 
                                             OpDecorate %65 DescriptorSet 65 
                                             OpDecorate %65 Binding 65 
                                             OpDecorate %66 RelaxedPrecision 
                                             OpDecorate %67 RelaxedPrecision 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %68 RelaxedPrecision 
                                             OpDecorate %72 RelaxedPrecision 
                                             OpDecorate %73 RelaxedPrecision 
                                             OpDecorate %74 RelaxedPrecision 
                                             OpDecorate %79 RelaxedPrecision 
                                             OpDecorate %80 RelaxedPrecision 
                                             OpDecorate %81 RelaxedPrecision 
                                             OpDecorate %82 RelaxedPrecision 
                                             OpDecorate %85 RelaxedPrecision 
                                             OpDecorate %86 RelaxedPrecision 
                                             OpDecorate %87 RelaxedPrecision 
                                             OpDecorate %88 RelaxedPrecision 
                                             OpDecorate %89 RelaxedPrecision 
                                             OpDecorate %91 RelaxedPrecision 
                                             OpDecorate %92 RelaxedPrecision 
                                             OpDecorate %93 RelaxedPrecision 
                                             OpDecorate %94 RelaxedPrecision 
                                             OpDecorate %97 RelaxedPrecision 
                                             OpDecorate %98 RelaxedPrecision 
                                             OpDecorate %102 RelaxedPrecision 
                                             OpDecorate %106 RelaxedPrecision 
                                             OpDecorate %107 RelaxedPrecision 
                                             OpDecorate %109 RelaxedPrecision 
                                             OpDecorate %110 RelaxedPrecision 
                                             OpDecorate %111 RelaxedPrecision 
                                             OpDecorate %114 RelaxedPrecision 
                                             OpDecorate %116 RelaxedPrecision 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                               f32_2 %15 = OpConstantComposite %13 %14 
                                 f32 %17 = OpConstant 3.674022E-40 
                               f32_2 %18 = OpConstantComposite %13 %17 
                      Private f32_2* %20 = OpVariable Private 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %32 = OpTypeVector %6 4 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
                                     %40 = OpTypeVector %6 3 
                                     %41 = OpTypePointer Private %40 
                      Private f32_3* %42 = OpVariable Private 
                                 f32 %45 = OpConstant 3.674022E-40 
                                     %48 = OpTypePointer Output %32 
                       Output f32_4* %49 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %54 = OpTypePointer Output %6 
                        Private f32* %58 = OpVariable Private 
UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
            UniformConstant sampler* %67 = OpVariable UniformConstant 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                               f32_3 %78 = OpConstantComposite %75 %76 %77 
                        Private f32* %80 = OpVariable Private 
                                 u32 %83 = OpConstant 1 
                               f32_2 %90 = OpConstantComposite %52 %52 
                                 f32 %99 = OpConstant 3.674022E-40 
                                f32 %100 = OpConstant 3.674022E-40 
                              f32_2 %101 = OpConstantComposite %99 %100 
                                f32 %108 = OpConstant 3.674022E-40 
                                f32 %115 = OpConstant 3.674022E-40 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %12 = OpLoad vs_TEXCOORD0 
                               f32_2 %16 = OpFMul %12 %15 
                               f32_2 %19 = OpFAdd %16 %18 
                                             OpStore %9 %19 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_2 %31 = OpLoad %9 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %31 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %20 %37 
                                             OpStore %39 %36 
                        Private f32* %43 = OpAccessChain %20 %37 
                                 f32 %44 = OpLoad %43 
                                 f32 %46 = OpFAdd %44 %45 
                        Private f32* %47 = OpAccessChain %42 %37 
                                             OpStore %47 %46 
                        Private f32* %50 = OpAccessChain %42 %37 
                                 f32 %51 = OpLoad %50 
                                 f32 %53 = OpFMul %51 %52 
                         Output f32* %55 = OpAccessChain %49 %35 
                                             OpStore %55 %53 
                               f32_2 %56 = OpLoad vs_TEXCOORD0 
                               f32_2 %57 = OpFMul %56 %15 
                                             OpStore %9 %57 
                 read_only Texture2D %59 = OpLoad %23 
                             sampler %60 = OpLoad %27 
          read_only Texture2DSampled %61 = OpSampledImage %59 %60 
                               f32_2 %62 = OpLoad %9 
                               f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                 f32 %64 = OpCompositeExtract %63 3 
                                             OpStore %58 %64 
                 read_only Texture2D %66 = OpLoad %65 
                             sampler %68 = OpLoad %67 
          read_only Texture2DSampled %69 = OpSampledImage %66 %68 
                               f32_2 %70 = OpLoad %9 
                               f32_4 %71 = OpImageSampleImplicitLod %69 %70 
                               f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                             OpStore %20 %72 
                               f32_2 %73 = OpLoad %20 
                               f32_3 %74 = OpVectorShuffle %73 %73 1 0 0 
                               f32_3 %79 = OpFMul %74 %78 
                                             OpStore %42 %79 
                                 f32 %81 = OpLoad %58 
                                 f32 %82 = OpFMul %81 %52 
                        Private f32* %84 = OpAccessChain %42 %83 
                                 f32 %85 = OpLoad %84 
                                 f32 %86 = OpFNegate %85 
                                 f32 %87 = OpFAdd %82 %86 
                                             OpStore %80 %87 
                                 f32 %88 = OpLoad %58 
                               f32_2 %89 = OpCompositeConstruct %88 %88 
                               f32_2 %91 = OpFMul %89 %90 
                               f32_3 %92 = OpLoad %42 
                               f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                               f32_2 %94 = OpFAdd %91 %93 
                               f32_3 %95 = OpLoad %42 
                               f32_3 %96 = OpVectorShuffle %95 %94 3 1 4 
                                             OpStore %42 %96 
                               f32_3 %97 = OpLoad %42 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 2 
                              f32_2 %102 = OpFAdd %98 %101 
                              f32_4 %103 = OpLoad %49 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 3 
                                             OpStore %49 %104 
                       Private f32* %105 = OpAccessChain %20 %83 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFNegate %106 
                                f32 %109 = OpFMul %107 %108 
                                f32 %110 = OpLoad %80 
                                f32 %111 = OpFAdd %109 %110 
                       Private f32* %112 = OpAccessChain %42 %37 
                                             OpStore %112 %111 
                       Private f32* %113 = OpAccessChain %42 %37 
                                f32 %114 = OpLoad %113 
                                f32 %116 = OpFAdd %114 %115 
                        Output f32* %117 = OpAccessChain %49 %83 
                                             OpStore %117 %116 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
}
}
}
}