//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-ScreenSpaceShadows" {
Properties {
_ShadowMapTexture ("", any) = "" { }
_ODSWorldTexture ("", 2D) = "" { }
}
SubShader {
 Tags { "ShadowmapFilter" = "HardShadow" }
 Pass {
  Tags { "ShadowmapFilter" = "HardShadow" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 62865
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat10;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat5 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat10 = (-u_xlat5) + u_xlat0.x;
    u_xlat5 = unity_OrthoParams.w * u_xlat10 + u_xlat5;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat5) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat10;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat5 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat10 = (-u_xlat5) + u_xlat0.x;
    u_xlat5 = unity_OrthoParams.w * u_xlat10 + u_xlat5;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat5) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat10;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat5 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat5 = float(1.0) / u_xlat5;
    u_xlat10 = (-u_xlat5) + u_xlat0.x;
    u_xlat5 = unity_OrthoParams.w * u_xlat10 + u_xlat5;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat5) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 434
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %423 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %407 DescriptorSet 407 
                                                      OpDecorate %407 Binding 407 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %409 DescriptorSet 409 
                                                      OpDecorate %409 Binding 409 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %423 Location 423 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %7 %7 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                             %122 = OpTypeBool 
                                             %123 = OpTypeVector %122 4 
                                             %124 = OpTypePointer Private %123 
                             Private bool_4* %125 = OpVariable Private 
                                         i32 %128 = OpConstant 3 
                                             %132 = OpTypePointer Private %122 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                             Private bool_4* %151 = OpVariable Private 
                                         i32 %154 = OpConstant 4 
                              Private f32_4* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %181 = OpConstant 2 
                                         i32 %205 = OpConstant 5 
                                         i32 %223 = OpConstant 6 
                                         i32 %235 = OpConstant 7 
                                             %254 = OpTypePointer Private %74 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %297 = OpConstant 9 
                                         i32 %302 = OpConstant 8 
                                         i32 %311 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         i32 %340 = OpConstant 13 
                                         i32 %345 = OpConstant 12 
                                         i32 %354 = OpConstant 14 
                                         i32 %365 = OpConstant 15 
                                Private f32* %387 = OpVariable Private 
                                       f32_4 %389 = OpConstantComposite %51 %51 %51 %51 
                                             %398 = OpTypePointer Function %74 
                                Private f32* %406 = OpVariable Private 
        UniformConstant read_only Texture2D* %407 = OpVariable UniformConstant 
                    UniformConstant sampler* %409 = OpVariable UniformConstant 
                                             %411 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %412 = OpTypeSampledImage %411 
                                Private f32* %417 = OpVariable Private 
                                             %422 = OpTypePointer Output %7 
                               Output f32_4* %423 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %399 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 2 2 2 2 
                              Uniform f32_4* %129 = OpAccessChain %38 %128 
                                       f32_4 %130 = OpLoad %129 
                                      bool_4 %131 = OpFOrdGreaterThanEqual %127 %130 
                                                      OpStore %125 %131 
                               Private bool* %133 = OpAccessChain %125 %27 
                                        bool %134 = OpLoad %133 
                                         f32 %136 = OpSelect %134 %51 %135 
                                Private f32* %137 = OpAccessChain %73 %27 
                                                      OpStore %137 %136 
                               Private bool* %138 = OpAccessChain %125 %47 
                                        bool %139 = OpLoad %138 
                                         f32 %140 = OpSelect %139 %51 %135 
                                Private f32* %141 = OpAccessChain %73 %47 
                                                      OpStore %141 %140 
                               Private bool* %143 = OpAccessChain %125 %142 
                                        bool %144 = OpLoad %143 
                                         f32 %145 = OpSelect %144 %51 %135 
                                Private f32* %146 = OpAccessChain %73 %142 
                                                      OpStore %146 %145 
                               Private bool* %147 = OpAccessChain %125 %61 
                                        bool %148 = OpLoad %147 
                                         f32 %149 = OpSelect %148 %51 %135 
                                Private f32* %150 = OpAccessChain %73 %61 
                                                      OpStore %150 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %152 2 2 2 2 
                              Uniform f32_4* %155 = OpAccessChain %38 %154 
                                       f32_4 %156 = OpLoad %155 
                                      bool_4 %157 = OpFOrdLessThan %153 %156 
                                                      OpStore %151 %157 
                               Private bool* %159 = OpAccessChain %151 %27 
                                        bool %160 = OpLoad %159 
                                         f32 %161 = OpSelect %160 %51 %135 
                                Private f32* %162 = OpAccessChain %158 %27 
                                                      OpStore %162 %161 
                               Private bool* %163 = OpAccessChain %151 %47 
                                        bool %164 = OpLoad %163 
                                         f32 %165 = OpSelect %164 %51 %135 
                                Private f32* %166 = OpAccessChain %158 %47 
                                                      OpStore %166 %165 
                               Private bool* %167 = OpAccessChain %151 %142 
                                        bool %168 = OpLoad %167 
                                         f32 %169 = OpSelect %168 %51 %135 
                                Private f32* %170 = OpAccessChain %158 %142 
                                                      OpStore %170 %169 
                               Private bool* %171 = OpAccessChain %151 %61 
                                        bool %172 = OpLoad %171 
                                         f32 %173 = OpSelect %172 %51 %135 
                                Private f32* %174 = OpAccessChain %158 %61 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %73 
                                       f32_4 %177 = OpLoad %158 
                                       f32_4 %178 = OpFMul %176 %177 
                                                      OpStore %175 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %38 %181 %60 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %180 %183 
                                                      OpStore %158 %184 
                              Uniform f32_4* %185 = OpAccessChain %38 %181 %40 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %158 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %158 %191 
                              Uniform f32_4* %192 = OpAccessChain %38 %181 %181 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %158 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                              Uniform f32_4* %200 = OpAccessChain %38 %181 %128 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpFAdd %199 %201 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %38 %205 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %158 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %158 %211 
                              Uniform f32_4* %212 = OpAccessChain %38 %205 %154 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %158 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFAdd %217 %219 
                                       f32_4 %221 = OpLoad %158 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %158 %222 
                              Uniform f32_4* %224 = OpAccessChain %38 %205 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 2 2 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %158 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFAdd %229 %231 
                                       f32_4 %233 = OpLoad %158 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %158 %234 
                              Uniform f32_4* %236 = OpAccessChain %38 %205 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_4 %239 = OpLoad %9 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %158 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %158 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %158 %246 
                                       f32_4 %247 = OpLoad %175 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                                       f32_4 %249 = OpLoad %158 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %158 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %158 %253 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 1 1 1 
                              Uniform f32_4* %258 = OpAccessChain %38 %205 %60 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFMul %257 %260 
                                                      OpStore %255 %261 
                              Uniform f32_4* %262 = OpAccessChain %38 %205 %40 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %255 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %255 %269 
                              Uniform f32_4* %270 = OpAccessChain %38 %205 %181 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 2 2 2 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_3 %276 = OpLoad %255 
                                       f32_3 %277 = OpFAdd %275 %276 
                                                      OpStore %255 %277 
                              Uniform f32_4* %278 = OpAccessChain %38 %205 %128 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_4 %281 = OpLoad %9 
                                       f32_3 %282 = OpVectorShuffle %281 %281 3 3 3 
                                       f32_3 %283 = OpFMul %280 %282 
                                       f32_3 %284 = OpLoad %255 
                                       f32_3 %285 = OpFAdd %283 %284 
                                                      OpStore %255 %285 
                                       f32_3 %286 = OpLoad %255 
                                       f32_4 %287 = OpLoad %175 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %158 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %158 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %158 %294 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 1 1 1 
                              Uniform f32_4* %298 = OpAccessChain %38 %205 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFMul %296 %300 
                                                      OpStore %255 %301 
                              Uniform f32_4* %303 = OpAccessChain %38 %205 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 0 0 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_3 %309 = OpLoad %255 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %255 %310 
                              Uniform f32_4* %312 = OpAccessChain %38 %205 %311 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 2 2 2 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %255 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %255 %319 
                              Uniform f32_4* %321 = OpAccessChain %38 %205 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 3 3 3 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %255 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %255 %328 
                                       f32_3 %329 = OpLoad %255 
                                       f32_4 %330 = OpLoad %175 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_4 %333 = OpLoad %158 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFAdd %332 %334 
                                       f32_4 %336 = OpLoad %158 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %158 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %341 = OpAccessChain %38 %205 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                                      OpStore %255 %344 
                              Uniform f32_4* %346 = OpAccessChain %38 %205 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %255 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %255 %353 
                              Uniform f32_4* %355 = OpAccessChain %38 %205 %354 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %255 
                                       f32_3 %362 = OpFAdd %360 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                              Uniform f32_4* %366 = OpAccessChain %38 %205 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %371 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %175 
                                       f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %158 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %9 %386 
                                       f32_4 %388 = OpLoad %175 
                                         f32 %390 = OpDot %388 %389 
                                                      OpStore %387 %390 
                                         f32 %391 = OpLoad %387 
                                         f32 %392 = OpFNegate %391 
                                Private f32* %393 = OpAccessChain %9 %142 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFAdd %392 %394 
                                                      OpStore %54 %395 
                                         f32 %396 = OpLoad %54 
                                         f32 %397 = OpFAdd %396 %51 
                                                      OpStore %54 %397 
                                       f32_4 %400 = OpLoad %9 
                                       f32_2 %401 = OpVectorShuffle %400 %400 0 1 
                                         f32 %402 = OpLoad %54 
                                         f32 %403 = OpCompositeExtract %401 0 
                                         f32 %404 = OpCompositeExtract %401 1 
                                       f32_3 %405 = OpCompositeConstruct %403 %404 %402 
                                                      OpStore %399 %405 
                         read_only Texture2D %408 = OpLoad %407 
                                     sampler %410 = OpLoad %409 
                  read_only Texture2DSampled %413 = OpSampledImage %408 %410 
                                       f32_3 %414 = OpLoad %399 
                                         f32 %415 = OpCompositeExtract %414 2 
                                         f32 %416 = OpImageSampleDrefExplicitLod %413 %414 %415 Lod %6 
                                                      OpStore %406 %416 
                                Uniform f32* %418 = OpAccessChain %38 %223 %27 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFNegate %419 
                                         f32 %421 = OpFAdd %420 %51 
                                                      OpStore %417 %421 
                                         f32 %424 = OpLoad %406 
                                       f32_4 %425 = OpCompositeConstruct %424 %424 %424 %424 
                                         f32 %426 = OpLoad %417 
                                       f32_4 %427 = OpCompositeConstruct %426 %426 %426 %426 
                                       f32_4 %428 = OpFMul %425 %427 
                              Uniform f32_4* %429 = OpAccessChain %38 %223 
                                       f32_4 %430 = OpLoad %429 
                                       f32_4 %431 = OpVectorShuffle %430 %430 0 0 0 0 
                                       f32_4 %432 = OpFAdd %428 %431 
                                                      OpStore %423 %432 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 434
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %423 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %407 DescriptorSet 407 
                                                      OpDecorate %407 Binding 407 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %409 DescriptorSet 409 
                                                      OpDecorate %409 Binding 409 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %423 Location 423 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %7 %7 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                             %122 = OpTypeBool 
                                             %123 = OpTypeVector %122 4 
                                             %124 = OpTypePointer Private %123 
                             Private bool_4* %125 = OpVariable Private 
                                         i32 %128 = OpConstant 3 
                                             %132 = OpTypePointer Private %122 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                             Private bool_4* %151 = OpVariable Private 
                                         i32 %154 = OpConstant 4 
                              Private f32_4* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %181 = OpConstant 2 
                                         i32 %205 = OpConstant 5 
                                         i32 %223 = OpConstant 6 
                                         i32 %235 = OpConstant 7 
                                             %254 = OpTypePointer Private %74 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %297 = OpConstant 9 
                                         i32 %302 = OpConstant 8 
                                         i32 %311 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         i32 %340 = OpConstant 13 
                                         i32 %345 = OpConstant 12 
                                         i32 %354 = OpConstant 14 
                                         i32 %365 = OpConstant 15 
                                Private f32* %387 = OpVariable Private 
                                       f32_4 %389 = OpConstantComposite %51 %51 %51 %51 
                                             %398 = OpTypePointer Function %74 
                                Private f32* %406 = OpVariable Private 
        UniformConstant read_only Texture2D* %407 = OpVariable UniformConstant 
                    UniformConstant sampler* %409 = OpVariable UniformConstant 
                                             %411 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %412 = OpTypeSampledImage %411 
                                Private f32* %417 = OpVariable Private 
                                             %422 = OpTypePointer Output %7 
                               Output f32_4* %423 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %399 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 2 2 2 2 
                              Uniform f32_4* %129 = OpAccessChain %38 %128 
                                       f32_4 %130 = OpLoad %129 
                                      bool_4 %131 = OpFOrdGreaterThanEqual %127 %130 
                                                      OpStore %125 %131 
                               Private bool* %133 = OpAccessChain %125 %27 
                                        bool %134 = OpLoad %133 
                                         f32 %136 = OpSelect %134 %51 %135 
                                Private f32* %137 = OpAccessChain %73 %27 
                                                      OpStore %137 %136 
                               Private bool* %138 = OpAccessChain %125 %47 
                                        bool %139 = OpLoad %138 
                                         f32 %140 = OpSelect %139 %51 %135 
                                Private f32* %141 = OpAccessChain %73 %47 
                                                      OpStore %141 %140 
                               Private bool* %143 = OpAccessChain %125 %142 
                                        bool %144 = OpLoad %143 
                                         f32 %145 = OpSelect %144 %51 %135 
                                Private f32* %146 = OpAccessChain %73 %142 
                                                      OpStore %146 %145 
                               Private bool* %147 = OpAccessChain %125 %61 
                                        bool %148 = OpLoad %147 
                                         f32 %149 = OpSelect %148 %51 %135 
                                Private f32* %150 = OpAccessChain %73 %61 
                                                      OpStore %150 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %152 2 2 2 2 
                              Uniform f32_4* %155 = OpAccessChain %38 %154 
                                       f32_4 %156 = OpLoad %155 
                                      bool_4 %157 = OpFOrdLessThan %153 %156 
                                                      OpStore %151 %157 
                               Private bool* %159 = OpAccessChain %151 %27 
                                        bool %160 = OpLoad %159 
                                         f32 %161 = OpSelect %160 %51 %135 
                                Private f32* %162 = OpAccessChain %158 %27 
                                                      OpStore %162 %161 
                               Private bool* %163 = OpAccessChain %151 %47 
                                        bool %164 = OpLoad %163 
                                         f32 %165 = OpSelect %164 %51 %135 
                                Private f32* %166 = OpAccessChain %158 %47 
                                                      OpStore %166 %165 
                               Private bool* %167 = OpAccessChain %151 %142 
                                        bool %168 = OpLoad %167 
                                         f32 %169 = OpSelect %168 %51 %135 
                                Private f32* %170 = OpAccessChain %158 %142 
                                                      OpStore %170 %169 
                               Private bool* %171 = OpAccessChain %151 %61 
                                        bool %172 = OpLoad %171 
                                         f32 %173 = OpSelect %172 %51 %135 
                                Private f32* %174 = OpAccessChain %158 %61 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %73 
                                       f32_4 %177 = OpLoad %158 
                                       f32_4 %178 = OpFMul %176 %177 
                                                      OpStore %175 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %38 %181 %60 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %180 %183 
                                                      OpStore %158 %184 
                              Uniform f32_4* %185 = OpAccessChain %38 %181 %40 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %158 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %158 %191 
                              Uniform f32_4* %192 = OpAccessChain %38 %181 %181 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %158 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                              Uniform f32_4* %200 = OpAccessChain %38 %181 %128 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpFAdd %199 %201 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %38 %205 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %158 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %158 %211 
                              Uniform f32_4* %212 = OpAccessChain %38 %205 %154 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %158 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFAdd %217 %219 
                                       f32_4 %221 = OpLoad %158 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %158 %222 
                              Uniform f32_4* %224 = OpAccessChain %38 %205 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 2 2 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %158 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFAdd %229 %231 
                                       f32_4 %233 = OpLoad %158 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %158 %234 
                              Uniform f32_4* %236 = OpAccessChain %38 %205 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_4 %239 = OpLoad %9 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %158 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %158 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %158 %246 
                                       f32_4 %247 = OpLoad %175 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                                       f32_4 %249 = OpLoad %158 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %158 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %158 %253 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 1 1 1 
                              Uniform f32_4* %258 = OpAccessChain %38 %205 %60 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFMul %257 %260 
                                                      OpStore %255 %261 
                              Uniform f32_4* %262 = OpAccessChain %38 %205 %40 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %255 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %255 %269 
                              Uniform f32_4* %270 = OpAccessChain %38 %205 %181 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 2 2 2 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_3 %276 = OpLoad %255 
                                       f32_3 %277 = OpFAdd %275 %276 
                                                      OpStore %255 %277 
                              Uniform f32_4* %278 = OpAccessChain %38 %205 %128 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_4 %281 = OpLoad %9 
                                       f32_3 %282 = OpVectorShuffle %281 %281 3 3 3 
                                       f32_3 %283 = OpFMul %280 %282 
                                       f32_3 %284 = OpLoad %255 
                                       f32_3 %285 = OpFAdd %283 %284 
                                                      OpStore %255 %285 
                                       f32_3 %286 = OpLoad %255 
                                       f32_4 %287 = OpLoad %175 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %158 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %158 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %158 %294 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 1 1 1 
                              Uniform f32_4* %298 = OpAccessChain %38 %205 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFMul %296 %300 
                                                      OpStore %255 %301 
                              Uniform f32_4* %303 = OpAccessChain %38 %205 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 0 0 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_3 %309 = OpLoad %255 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %255 %310 
                              Uniform f32_4* %312 = OpAccessChain %38 %205 %311 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 2 2 2 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %255 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %255 %319 
                              Uniform f32_4* %321 = OpAccessChain %38 %205 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 3 3 3 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %255 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %255 %328 
                                       f32_3 %329 = OpLoad %255 
                                       f32_4 %330 = OpLoad %175 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_4 %333 = OpLoad %158 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFAdd %332 %334 
                                       f32_4 %336 = OpLoad %158 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %158 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %341 = OpAccessChain %38 %205 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                                      OpStore %255 %344 
                              Uniform f32_4* %346 = OpAccessChain %38 %205 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %255 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %255 %353 
                              Uniform f32_4* %355 = OpAccessChain %38 %205 %354 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %255 
                                       f32_3 %362 = OpFAdd %360 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                              Uniform f32_4* %366 = OpAccessChain %38 %205 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %371 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %175 
                                       f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %158 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %9 %386 
                                       f32_4 %388 = OpLoad %175 
                                         f32 %390 = OpDot %388 %389 
                                                      OpStore %387 %390 
                                         f32 %391 = OpLoad %387 
                                         f32 %392 = OpFNegate %391 
                                Private f32* %393 = OpAccessChain %9 %142 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFAdd %392 %394 
                                                      OpStore %54 %395 
                                         f32 %396 = OpLoad %54 
                                         f32 %397 = OpFAdd %396 %51 
                                                      OpStore %54 %397 
                                       f32_4 %400 = OpLoad %9 
                                       f32_2 %401 = OpVectorShuffle %400 %400 0 1 
                                         f32 %402 = OpLoad %54 
                                         f32 %403 = OpCompositeExtract %401 0 
                                         f32 %404 = OpCompositeExtract %401 1 
                                       f32_3 %405 = OpCompositeConstruct %403 %404 %402 
                                                      OpStore %399 %405 
                         read_only Texture2D %408 = OpLoad %407 
                                     sampler %410 = OpLoad %409 
                  read_only Texture2DSampled %413 = OpSampledImage %408 %410 
                                       f32_3 %414 = OpLoad %399 
                                         f32 %415 = OpCompositeExtract %414 2 
                                         f32 %416 = OpImageSampleDrefExplicitLod %413 %414 %415 Lod %6 
                                                      OpStore %406 %416 
                                Uniform f32* %418 = OpAccessChain %38 %223 %27 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFNegate %419 
                                         f32 %421 = OpFAdd %420 %51 
                                                      OpStore %417 %421 
                                         f32 %424 = OpLoad %406 
                                       f32_4 %425 = OpCompositeConstruct %424 %424 %424 %424 
                                         f32 %426 = OpLoad %417 
                                       f32_4 %427 = OpCompositeConstruct %426 %426 %426 %426 
                                       f32_4 %428 = OpFMul %425 %427 
                              Uniform f32_4* %429 = OpAccessChain %38 %223 
                                       f32_4 %430 = OpLoad %429 
                                       f32_4 %431 = OpVectorShuffle %430 %430 0 0 0 0 
                                       f32_4 %432 = OpFAdd %428 %431 
                                                      OpStore %423 %432 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 434
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %423 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %407 DescriptorSet 407 
                                                      OpDecorate %407 Binding 407 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %409 DescriptorSet 409 
                                                      OpDecorate %409 Binding 409 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %423 Location 423 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %7 %7 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                             %122 = OpTypeBool 
                                             %123 = OpTypeVector %122 4 
                                             %124 = OpTypePointer Private %123 
                             Private bool_4* %125 = OpVariable Private 
                                         i32 %128 = OpConstant 3 
                                             %132 = OpTypePointer Private %122 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                             Private bool_4* %151 = OpVariable Private 
                                         i32 %154 = OpConstant 4 
                              Private f32_4* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %181 = OpConstant 2 
                                         i32 %205 = OpConstant 5 
                                         i32 %223 = OpConstant 6 
                                         i32 %235 = OpConstant 7 
                                             %254 = OpTypePointer Private %74 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %297 = OpConstant 9 
                                         i32 %302 = OpConstant 8 
                                         i32 %311 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         i32 %340 = OpConstant 13 
                                         i32 %345 = OpConstant 12 
                                         i32 %354 = OpConstant 14 
                                         i32 %365 = OpConstant 15 
                                Private f32* %387 = OpVariable Private 
                                       f32_4 %389 = OpConstantComposite %51 %51 %51 %51 
                                             %398 = OpTypePointer Function %74 
                                Private f32* %406 = OpVariable Private 
        UniformConstant read_only Texture2D* %407 = OpVariable UniformConstant 
                    UniformConstant sampler* %409 = OpVariable UniformConstant 
                                             %411 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %412 = OpTypeSampledImage %411 
                                Private f32* %417 = OpVariable Private 
                                             %422 = OpTypePointer Output %7 
                               Output f32_4* %423 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %399 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 2 2 2 2 
                              Uniform f32_4* %129 = OpAccessChain %38 %128 
                                       f32_4 %130 = OpLoad %129 
                                      bool_4 %131 = OpFOrdGreaterThanEqual %127 %130 
                                                      OpStore %125 %131 
                               Private bool* %133 = OpAccessChain %125 %27 
                                        bool %134 = OpLoad %133 
                                         f32 %136 = OpSelect %134 %51 %135 
                                Private f32* %137 = OpAccessChain %73 %27 
                                                      OpStore %137 %136 
                               Private bool* %138 = OpAccessChain %125 %47 
                                        bool %139 = OpLoad %138 
                                         f32 %140 = OpSelect %139 %51 %135 
                                Private f32* %141 = OpAccessChain %73 %47 
                                                      OpStore %141 %140 
                               Private bool* %143 = OpAccessChain %125 %142 
                                        bool %144 = OpLoad %143 
                                         f32 %145 = OpSelect %144 %51 %135 
                                Private f32* %146 = OpAccessChain %73 %142 
                                                      OpStore %146 %145 
                               Private bool* %147 = OpAccessChain %125 %61 
                                        bool %148 = OpLoad %147 
                                         f32 %149 = OpSelect %148 %51 %135 
                                Private f32* %150 = OpAccessChain %73 %61 
                                                      OpStore %150 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %152 2 2 2 2 
                              Uniform f32_4* %155 = OpAccessChain %38 %154 
                                       f32_4 %156 = OpLoad %155 
                                      bool_4 %157 = OpFOrdLessThan %153 %156 
                                                      OpStore %151 %157 
                               Private bool* %159 = OpAccessChain %151 %27 
                                        bool %160 = OpLoad %159 
                                         f32 %161 = OpSelect %160 %51 %135 
                                Private f32* %162 = OpAccessChain %158 %27 
                                                      OpStore %162 %161 
                               Private bool* %163 = OpAccessChain %151 %47 
                                        bool %164 = OpLoad %163 
                                         f32 %165 = OpSelect %164 %51 %135 
                                Private f32* %166 = OpAccessChain %158 %47 
                                                      OpStore %166 %165 
                               Private bool* %167 = OpAccessChain %151 %142 
                                        bool %168 = OpLoad %167 
                                         f32 %169 = OpSelect %168 %51 %135 
                                Private f32* %170 = OpAccessChain %158 %142 
                                                      OpStore %170 %169 
                               Private bool* %171 = OpAccessChain %151 %61 
                                        bool %172 = OpLoad %171 
                                         f32 %173 = OpSelect %172 %51 %135 
                                Private f32* %174 = OpAccessChain %158 %61 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %73 
                                       f32_4 %177 = OpLoad %158 
                                       f32_4 %178 = OpFMul %176 %177 
                                                      OpStore %175 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %38 %181 %60 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %180 %183 
                                                      OpStore %158 %184 
                              Uniform f32_4* %185 = OpAccessChain %38 %181 %40 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %158 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %158 %191 
                              Uniform f32_4* %192 = OpAccessChain %38 %181 %181 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %158 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                              Uniform f32_4* %200 = OpAccessChain %38 %181 %128 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpFAdd %199 %201 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %38 %205 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %158 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %158 %211 
                              Uniform f32_4* %212 = OpAccessChain %38 %205 %154 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %158 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFAdd %217 %219 
                                       f32_4 %221 = OpLoad %158 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %158 %222 
                              Uniform f32_4* %224 = OpAccessChain %38 %205 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 2 2 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %158 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFAdd %229 %231 
                                       f32_4 %233 = OpLoad %158 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %158 %234 
                              Uniform f32_4* %236 = OpAccessChain %38 %205 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_4 %239 = OpLoad %9 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %158 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %158 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %158 %246 
                                       f32_4 %247 = OpLoad %175 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                                       f32_4 %249 = OpLoad %158 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %158 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %158 %253 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 1 1 1 
                              Uniform f32_4* %258 = OpAccessChain %38 %205 %60 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFMul %257 %260 
                                                      OpStore %255 %261 
                              Uniform f32_4* %262 = OpAccessChain %38 %205 %40 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %255 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %255 %269 
                              Uniform f32_4* %270 = OpAccessChain %38 %205 %181 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 2 2 2 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_3 %276 = OpLoad %255 
                                       f32_3 %277 = OpFAdd %275 %276 
                                                      OpStore %255 %277 
                              Uniform f32_4* %278 = OpAccessChain %38 %205 %128 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_4 %281 = OpLoad %9 
                                       f32_3 %282 = OpVectorShuffle %281 %281 3 3 3 
                                       f32_3 %283 = OpFMul %280 %282 
                                       f32_3 %284 = OpLoad %255 
                                       f32_3 %285 = OpFAdd %283 %284 
                                                      OpStore %255 %285 
                                       f32_3 %286 = OpLoad %255 
                                       f32_4 %287 = OpLoad %175 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %158 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %158 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %158 %294 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 1 1 1 
                              Uniform f32_4* %298 = OpAccessChain %38 %205 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFMul %296 %300 
                                                      OpStore %255 %301 
                              Uniform f32_4* %303 = OpAccessChain %38 %205 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 0 0 
                                       f32_3 %308 = OpFMul %305 %307 
                                       f32_3 %309 = OpLoad %255 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %255 %310 
                              Uniform f32_4* %312 = OpAccessChain %38 %205 %311 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 2 2 2 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %255 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %255 %319 
                              Uniform f32_4* %321 = OpAccessChain %38 %205 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 3 3 3 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %255 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %255 %328 
                                       f32_3 %329 = OpLoad %255 
                                       f32_4 %330 = OpLoad %175 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_4 %333 = OpLoad %158 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFAdd %332 %334 
                                       f32_4 %336 = OpLoad %158 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %158 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %341 = OpAccessChain %38 %205 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                                      OpStore %255 %344 
                              Uniform f32_4* %346 = OpAccessChain %38 %205 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %255 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %255 %353 
                              Uniform f32_4* %355 = OpAccessChain %38 %205 %354 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %255 
                                       f32_3 %362 = OpFAdd %360 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                              Uniform f32_4* %366 = OpAccessChain %38 %205 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %371 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %175 
                                       f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %158 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %9 %386 
                                       f32_4 %388 = OpLoad %175 
                                         f32 %390 = OpDot %388 %389 
                                                      OpStore %387 %390 
                                         f32 %391 = OpLoad %387 
                                         f32 %392 = OpFNegate %391 
                                Private f32* %393 = OpAccessChain %9 %142 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFAdd %392 %394 
                                                      OpStore %54 %395 
                                         f32 %396 = OpLoad %54 
                                         f32 %397 = OpFAdd %396 %51 
                                                      OpStore %54 %397 
                                       f32_4 %400 = OpLoad %9 
                                       f32_2 %401 = OpVectorShuffle %400 %400 0 1 
                                         f32 %402 = OpLoad %54 
                                         f32 %403 = OpCompositeExtract %401 0 
                                         f32 %404 = OpCompositeExtract %401 1 
                                       f32_3 %405 = OpCompositeConstruct %403 %404 %402 
                                                      OpStore %399 %405 
                         read_only Texture2D %408 = OpLoad %407 
                                     sampler %410 = OpLoad %409 
                  read_only Texture2DSampled %413 = OpSampledImage %408 %410 
                                       f32_3 %414 = OpLoad %399 
                                         f32 %415 = OpCompositeExtract %414 2 
                                         f32 %416 = OpImageSampleDrefExplicitLod %413 %414 %415 Lod %6 
                                                      OpStore %406 %416 
                                Uniform f32* %418 = OpAccessChain %38 %223 %27 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFNegate %419 
                                         f32 %421 = OpFAdd %420 %51 
                                                      OpStore %417 %421 
                                         f32 %424 = OpLoad %406 
                                       f32_4 %425 = OpCompositeConstruct %424 %424 %424 %424 
                                         f32 %426 = OpLoad %417 
                                       f32_4 %427 = OpCompositeConstruct %426 %426 %426 %426 
                                       f32_4 %428 = OpFMul %425 %427 
                              Uniform f32_4* %429 = OpAccessChain %38 %223 
                                       f32_4 %430 = OpLoad %429 
                                       f32_4 %431 = OpVectorShuffle %430 %430 0 0 0 0 
                                       f32_4 %432 = OpFAdd %428 %431 
                                                      OpStore %423 %432 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat8;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat4 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat8 = (-u_xlat4) + u_xlat0.x;
    u_xlat4 = unity_OrthoParams.w * u_xlat8 + u_xlat4;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat4) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * u_xlat16_3.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat8;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat4 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat8 = (-u_xlat4) + u_xlat0.x;
    u_xlat4 = unity_OrthoParams.w * u_xlat8 + u_xlat4;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat4) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * u_xlat16_3.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat8;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat4 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat8 = (-u_xlat4) + u_xlat0.x;
    u_xlat4 = unity_OrthoParams.w * u_xlat8 + u_xlat4;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat4) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * u_xlat16_3.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 461
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %77 %80 %94 %450 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 RelaxedPrecision 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate vs_TEXCOORD3 Location 80 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %434 DescriptorSet 434 
                                                      OpDecorate %434 Binding 434 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %436 DescriptorSet 436 
                                                      OpDecorate %436 Binding 436 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %450 Location 450 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeArray %7 %32 
                                          u32 %35 = OpConstant 16 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeStruct %7 %7 %33 %34 %7 %36 %7 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          u32 %48 = OpConstant 1 
                                          f32 %52 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %74 = OpVariable Private 
                                              %75 = OpTypeVector %6 3 
                                              %76 = OpTypePointer Input %75 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %111 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 2 
                                         i32 %144 = OpConstant 3 
                                             %163 = OpTypePointer Private %75 
                              Private f32_3* %164 = OpVariable Private 
                                         u32 %186 = OpConstant 2 
                                             %199 = OpTypeBool 
                                             %200 = OpTypeVector %199 4 
                                             %201 = OpTypePointer Private %200 
                             Private bool_4* %202 = OpVariable Private 
                                         i32 %204 = OpConstant 4 
                              Private f32_3* %208 = OpVariable Private 
                                             %209 = OpTypePointer Private %199 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         f32 %226 = OpConstant 3.674022E-40 
                              Private f32_3* %245 = OpVariable Private 
                                       f32_3 %247 = OpConstantComposite %226 %226 %226 
                                         i32 %251 = OpConstant 5 
                                         i32 %264 = OpConstant 6 
                                         i32 %273 = OpConstant 7 
                              Private f32_3* %286 = OpVariable Private 
                                         i32 %325 = OpConstant 9 
                                         i32 %330 = OpConstant 8 
                                         i32 %339 = OpConstant 10 
                                         i32 %348 = OpConstant 11 
                                         i32 %365 = OpConstant 13 
                                         i32 %370 = OpConstant 12 
                                         i32 %379 = OpConstant 14 
                                         i32 %390 = OpConstant 15 
                                Private f32* %414 = OpVariable Private 
                                       f32_4 %416 = OpConstantComposite %52 %52 %52 %52 
                                             %425 = OpTypePointer Function %75 
                                Private f32* %433 = OpVariable Private 
        UniformConstant read_only Texture2D* %434 = OpVariable UniformConstant 
                    UniformConstant sampler* %436 = OpVariable UniformConstant 
                                             %438 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %439 = OpTypeSampledImage %438 
                                             %449 = OpTypePointer Output %7 
                               Output f32_4* %450 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %426 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %43 = OpAccessChain %39 %41 %27 
                                          f32 %44 = OpLoad %43 
                                 Private f32* %45 = OpAccessChain %9 %27 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Uniform f32* %49 = OpAccessChain %39 %41 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                                      OpStore %31 %51 
                                          f32 %53 = OpLoad %31 
                                          f32 %54 = OpFDiv %52 %53 
                                                      OpStore %31 %54 
                                          f32 %56 = OpLoad %31 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %39 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %55 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %31 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %31 %68 
                                 Private f32* %69 = OpAccessChain %9 %27 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                          f32 %72 = OpFAdd %71 %52 
                                 Private f32* %73 = OpAccessChain %9 %27 
                                                      OpStore %73 %72 
                                        f32_3 %78 = OpLoad vs_TEXCOORD2 
                                        f32_3 %79 = OpFNegate %78 
                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_4 %87 = OpLoad %74 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_3 %90 = OpLoad vs_TEXCOORD2 
                                        f32_3 %91 = OpFAdd %89 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 1 5 6 
                                                      OpStore %9 %93 
                                        f32_3 %95 = OpLoad vs_TEXCOORD1 
                                        f32_3 %96 = OpFNegate %95 
                                          f32 %97 = OpLoad %31 
                                        f32_3 %98 = OpCompositeConstruct %97 %97 %97 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 2 3 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 6 
                                                      OpStore %9 %104 
                                         f32 %105 = OpLoad %31 
                                       f32_3 %106 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD1 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %74 %110 
                              Uniform f32_4* %112 = OpAccessChain %39 %61 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 3 3 3 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 2 3 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %74 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %123 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %39 %125 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %124 %127 
                                                      OpStore %74 %128 
                              Uniform f32_4* %129 = OpAccessChain %39 %125 %41 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %74 %135 
                              Uniform f32_4* %136 = OpAccessChain %39 %125 %125 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %39 %125 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %143 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %39 %144 %41 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                       f32_4 %157 = OpLoad %74 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %74 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %158 %160 
                                Private f32* %162 = OpAccessChain %74 %27 
                                                      OpStore %162 %161 
                                       f32_4 %165 = OpLoad %9 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_4* %167 = OpAccessChain %39 %144 %61 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFNegate %169 
                                       f32_3 %171 = OpFAdd %166 %170 
                                                      OpStore %164 %171 
                                       f32_3 %172 = OpLoad %164 
                                       f32_3 %173 = OpLoad %164 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %74 %48 
                                                      OpStore %175 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                              Uniform f32_4* %178 = OpAccessChain %39 %144 %125 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFNegate %180 
                                       f32_3 %182 = OpFAdd %177 %181 
                                                      OpStore %164 %182 
                                       f32_3 %183 = OpLoad %164 
                                       f32_3 %184 = OpLoad %164 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %187 = OpAccessChain %74 %186 
                                                      OpStore %187 %185 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                              Uniform f32_4* %190 = OpAccessChain %39 %144 %144 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %189 %193 
                                                      OpStore %164 %194 
                                       f32_3 %195 = OpLoad %164 
                                       f32_3 %196 = OpLoad %164 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %74 %62 
                                                      OpStore %198 %197 
                                       f32_4 %203 = OpLoad %74 
                              Uniform f32_4* %205 = OpAccessChain %39 %204 
                                       f32_4 %206 = OpLoad %205 
                                      bool_4 %207 = OpFOrdLessThan %203 %206 
                                                      OpStore %202 %207 
                               Private bool* %210 = OpAccessChain %202 %27 
                                        bool %211 = OpLoad %210 
                                         f32 %214 = OpSelect %211 %212 %213 
                                Private f32* %215 = OpAccessChain %208 %27 
                                                      OpStore %215 %214 
                               Private bool* %216 = OpAccessChain %202 %48 
                                        bool %217 = OpLoad %216 
                                         f32 %218 = OpSelect %217 %212 %213 
                                Private f32* %219 = OpAccessChain %208 %48 
                                                      OpStore %219 %218 
                               Private bool* %220 = OpAccessChain %202 %186 
                                        bool %221 = OpLoad %220 
                                         f32 %222 = OpSelect %221 %212 %213 
                                Private f32* %223 = OpAccessChain %208 %186 
                                                      OpStore %223 %222 
                               Private bool* %224 = OpAccessChain %202 %27 
                                        bool %225 = OpLoad %224 
                                         f32 %227 = OpSelect %225 %52 %226 
                                Private f32* %228 = OpAccessChain %74 %27 
                                                      OpStore %228 %227 
                               Private bool* %229 = OpAccessChain %202 %48 
                                        bool %230 = OpLoad %229 
                                         f32 %231 = OpSelect %230 %52 %226 
                                Private f32* %232 = OpAccessChain %74 %48 
                                                      OpStore %232 %231 
                               Private bool* %233 = OpAccessChain %202 %186 
                                        bool %234 = OpLoad %233 
                                         f32 %235 = OpSelect %234 %52 %226 
                                Private f32* %236 = OpAccessChain %74 %186 
                                                      OpStore %236 %235 
                               Private bool* %237 = OpAccessChain %202 %62 
                                        bool %238 = OpLoad %237 
                                         f32 %239 = OpSelect %238 %52 %226 
                                Private f32* %240 = OpAccessChain %74 %62 
                                                      OpStore %240 %239 
                                       f32_3 %241 = OpLoad %208 
                                       f32_4 %242 = OpLoad %74 
                                       f32_3 %243 = OpVectorShuffle %242 %242 1 2 3 
                                       f32_3 %244 = OpFAdd %241 %243 
                                                      OpStore %208 %244 
                                       f32_3 %246 = OpLoad %208 
                                       f32_3 %248 = OpExtInst %1 40 %246 %247 
                                                      OpStore %245 %248 
                                       f32_4 %249 = OpLoad %9 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 1 1 
                              Uniform f32_4* %252 = OpAccessChain %39 %251 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %164 %255 
                              Uniform f32_4* %256 = OpAccessChain %39 %251 %204 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %164 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %164 %263 
                              Uniform f32_4* %265 = OpAccessChain %39 %251 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 2 2 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %164 
                                       f32_3 %272 = OpFAdd %270 %271 
                                                      OpStore %164 %272 
                              Uniform f32_4* %274 = OpAccessChain %39 %251 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 3 3 3 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_3 %280 = OpLoad %164 
                                       f32_3 %281 = OpFAdd %279 %280 
                                                      OpStore %164 %281 
                                       f32_3 %282 = OpLoad %245 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpLoad %164 
                                       f32_3 %285 = OpFMul %283 %284 
                                                      OpStore %164 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 1 1 1 
                              Uniform f32_4* %289 = OpAccessChain %39 %251 %61 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %288 %291 
                                                      OpStore %286 %292 
                              Uniform f32_4* %293 = OpAccessChain %39 %251 %41 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_4 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 0 0 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %299 = OpLoad %286 
                                       f32_3 %300 = OpFAdd %298 %299 
                                                      OpStore %286 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %251 %125 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %9 
                                       f32_3 %305 = OpVectorShuffle %304 %304 2 2 2 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %286 
                                       f32_3 %308 = OpFAdd %306 %307 
                                                      OpStore %286 %308 
                              Uniform f32_4* %309 = OpAccessChain %39 %251 %144 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 3 3 3 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %286 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %286 %316 
                                       f32_3 %317 = OpLoad %286 
                                       f32_4 %318 = OpLoad %74 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 0 0 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %164 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %164 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 1 1 1 
                              Uniform f32_4* %326 = OpAccessChain %39 %251 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFMul %324 %328 
                                                      OpStore %286 %329 
                              Uniform f32_4* %331 = OpAccessChain %39 %251 %330 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 0 0 
                                       f32_3 %336 = OpFMul %333 %335 
                                       f32_3 %337 = OpLoad %286 
                                       f32_3 %338 = OpFAdd %336 %337 
                                                      OpStore %286 %338 
                              Uniform f32_4* %340 = OpAccessChain %39 %251 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 2 2 2 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_3 %346 = OpLoad %286 
                                       f32_3 %347 = OpFAdd %345 %346 
                                                      OpStore %286 %347 
                              Uniform f32_4* %349 = OpAccessChain %39 %251 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 3 3 3 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %286 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore %286 %356 
                                       f32_3 %357 = OpLoad %286 
                                       f32_3 %358 = OpLoad %245 
                                       f32_3 %359 = OpVectorShuffle %358 %358 1 1 1 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %164 
                                       f32_3 %362 = OpFAdd %360 %361 
                                                      OpStore %164 %362 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 1 1 1 
                              Uniform f32_4* %366 = OpAccessChain %39 %251 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFMul %364 %368 
                                                      OpStore %286 %369 
                              Uniform f32_4* %371 = OpAccessChain %39 %251 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_3 %377 = OpLoad %286 
                                       f32_3 %378 = OpFAdd %376 %377 
                                                      OpStore %286 %378 
                              Uniform f32_4* %380 = OpAccessChain %39 %251 %379 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 2 2 2 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_3 %386 = OpLoad %286 
                                       f32_3 %387 = OpFAdd %385 %386 
                                       f32_4 %388 = OpLoad %9 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %9 %389 
                              Uniform f32_4* %391 = OpAccessChain %39 %251 %390 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 3 3 3 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_3 %399 = OpFAdd %396 %398 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %9 %401 
                                       f32_4 %402 = OpLoad %9 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_3 %404 = OpLoad %245 
                                       f32_3 %405 = OpVectorShuffle %404 %404 2 2 2 
                                       f32_3 %406 = OpFMul %403 %405 
                                       f32_3 %407 = OpLoad %164 
                                       f32_3 %408 = OpFAdd %406 %407 
                                       f32_4 %409 = OpLoad %9 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %9 %410 
                                       f32_3 %411 = OpLoad %245 
                                       f32_4 %412 = OpLoad %74 
                                       f32_4 %413 = OpVectorShuffle %412 %411 0 4 5 6 
                                                      OpStore %74 %413 
                                       f32_4 %415 = OpLoad %74 
                                         f32 %417 = OpDot %415 %416 
                                                      OpStore %414 %417 
                                         f32 %418 = OpLoad %414 
                                         f32 %419 = OpFNegate %418 
                                Private f32* %420 = OpAccessChain %9 %186 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFAdd %419 %421 
                                                      OpStore %55 %422 
                                         f32 %423 = OpLoad %55 
                                         f32 %424 = OpFAdd %423 %52 
                                                      OpStore %55 %424 
                                       f32_4 %427 = OpLoad %9 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                                         f32 %429 = OpLoad %55 
                                         f32 %430 = OpCompositeExtract %428 0 
                                         f32 %431 = OpCompositeExtract %428 1 
                                       f32_3 %432 = OpCompositeConstruct %430 %431 %429 
                                                      OpStore %426 %432 
                         read_only Texture2D %435 = OpLoad %434 
                                     sampler %437 = OpLoad %436 
                  read_only Texture2DSampled %440 = OpSampledImage %435 %437 
                                       f32_3 %441 = OpLoad %426 
                                         f32 %442 = OpCompositeExtract %441 2 
                                         f32 %443 = OpImageSampleDrefExplicitLod %440 %441 %442 Lod %6 
                                                      OpStore %433 %443 
                                Uniform f32* %444 = OpAccessChain %39 %264 %27 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFNegate %445 
                                         f32 %447 = OpFAdd %446 %52 
                                Private f32* %448 = OpAccessChain %208 %27 
                                                      OpStore %448 %447 
                                         f32 %451 = OpLoad %433 
                                       f32_4 %452 = OpCompositeConstruct %451 %451 %451 %451 
                                       f32_3 %453 = OpLoad %208 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 0 0 0 
                                       f32_4 %455 = OpFMul %452 %454 
                              Uniform f32_4* %456 = OpAccessChain %39 %264 
                                       f32_4 %457 = OpLoad %456 
                                       f32_4 %458 = OpVectorShuffle %457 %457 0 0 0 0 
                                       f32_4 %459 = OpFAdd %455 %458 
                                                      OpStore %450 %459 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 461
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %77 %80 %94 %450 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 RelaxedPrecision 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate vs_TEXCOORD3 Location 80 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %434 DescriptorSet 434 
                                                      OpDecorate %434 Binding 434 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %436 DescriptorSet 436 
                                                      OpDecorate %436 Binding 436 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %450 Location 450 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeArray %7 %32 
                                          u32 %35 = OpConstant 16 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeStruct %7 %7 %33 %34 %7 %36 %7 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          u32 %48 = OpConstant 1 
                                          f32 %52 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %74 = OpVariable Private 
                                              %75 = OpTypeVector %6 3 
                                              %76 = OpTypePointer Input %75 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %111 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 2 
                                         i32 %144 = OpConstant 3 
                                             %163 = OpTypePointer Private %75 
                              Private f32_3* %164 = OpVariable Private 
                                         u32 %186 = OpConstant 2 
                                             %199 = OpTypeBool 
                                             %200 = OpTypeVector %199 4 
                                             %201 = OpTypePointer Private %200 
                             Private bool_4* %202 = OpVariable Private 
                                         i32 %204 = OpConstant 4 
                              Private f32_3* %208 = OpVariable Private 
                                             %209 = OpTypePointer Private %199 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         f32 %226 = OpConstant 3.674022E-40 
                              Private f32_3* %245 = OpVariable Private 
                                       f32_3 %247 = OpConstantComposite %226 %226 %226 
                                         i32 %251 = OpConstant 5 
                                         i32 %264 = OpConstant 6 
                                         i32 %273 = OpConstant 7 
                              Private f32_3* %286 = OpVariable Private 
                                         i32 %325 = OpConstant 9 
                                         i32 %330 = OpConstant 8 
                                         i32 %339 = OpConstant 10 
                                         i32 %348 = OpConstant 11 
                                         i32 %365 = OpConstant 13 
                                         i32 %370 = OpConstant 12 
                                         i32 %379 = OpConstant 14 
                                         i32 %390 = OpConstant 15 
                                Private f32* %414 = OpVariable Private 
                                       f32_4 %416 = OpConstantComposite %52 %52 %52 %52 
                                             %425 = OpTypePointer Function %75 
                                Private f32* %433 = OpVariable Private 
        UniformConstant read_only Texture2D* %434 = OpVariable UniformConstant 
                    UniformConstant sampler* %436 = OpVariable UniformConstant 
                                             %438 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %439 = OpTypeSampledImage %438 
                                             %449 = OpTypePointer Output %7 
                               Output f32_4* %450 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %426 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %43 = OpAccessChain %39 %41 %27 
                                          f32 %44 = OpLoad %43 
                                 Private f32* %45 = OpAccessChain %9 %27 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Uniform f32* %49 = OpAccessChain %39 %41 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                                      OpStore %31 %51 
                                          f32 %53 = OpLoad %31 
                                          f32 %54 = OpFDiv %52 %53 
                                                      OpStore %31 %54 
                                          f32 %56 = OpLoad %31 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %39 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %55 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %31 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %31 %68 
                                 Private f32* %69 = OpAccessChain %9 %27 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                          f32 %72 = OpFAdd %71 %52 
                                 Private f32* %73 = OpAccessChain %9 %27 
                                                      OpStore %73 %72 
                                        f32_3 %78 = OpLoad vs_TEXCOORD2 
                                        f32_3 %79 = OpFNegate %78 
                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_4 %87 = OpLoad %74 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_3 %90 = OpLoad vs_TEXCOORD2 
                                        f32_3 %91 = OpFAdd %89 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 1 5 6 
                                                      OpStore %9 %93 
                                        f32_3 %95 = OpLoad vs_TEXCOORD1 
                                        f32_3 %96 = OpFNegate %95 
                                          f32 %97 = OpLoad %31 
                                        f32_3 %98 = OpCompositeConstruct %97 %97 %97 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 2 3 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 6 
                                                      OpStore %9 %104 
                                         f32 %105 = OpLoad %31 
                                       f32_3 %106 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD1 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %74 %110 
                              Uniform f32_4* %112 = OpAccessChain %39 %61 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 3 3 3 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 2 3 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %74 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %123 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %39 %125 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %124 %127 
                                                      OpStore %74 %128 
                              Uniform f32_4* %129 = OpAccessChain %39 %125 %41 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %74 %135 
                              Uniform f32_4* %136 = OpAccessChain %39 %125 %125 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %39 %125 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %143 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %39 %144 %41 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                       f32_4 %157 = OpLoad %74 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %74 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %158 %160 
                                Private f32* %162 = OpAccessChain %74 %27 
                                                      OpStore %162 %161 
                                       f32_4 %165 = OpLoad %9 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_4* %167 = OpAccessChain %39 %144 %61 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFNegate %169 
                                       f32_3 %171 = OpFAdd %166 %170 
                                                      OpStore %164 %171 
                                       f32_3 %172 = OpLoad %164 
                                       f32_3 %173 = OpLoad %164 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %74 %48 
                                                      OpStore %175 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                              Uniform f32_4* %178 = OpAccessChain %39 %144 %125 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFNegate %180 
                                       f32_3 %182 = OpFAdd %177 %181 
                                                      OpStore %164 %182 
                                       f32_3 %183 = OpLoad %164 
                                       f32_3 %184 = OpLoad %164 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %187 = OpAccessChain %74 %186 
                                                      OpStore %187 %185 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                              Uniform f32_4* %190 = OpAccessChain %39 %144 %144 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %189 %193 
                                                      OpStore %164 %194 
                                       f32_3 %195 = OpLoad %164 
                                       f32_3 %196 = OpLoad %164 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %74 %62 
                                                      OpStore %198 %197 
                                       f32_4 %203 = OpLoad %74 
                              Uniform f32_4* %205 = OpAccessChain %39 %204 
                                       f32_4 %206 = OpLoad %205 
                                      bool_4 %207 = OpFOrdLessThan %203 %206 
                                                      OpStore %202 %207 
                               Private bool* %210 = OpAccessChain %202 %27 
                                        bool %211 = OpLoad %210 
                                         f32 %214 = OpSelect %211 %212 %213 
                                Private f32* %215 = OpAccessChain %208 %27 
                                                      OpStore %215 %214 
                               Private bool* %216 = OpAccessChain %202 %48 
                                        bool %217 = OpLoad %216 
                                         f32 %218 = OpSelect %217 %212 %213 
                                Private f32* %219 = OpAccessChain %208 %48 
                                                      OpStore %219 %218 
                               Private bool* %220 = OpAccessChain %202 %186 
                                        bool %221 = OpLoad %220 
                                         f32 %222 = OpSelect %221 %212 %213 
                                Private f32* %223 = OpAccessChain %208 %186 
                                                      OpStore %223 %222 
                               Private bool* %224 = OpAccessChain %202 %27 
                                        bool %225 = OpLoad %224 
                                         f32 %227 = OpSelect %225 %52 %226 
                                Private f32* %228 = OpAccessChain %74 %27 
                                                      OpStore %228 %227 
                               Private bool* %229 = OpAccessChain %202 %48 
                                        bool %230 = OpLoad %229 
                                         f32 %231 = OpSelect %230 %52 %226 
                                Private f32* %232 = OpAccessChain %74 %48 
                                                      OpStore %232 %231 
                               Private bool* %233 = OpAccessChain %202 %186 
                                        bool %234 = OpLoad %233 
                                         f32 %235 = OpSelect %234 %52 %226 
                                Private f32* %236 = OpAccessChain %74 %186 
                                                      OpStore %236 %235 
                               Private bool* %237 = OpAccessChain %202 %62 
                                        bool %238 = OpLoad %237 
                                         f32 %239 = OpSelect %238 %52 %226 
                                Private f32* %240 = OpAccessChain %74 %62 
                                                      OpStore %240 %239 
                                       f32_3 %241 = OpLoad %208 
                                       f32_4 %242 = OpLoad %74 
                                       f32_3 %243 = OpVectorShuffle %242 %242 1 2 3 
                                       f32_3 %244 = OpFAdd %241 %243 
                                                      OpStore %208 %244 
                                       f32_3 %246 = OpLoad %208 
                                       f32_3 %248 = OpExtInst %1 40 %246 %247 
                                                      OpStore %245 %248 
                                       f32_4 %249 = OpLoad %9 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 1 1 
                              Uniform f32_4* %252 = OpAccessChain %39 %251 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %164 %255 
                              Uniform f32_4* %256 = OpAccessChain %39 %251 %204 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %164 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %164 %263 
                              Uniform f32_4* %265 = OpAccessChain %39 %251 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 2 2 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %164 
                                       f32_3 %272 = OpFAdd %270 %271 
                                                      OpStore %164 %272 
                              Uniform f32_4* %274 = OpAccessChain %39 %251 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 3 3 3 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_3 %280 = OpLoad %164 
                                       f32_3 %281 = OpFAdd %279 %280 
                                                      OpStore %164 %281 
                                       f32_3 %282 = OpLoad %245 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpLoad %164 
                                       f32_3 %285 = OpFMul %283 %284 
                                                      OpStore %164 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 1 1 1 
                              Uniform f32_4* %289 = OpAccessChain %39 %251 %61 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %288 %291 
                                                      OpStore %286 %292 
                              Uniform f32_4* %293 = OpAccessChain %39 %251 %41 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_4 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 0 0 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %299 = OpLoad %286 
                                       f32_3 %300 = OpFAdd %298 %299 
                                                      OpStore %286 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %251 %125 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %9 
                                       f32_3 %305 = OpVectorShuffle %304 %304 2 2 2 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %286 
                                       f32_3 %308 = OpFAdd %306 %307 
                                                      OpStore %286 %308 
                              Uniform f32_4* %309 = OpAccessChain %39 %251 %144 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 3 3 3 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %286 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %286 %316 
                                       f32_3 %317 = OpLoad %286 
                                       f32_4 %318 = OpLoad %74 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 0 0 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %164 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %164 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 1 1 1 
                              Uniform f32_4* %326 = OpAccessChain %39 %251 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFMul %324 %328 
                                                      OpStore %286 %329 
                              Uniform f32_4* %331 = OpAccessChain %39 %251 %330 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 0 0 
                                       f32_3 %336 = OpFMul %333 %335 
                                       f32_3 %337 = OpLoad %286 
                                       f32_3 %338 = OpFAdd %336 %337 
                                                      OpStore %286 %338 
                              Uniform f32_4* %340 = OpAccessChain %39 %251 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 2 2 2 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_3 %346 = OpLoad %286 
                                       f32_3 %347 = OpFAdd %345 %346 
                                                      OpStore %286 %347 
                              Uniform f32_4* %349 = OpAccessChain %39 %251 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 3 3 3 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %286 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore %286 %356 
                                       f32_3 %357 = OpLoad %286 
                                       f32_3 %358 = OpLoad %245 
                                       f32_3 %359 = OpVectorShuffle %358 %358 1 1 1 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %164 
                                       f32_3 %362 = OpFAdd %360 %361 
                                                      OpStore %164 %362 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 1 1 1 
                              Uniform f32_4* %366 = OpAccessChain %39 %251 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFMul %364 %368 
                                                      OpStore %286 %369 
                              Uniform f32_4* %371 = OpAccessChain %39 %251 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_3 %377 = OpLoad %286 
                                       f32_3 %378 = OpFAdd %376 %377 
                                                      OpStore %286 %378 
                              Uniform f32_4* %380 = OpAccessChain %39 %251 %379 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 2 2 2 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_3 %386 = OpLoad %286 
                                       f32_3 %387 = OpFAdd %385 %386 
                                       f32_4 %388 = OpLoad %9 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %9 %389 
                              Uniform f32_4* %391 = OpAccessChain %39 %251 %390 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 3 3 3 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_3 %399 = OpFAdd %396 %398 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %9 %401 
                                       f32_4 %402 = OpLoad %9 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_3 %404 = OpLoad %245 
                                       f32_3 %405 = OpVectorShuffle %404 %404 2 2 2 
                                       f32_3 %406 = OpFMul %403 %405 
                                       f32_3 %407 = OpLoad %164 
                                       f32_3 %408 = OpFAdd %406 %407 
                                       f32_4 %409 = OpLoad %9 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %9 %410 
                                       f32_3 %411 = OpLoad %245 
                                       f32_4 %412 = OpLoad %74 
                                       f32_4 %413 = OpVectorShuffle %412 %411 0 4 5 6 
                                                      OpStore %74 %413 
                                       f32_4 %415 = OpLoad %74 
                                         f32 %417 = OpDot %415 %416 
                                                      OpStore %414 %417 
                                         f32 %418 = OpLoad %414 
                                         f32 %419 = OpFNegate %418 
                                Private f32* %420 = OpAccessChain %9 %186 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFAdd %419 %421 
                                                      OpStore %55 %422 
                                         f32 %423 = OpLoad %55 
                                         f32 %424 = OpFAdd %423 %52 
                                                      OpStore %55 %424 
                                       f32_4 %427 = OpLoad %9 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                                         f32 %429 = OpLoad %55 
                                         f32 %430 = OpCompositeExtract %428 0 
                                         f32 %431 = OpCompositeExtract %428 1 
                                       f32_3 %432 = OpCompositeConstruct %430 %431 %429 
                                                      OpStore %426 %432 
                         read_only Texture2D %435 = OpLoad %434 
                                     sampler %437 = OpLoad %436 
                  read_only Texture2DSampled %440 = OpSampledImage %435 %437 
                                       f32_3 %441 = OpLoad %426 
                                         f32 %442 = OpCompositeExtract %441 2 
                                         f32 %443 = OpImageSampleDrefExplicitLod %440 %441 %442 Lod %6 
                                                      OpStore %433 %443 
                                Uniform f32* %444 = OpAccessChain %39 %264 %27 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFNegate %445 
                                         f32 %447 = OpFAdd %446 %52 
                                Private f32* %448 = OpAccessChain %208 %27 
                                                      OpStore %448 %447 
                                         f32 %451 = OpLoad %433 
                                       f32_4 %452 = OpCompositeConstruct %451 %451 %451 %451 
                                       f32_3 %453 = OpLoad %208 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 0 0 0 
                                       f32_4 %455 = OpFMul %452 %454 
                              Uniform f32_4* %456 = OpAccessChain %39 %264 
                                       f32_4 %457 = OpLoad %456 
                                       f32_4 %458 = OpVectorShuffle %457 %457 0 0 0 0 
                                       f32_4 %459 = OpFAdd %455 %458 
                                                      OpStore %450 %459 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 461
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %77 %80 %94 %450 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 RelaxedPrecision 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate vs_TEXCOORD3 Location 80 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %434 DescriptorSet 434 
                                                      OpDecorate %434 Binding 434 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %436 DescriptorSet 436 
                                                      OpDecorate %436 Binding 436 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %450 Location 450 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeArray %7 %32 
                                          u32 %35 = OpConstant 16 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeStruct %7 %7 %33 %34 %7 %36 %7 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          u32 %48 = OpConstant 1 
                                          f32 %52 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %74 = OpVariable Private 
                                              %75 = OpTypeVector %6 3 
                                              %76 = OpTypePointer Input %75 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %111 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 2 
                                         i32 %144 = OpConstant 3 
                                             %163 = OpTypePointer Private %75 
                              Private f32_3* %164 = OpVariable Private 
                                         u32 %186 = OpConstant 2 
                                             %199 = OpTypeBool 
                                             %200 = OpTypeVector %199 4 
                                             %201 = OpTypePointer Private %200 
                             Private bool_4* %202 = OpVariable Private 
                                         i32 %204 = OpConstant 4 
                              Private f32_3* %208 = OpVariable Private 
                                             %209 = OpTypePointer Private %199 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         f32 %226 = OpConstant 3.674022E-40 
                              Private f32_3* %245 = OpVariable Private 
                                       f32_3 %247 = OpConstantComposite %226 %226 %226 
                                         i32 %251 = OpConstant 5 
                                         i32 %264 = OpConstant 6 
                                         i32 %273 = OpConstant 7 
                              Private f32_3* %286 = OpVariable Private 
                                         i32 %325 = OpConstant 9 
                                         i32 %330 = OpConstant 8 
                                         i32 %339 = OpConstant 10 
                                         i32 %348 = OpConstant 11 
                                         i32 %365 = OpConstant 13 
                                         i32 %370 = OpConstant 12 
                                         i32 %379 = OpConstant 14 
                                         i32 %390 = OpConstant 15 
                                Private f32* %414 = OpVariable Private 
                                       f32_4 %416 = OpConstantComposite %52 %52 %52 %52 
                                             %425 = OpTypePointer Function %75 
                                Private f32* %433 = OpVariable Private 
        UniformConstant read_only Texture2D* %434 = OpVariable UniformConstant 
                    UniformConstant sampler* %436 = OpVariable UniformConstant 
                                             %438 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %439 = OpTypeSampledImage %438 
                                             %449 = OpTypePointer Output %7 
                               Output f32_4* %450 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %426 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %43 = OpAccessChain %39 %41 %27 
                                          f32 %44 = OpLoad %43 
                                 Private f32* %45 = OpAccessChain %9 %27 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Uniform f32* %49 = OpAccessChain %39 %41 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                                      OpStore %31 %51 
                                          f32 %53 = OpLoad %31 
                                          f32 %54 = OpFDiv %52 %53 
                                                      OpStore %31 %54 
                                          f32 %56 = OpLoad %31 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %39 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %55 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %31 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %31 %68 
                                 Private f32* %69 = OpAccessChain %9 %27 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                          f32 %72 = OpFAdd %71 %52 
                                 Private f32* %73 = OpAccessChain %9 %27 
                                                      OpStore %73 %72 
                                        f32_3 %78 = OpLoad vs_TEXCOORD2 
                                        f32_3 %79 = OpFNegate %78 
                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_4 %87 = OpLoad %74 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_3 %90 = OpLoad vs_TEXCOORD2 
                                        f32_3 %91 = OpFAdd %89 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 1 5 6 
                                                      OpStore %9 %93 
                                        f32_3 %95 = OpLoad vs_TEXCOORD1 
                                        f32_3 %96 = OpFNegate %95 
                                          f32 %97 = OpLoad %31 
                                        f32_3 %98 = OpCompositeConstruct %97 %97 %97 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 2 3 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 6 
                                                      OpStore %9 %104 
                                         f32 %105 = OpLoad %31 
                                       f32_3 %106 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD1 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %74 %110 
                              Uniform f32_4* %112 = OpAccessChain %39 %61 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 3 3 3 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 2 3 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %74 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %123 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %39 %125 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %124 %127 
                                                      OpStore %74 %128 
                              Uniform f32_4* %129 = OpAccessChain %39 %125 %41 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %74 %135 
                              Uniform f32_4* %136 = OpAccessChain %39 %125 %125 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %39 %125 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %143 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %39 %144 %41 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                       f32_4 %157 = OpLoad %74 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %74 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %158 %160 
                                Private f32* %162 = OpAccessChain %74 %27 
                                                      OpStore %162 %161 
                                       f32_4 %165 = OpLoad %9 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_4* %167 = OpAccessChain %39 %144 %61 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFNegate %169 
                                       f32_3 %171 = OpFAdd %166 %170 
                                                      OpStore %164 %171 
                                       f32_3 %172 = OpLoad %164 
                                       f32_3 %173 = OpLoad %164 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %74 %48 
                                                      OpStore %175 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                              Uniform f32_4* %178 = OpAccessChain %39 %144 %125 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFNegate %180 
                                       f32_3 %182 = OpFAdd %177 %181 
                                                      OpStore %164 %182 
                                       f32_3 %183 = OpLoad %164 
                                       f32_3 %184 = OpLoad %164 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %187 = OpAccessChain %74 %186 
                                                      OpStore %187 %185 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                              Uniform f32_4* %190 = OpAccessChain %39 %144 %144 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %189 %193 
                                                      OpStore %164 %194 
                                       f32_3 %195 = OpLoad %164 
                                       f32_3 %196 = OpLoad %164 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %74 %62 
                                                      OpStore %198 %197 
                                       f32_4 %203 = OpLoad %74 
                              Uniform f32_4* %205 = OpAccessChain %39 %204 
                                       f32_4 %206 = OpLoad %205 
                                      bool_4 %207 = OpFOrdLessThan %203 %206 
                                                      OpStore %202 %207 
                               Private bool* %210 = OpAccessChain %202 %27 
                                        bool %211 = OpLoad %210 
                                         f32 %214 = OpSelect %211 %212 %213 
                                Private f32* %215 = OpAccessChain %208 %27 
                                                      OpStore %215 %214 
                               Private bool* %216 = OpAccessChain %202 %48 
                                        bool %217 = OpLoad %216 
                                         f32 %218 = OpSelect %217 %212 %213 
                                Private f32* %219 = OpAccessChain %208 %48 
                                                      OpStore %219 %218 
                               Private bool* %220 = OpAccessChain %202 %186 
                                        bool %221 = OpLoad %220 
                                         f32 %222 = OpSelect %221 %212 %213 
                                Private f32* %223 = OpAccessChain %208 %186 
                                                      OpStore %223 %222 
                               Private bool* %224 = OpAccessChain %202 %27 
                                        bool %225 = OpLoad %224 
                                         f32 %227 = OpSelect %225 %52 %226 
                                Private f32* %228 = OpAccessChain %74 %27 
                                                      OpStore %228 %227 
                               Private bool* %229 = OpAccessChain %202 %48 
                                        bool %230 = OpLoad %229 
                                         f32 %231 = OpSelect %230 %52 %226 
                                Private f32* %232 = OpAccessChain %74 %48 
                                                      OpStore %232 %231 
                               Private bool* %233 = OpAccessChain %202 %186 
                                        bool %234 = OpLoad %233 
                                         f32 %235 = OpSelect %234 %52 %226 
                                Private f32* %236 = OpAccessChain %74 %186 
                                                      OpStore %236 %235 
                               Private bool* %237 = OpAccessChain %202 %62 
                                        bool %238 = OpLoad %237 
                                         f32 %239 = OpSelect %238 %52 %226 
                                Private f32* %240 = OpAccessChain %74 %62 
                                                      OpStore %240 %239 
                                       f32_3 %241 = OpLoad %208 
                                       f32_4 %242 = OpLoad %74 
                                       f32_3 %243 = OpVectorShuffle %242 %242 1 2 3 
                                       f32_3 %244 = OpFAdd %241 %243 
                                                      OpStore %208 %244 
                                       f32_3 %246 = OpLoad %208 
                                       f32_3 %248 = OpExtInst %1 40 %246 %247 
                                                      OpStore %245 %248 
                                       f32_4 %249 = OpLoad %9 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 1 1 
                              Uniform f32_4* %252 = OpAccessChain %39 %251 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %164 %255 
                              Uniform f32_4* %256 = OpAccessChain %39 %251 %204 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %164 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %164 %263 
                              Uniform f32_4* %265 = OpAccessChain %39 %251 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 2 2 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %164 
                                       f32_3 %272 = OpFAdd %270 %271 
                                                      OpStore %164 %272 
                              Uniform f32_4* %274 = OpAccessChain %39 %251 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 3 3 3 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_3 %280 = OpLoad %164 
                                       f32_3 %281 = OpFAdd %279 %280 
                                                      OpStore %164 %281 
                                       f32_3 %282 = OpLoad %245 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpLoad %164 
                                       f32_3 %285 = OpFMul %283 %284 
                                                      OpStore %164 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 1 1 1 
                              Uniform f32_4* %289 = OpAccessChain %39 %251 %61 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %288 %291 
                                                      OpStore %286 %292 
                              Uniform f32_4* %293 = OpAccessChain %39 %251 %41 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_4 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 0 0 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %299 = OpLoad %286 
                                       f32_3 %300 = OpFAdd %298 %299 
                                                      OpStore %286 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %251 %125 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %9 
                                       f32_3 %305 = OpVectorShuffle %304 %304 2 2 2 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %286 
                                       f32_3 %308 = OpFAdd %306 %307 
                                                      OpStore %286 %308 
                              Uniform f32_4* %309 = OpAccessChain %39 %251 %144 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 3 3 3 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %286 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %286 %316 
                                       f32_3 %317 = OpLoad %286 
                                       f32_4 %318 = OpLoad %74 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 0 0 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %164 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %164 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 1 1 1 
                              Uniform f32_4* %326 = OpAccessChain %39 %251 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFMul %324 %328 
                                                      OpStore %286 %329 
                              Uniform f32_4* %331 = OpAccessChain %39 %251 %330 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 0 0 
                                       f32_3 %336 = OpFMul %333 %335 
                                       f32_3 %337 = OpLoad %286 
                                       f32_3 %338 = OpFAdd %336 %337 
                                                      OpStore %286 %338 
                              Uniform f32_4* %340 = OpAccessChain %39 %251 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 2 2 2 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_3 %346 = OpLoad %286 
                                       f32_3 %347 = OpFAdd %345 %346 
                                                      OpStore %286 %347 
                              Uniform f32_4* %349 = OpAccessChain %39 %251 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 3 3 3 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %286 
                                       f32_3 %356 = OpFAdd %354 %355 
                                                      OpStore %286 %356 
                                       f32_3 %357 = OpLoad %286 
                                       f32_3 %358 = OpLoad %245 
                                       f32_3 %359 = OpVectorShuffle %358 %358 1 1 1 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %164 
                                       f32_3 %362 = OpFAdd %360 %361 
                                                      OpStore %164 %362 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 1 1 1 
                              Uniform f32_4* %366 = OpAccessChain %39 %251 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFMul %364 %368 
                                                      OpStore %286 %369 
                              Uniform f32_4* %371 = OpAccessChain %39 %251 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_3 %377 = OpLoad %286 
                                       f32_3 %378 = OpFAdd %376 %377 
                                                      OpStore %286 %378 
                              Uniform f32_4* %380 = OpAccessChain %39 %251 %379 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 2 2 2 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_3 %386 = OpLoad %286 
                                       f32_3 %387 = OpFAdd %385 %386 
                                       f32_4 %388 = OpLoad %9 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %9 %389 
                              Uniform f32_4* %391 = OpAccessChain %39 %251 %390 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 3 3 3 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_3 %399 = OpFAdd %396 %398 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %9 %401 
                                       f32_4 %402 = OpLoad %9 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_3 %404 = OpLoad %245 
                                       f32_3 %405 = OpVectorShuffle %404 %404 2 2 2 
                                       f32_3 %406 = OpFMul %403 %405 
                                       f32_3 %407 = OpLoad %164 
                                       f32_3 %408 = OpFAdd %406 %407 
                                       f32_4 %409 = OpLoad %9 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %9 %410 
                                       f32_3 %411 = OpLoad %245 
                                       f32_4 %412 = OpLoad %74 
                                       f32_4 %413 = OpVectorShuffle %412 %411 0 4 5 6 
                                                      OpStore %74 %413 
                                       f32_4 %415 = OpLoad %74 
                                         f32 %417 = OpDot %415 %416 
                                                      OpStore %414 %417 
                                         f32 %418 = OpLoad %414 
                                         f32 %419 = OpFNegate %418 
                                Private f32* %420 = OpAccessChain %9 %186 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFAdd %419 %421 
                                                      OpStore %55 %422 
                                         f32 %423 = OpLoad %55 
                                         f32 %424 = OpFAdd %423 %52 
                                                      OpStore %55 %424 
                                       f32_4 %427 = OpLoad %9 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                                         f32 %429 = OpLoad %55 
                                         f32 %430 = OpCompositeExtract %428 0 
                                         f32 %431 = OpCompositeExtract %428 1 
                                       f32_3 %432 = OpCompositeConstruct %430 %431 %429 
                                                      OpStore %426 %432 
                         read_only Texture2D %435 = OpLoad %434 
                                     sampler %437 = OpLoad %436 
                  read_only Texture2DSampled %440 = OpSampledImage %435 %437 
                                       f32_3 %441 = OpLoad %426 
                                         f32 %442 = OpCompositeExtract %441 2 
                                         f32 %443 = OpImageSampleDrefExplicitLod %440 %441 %442 Lod %6 
                                                      OpStore %433 %443 
                                Uniform f32* %444 = OpAccessChain %39 %264 %27 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFNegate %445 
                                         f32 %447 = OpFAdd %446 %52 
                                Private f32* %448 = OpAccessChain %208 %27 
                                                      OpStore %448 %447 
                                         f32 %451 = OpLoad %433 
                                       f32_4 %452 = OpCompositeConstruct %451 %451 %451 %451 
                                       f32_3 %453 = OpLoad %208 
                                       f32_4 %454 = OpVectorShuffle %453 %453 0 0 0 0 
                                       f32_4 %455 = OpFMul %452 %454 
                              Uniform f32_4* %456 = OpAccessChain %39 %264 
                                       f32_4 %457 = OpLoad %456 
                                       f32_4 %458 = OpVectorShuffle %457 %457 0 0 0 0 
                                       f32_4 %459 = OpFAdd %455 %458 
                                                      OpStore %450 %459 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat3 = float(1.0) / u_xlat3;
    u_xlat6 = (-u_xlat3) + u_xlat0.x;
    u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat3) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat3 = float(1.0) / u_xlat3;
    u_xlat6 = (-u_xlat3) + u_xlat0.x;
    u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat3) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat3 = float(1.0) / u_xlat3;
    u_xlat6 = (-u_xlat3) + u_xlat0.x;
    u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat3) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %217 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
                                Private f32* %198 = OpVariable Private 
        UniformConstant read_only Texture2D* %199 = OpVariable UniformConstant 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %204 = OpTypeSampledImage %203 
                                         f32 %207 = OpConstant 3.674022E-40 
                                Private f32* %210 = OpVariable Private 
                                         i32 %211 = OpConstant 4 
                                             %216 = OpTypePointer Output %7 
                               Output f32_4* %217 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %200 = OpLoad %199 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %205 = OpSampledImage %200 %202 
                                       f32_3 %206 = OpLoad %189 
                                         f32 %208 = OpCompositeExtract %206 2 
                                         f32 %209 = OpImageSampleDrefExplicitLod %205 %206 %208 Lod %6 
                                                      OpStore %198 %209 
                                Uniform f32* %212 = OpAccessChain %38 %211 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %214 %51 
                                                      OpStore %210 %215 
                                         f32 %218 = OpLoad %198 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                         f32 %220 = OpLoad %210 
                                       f32_4 %221 = OpCompositeConstruct %220 %220 %220 %220 
                                       f32_4 %222 = OpFMul %219 %221 
                              Uniform f32_4* %223 = OpAccessChain %38 %211 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpVectorShuffle %224 %224 0 0 0 0 
                                       f32_4 %226 = OpFAdd %222 %225 
                                                      OpStore %217 %226 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %217 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
                                Private f32* %198 = OpVariable Private 
        UniformConstant read_only Texture2D* %199 = OpVariable UniformConstant 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %204 = OpTypeSampledImage %203 
                                         f32 %207 = OpConstant 3.674022E-40 
                                Private f32* %210 = OpVariable Private 
                                         i32 %211 = OpConstant 4 
                                             %216 = OpTypePointer Output %7 
                               Output f32_4* %217 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %200 = OpLoad %199 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %205 = OpSampledImage %200 %202 
                                       f32_3 %206 = OpLoad %189 
                                         f32 %208 = OpCompositeExtract %206 2 
                                         f32 %209 = OpImageSampleDrefExplicitLod %205 %206 %208 Lod %6 
                                                      OpStore %198 %209 
                                Uniform f32* %212 = OpAccessChain %38 %211 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %214 %51 
                                                      OpStore %210 %215 
                                         f32 %218 = OpLoad %198 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                         f32 %220 = OpLoad %210 
                                       f32_4 %221 = OpCompositeConstruct %220 %220 %220 %220 
                                       f32_4 %222 = OpFMul %219 %221 
                              Uniform f32_4* %223 = OpAccessChain %38 %211 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpVectorShuffle %224 %224 0 0 0 0 
                                       f32_4 %226 = OpFAdd %222 %225 
                                                      OpStore %217 %226 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %217 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
                                Private f32* %198 = OpVariable Private 
        UniformConstant read_only Texture2D* %199 = OpVariable UniformConstant 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %204 = OpTypeSampledImage %203 
                                         f32 %207 = OpConstant 3.674022E-40 
                                Private f32* %210 = OpVariable Private 
                                         i32 %211 = OpConstant 4 
                                             %216 = OpTypePointer Output %7 
                               Output f32_4* %217 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %200 = OpLoad %199 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %205 = OpSampledImage %200 %202 
                                       f32_3 %206 = OpLoad %189 
                                         f32 %208 = OpCompositeExtract %206 2 
                                         f32 %209 = OpImageSampleDrefExplicitLod %205 %206 %208 Lod %6 
                                                      OpStore %198 %209 
                                Uniform f32* %212 = OpAccessChain %38 %211 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %214 %51 
                                                      OpStore %210 %215 
                                         f32 %218 = OpLoad %198 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                         f32 %220 = OpLoad %210 
                                       f32_4 %221 = OpCompositeConstruct %220 %220 %220 %220 
                                       f32_4 %222 = OpFMul %219 %221 
                              Uniform f32_4* %223 = OpAccessChain %38 %211 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpVectorShuffle %224 %224 0 0 0 0 
                                       f32_4 %226 = OpFAdd %222 %225 
                                                      OpStore %217 %226 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat3 = float(1.0) / u_xlat3;
    u_xlat6 = (-u_xlat3) + u_xlat0.x;
    u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat3) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat3 = float(1.0) / u_xlat3;
    u_xlat6 = (-u_xlat3) + u_xlat0.x;
    u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat3) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat3 = float(1.0) / u_xlat3;
    u_xlat6 = (-u_xlat3) + u_xlat0.x;
    u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat3) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %217 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
                                Private f32* %198 = OpVariable Private 
        UniformConstant read_only Texture2D* %199 = OpVariable UniformConstant 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %204 = OpTypeSampledImage %203 
                                         f32 %207 = OpConstant 3.674022E-40 
                                Private f32* %210 = OpVariable Private 
                                         i32 %211 = OpConstant 4 
                                             %216 = OpTypePointer Output %7 
                               Output f32_4* %217 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %200 = OpLoad %199 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %205 = OpSampledImage %200 %202 
                                       f32_3 %206 = OpLoad %189 
                                         f32 %208 = OpCompositeExtract %206 2 
                                         f32 %209 = OpImageSampleDrefExplicitLod %205 %206 %208 Lod %6 
                                                      OpStore %198 %209 
                                Uniform f32* %212 = OpAccessChain %38 %211 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %214 %51 
                                                      OpStore %210 %215 
                                         f32 %218 = OpLoad %198 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                         f32 %220 = OpLoad %210 
                                       f32_4 %221 = OpCompositeConstruct %220 %220 %220 %220 
                                       f32_4 %222 = OpFMul %219 %221 
                              Uniform f32_4* %223 = OpAccessChain %38 %211 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpVectorShuffle %224 %224 0 0 0 0 
                                       f32_4 %226 = OpFAdd %222 %225 
                                                      OpStore %217 %226 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %217 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
                                Private f32* %198 = OpVariable Private 
        UniformConstant read_only Texture2D* %199 = OpVariable UniformConstant 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %204 = OpTypeSampledImage %203 
                                         f32 %207 = OpConstant 3.674022E-40 
                                Private f32* %210 = OpVariable Private 
                                         i32 %211 = OpConstant 4 
                                             %216 = OpTypePointer Output %7 
                               Output f32_4* %217 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %200 = OpLoad %199 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %205 = OpSampledImage %200 %202 
                                       f32_3 %206 = OpLoad %189 
                                         f32 %208 = OpCompositeExtract %206 2 
                                         f32 %209 = OpImageSampleDrefExplicitLod %205 %206 %208 Lod %6 
                                                      OpStore %198 %209 
                                Uniform f32* %212 = OpAccessChain %38 %211 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %214 %51 
                                                      OpStore %210 %215 
                                         f32 %218 = OpLoad %198 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                         f32 %220 = OpLoad %210 
                                       f32_4 %221 = OpCompositeConstruct %220 %220 %220 %220 
                                       f32_4 %222 = OpFMul %219 %221 
                              Uniform f32_4* %223 = OpAccessChain %38 %211 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpVectorShuffle %224 %224 0 0 0 0 
                                       f32_4 %226 = OpFAdd %222 %225 
                                                      OpStore %217 %226 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %217 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
                                Private f32* %198 = OpVariable Private 
        UniformConstant read_only Texture2D* %199 = OpVariable UniformConstant 
                    UniformConstant sampler* %201 = OpVariable UniformConstant 
                                             %203 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %204 = OpTypeSampledImage %203 
                                         f32 %207 = OpConstant 3.674022E-40 
                                Private f32* %210 = OpVariable Private 
                                         i32 %211 = OpConstant 4 
                                             %216 = OpTypePointer Output %7 
                               Output f32_4* %217 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %200 = OpLoad %199 
                                     sampler %202 = OpLoad %201 
                  read_only Texture2DSampled %205 = OpSampledImage %200 %202 
                                       f32_3 %206 = OpLoad %189 
                                         f32 %208 = OpCompositeExtract %206 2 
                                         f32 %209 = OpImageSampleDrefExplicitLod %205 %206 %208 Lod %6 
                                                      OpStore %198 %209 
                                Uniform f32* %212 = OpAccessChain %38 %211 %27 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %214 %51 
                                                      OpStore %210 %215 
                                         f32 %218 = OpLoad %198 
                                       f32_4 %219 = OpCompositeConstruct %218 %218 %218 %218 
                                         f32 %220 = OpLoad %210 
                                       f32_4 %221 = OpCompositeConstruct %220 %220 %220 %220 
                                       f32_4 %222 = OpFMul %219 %221 
                              Uniform f32_4* %223 = OpAccessChain %38 %211 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpVectorShuffle %224 %224 0 0 0 0 
                                       f32_4 %226 = OpFAdd %222 %225 
                                                      OpStore %217 %226 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "HardShadow_FORCE_INV_PROJECTION_IN_PS" }
 Pass {
  Tags { "ShadowmapFilter" = "HardShadow_FORCE_INV_PROJECTION_IN_PS" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 106743
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_4;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 414
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %403 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 RelaxedPrecision 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 DescriptorSet 386 
                                                      OpDecorate %386 Binding 386 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %388 DescriptorSet 388 
                                                      OpDecorate %388 Binding 388 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %403 Location 403 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                              Private f32_4* %152 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         i32 %213 = OpConstant 7 
                                             %232 = OpTypePointer Private %42 
                              Private f32_3* %233 = OpVariable Private 
                                         i32 %275 = OpConstant 9 
                                         i32 %280 = OpConstant 8 
                                         i32 %289 = OpConstant 10 
                                         i32 %298 = OpConstant 11 
                                         i32 %318 = OpConstant 13 
                                         i32 %323 = OpConstant 12 
                                         i32 %332 = OpConstant 14 
                                         i32 %343 = OpConstant 15 
                                Private f32* %365 = OpVariable Private 
                                       f32_4 %367 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %369 = OpVariable Private 
                                             %377 = OpTypePointer Function %42 
                                Private f32* %385 = OpVariable Private 
        UniformConstant read_only Texture2D* %386 = OpVariable UniformConstant 
                    UniformConstant sampler* %388 = OpVariable UniformConstant 
                                             %390 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %391 = OpTypeSampledImage %390 
                                Private f32* %396 = OpVariable Private 
                                             %397 = OpTypePointer Uniform %6 
                                             %402 = OpTypePointer Output %7 
                               Output f32_4* %403 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %378 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %53 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFMul %153 %154 
                                                      OpStore %152 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %63 %66 %66 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %157 %159 
                                                      OpStore %135 %160 
                              Uniform f32_4* %161 = OpAccessChain %63 %66 %65 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %135 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %135 %167 
                              Uniform f32_4* %168 = OpAccessChain %63 %66 %78 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFNegate %171 
                                       f32_4 %173 = OpFMul %169 %172 
                                       f32_4 %174 = OpLoad %135 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %63 %66 %87 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %63 %182 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %181 %186 
                                       f32_4 %188 = OpLoad %135 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %135 %189 
                              Uniform f32_4* %190 = OpAccessChain %63 %182 %182 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %135 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                              Uniform f32_4* %202 = OpAccessChain %63 %182 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 2 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %135 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %135 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %135 %212 
                              Uniform f32_4* %214 = OpAccessChain %63 %182 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_4 %217 = OpLoad %9 
                                       f32_3 %218 = OpVectorShuffle %217 %217 3 3 3 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %135 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %135 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %135 %224 
                                       f32_4 %225 = OpLoad %152 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                                       f32_4 %227 = OpLoad %135 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %135 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %135 %231 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 1 1 1 
                              Uniform f32_4* %236 = OpAccessChain %63 %182 %66 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFMul %235 %238 
                                                      OpStore %233 %239 
                              Uniform f32_4* %240 = OpAccessChain %63 %182 %65 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %233 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %233 %247 
                              Uniform f32_4* %248 = OpAccessChain %63 %182 %78 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 2 2 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %233 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %233 %255 
                              Uniform f32_4* %256 = OpAccessChain %63 %182 %87 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 3 3 3 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %233 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %233 %263 
                                       f32_3 %264 = OpLoad %233 
                                       f32_4 %265 = OpLoad %152 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %135 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %135 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %135 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %182 %275 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %274 %278 
                                                      OpStore %233 %279 
                              Uniform f32_4* %281 = OpAccessChain %63 %182 %280 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %233 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %233 %288 
                              Uniform f32_4* %290 = OpAccessChain %63 %182 %289 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 2 2 2 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %233 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %233 %297 
                              Uniform f32_4* %299 = OpAccessChain %63 %182 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 3 3 3 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_3 %305 = OpLoad %233 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %233 %306 
                                       f32_3 %307 = OpLoad %233 
                                       f32_4 %308 = OpLoad %152 
                                       f32_3 %309 = OpVectorShuffle %308 %308 2 2 2 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %135 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFAdd %310 %312 
                                       f32_4 %314 = OpLoad %135 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %135 %315 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 1 1 1 
                              Uniform f32_4* %319 = OpAccessChain %63 %182 %318 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpFMul %317 %321 
                                                      OpStore %233 %322 
                              Uniform f32_4* %324 = OpAccessChain %63 %182 %323 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 0 0 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %233 
                                       f32_3 %331 = OpFAdd %329 %330 
                                                      OpStore %233 %331 
                              Uniform f32_4* %333 = OpAccessChain %63 %182 %332 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_4 %336 = OpLoad %9 
                                       f32_3 %337 = OpVectorShuffle %336 %336 2 2 2 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_3 %339 = OpLoad %233 
                                       f32_3 %340 = OpFAdd %338 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %9 %342 
                              Uniform f32_4* %344 = OpAccessChain %63 %182 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 3 3 3 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFAdd %349 %351 
                                       f32_4 %353 = OpLoad %9 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %9 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %152 
                                       f32_3 %358 = OpVectorShuffle %357 %357 3 3 3 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %135 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                                       f32_4 %366 = OpLoad %152 
                                         f32 %368 = OpDot %366 %367 
                                                      OpStore %365 %368 
                                         f32 %370 = OpLoad %365 
                                         f32 %371 = OpFNegate %370 
                                Private f32* %372 = OpAccessChain %9 %36 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFAdd %371 %373 
                                                      OpStore %369 %374 
                                         f32 %375 = OpLoad %369 
                                         f32 %376 = OpFAdd %375 %34 
                                                      OpStore %369 %376 
                                       f32_4 %379 = OpLoad %9 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                         f32 %381 = OpLoad %369 
                                         f32 %382 = OpCompositeExtract %380 0 
                                         f32 %383 = OpCompositeExtract %380 1 
                                       f32_3 %384 = OpCompositeConstruct %382 %383 %381 
                                                      OpStore %378 %384 
                         read_only Texture2D %387 = OpLoad %386 
                                     sampler %389 = OpLoad %388 
                  read_only Texture2DSampled %392 = OpSampledImage %387 %389 
                                       f32_3 %393 = OpLoad %378 
                                         f32 %394 = OpCompositeExtract %393 2 
                                         f32 %395 = OpImageSampleDrefExplicitLod %392 %393 %394 Lod %6 
                                                      OpStore %385 %395 
                                Uniform f32* %398 = OpAccessChain %63 %183 %27 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFNegate %399 
                                         f32 %401 = OpFAdd %400 %34 
                                                      OpStore %396 %401 
                                         f32 %404 = OpLoad %385 
                                       f32_4 %405 = OpCompositeConstruct %404 %404 %404 %404 
                                         f32 %406 = OpLoad %396 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpFMul %405 %407 
                              Uniform f32_4* %409 = OpAccessChain %63 %183 
                                       f32_4 %410 = OpLoad %409 
                                       f32_4 %411 = OpVectorShuffle %410 %410 0 0 0 0 
                                       f32_4 %412 = OpFAdd %408 %411 
                                                      OpStore %403 %412 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 414
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %403 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 RelaxedPrecision 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 DescriptorSet 386 
                                                      OpDecorate %386 Binding 386 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %388 DescriptorSet 388 
                                                      OpDecorate %388 Binding 388 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %403 Location 403 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                              Private f32_4* %152 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         i32 %213 = OpConstant 7 
                                             %232 = OpTypePointer Private %42 
                              Private f32_3* %233 = OpVariable Private 
                                         i32 %275 = OpConstant 9 
                                         i32 %280 = OpConstant 8 
                                         i32 %289 = OpConstant 10 
                                         i32 %298 = OpConstant 11 
                                         i32 %318 = OpConstant 13 
                                         i32 %323 = OpConstant 12 
                                         i32 %332 = OpConstant 14 
                                         i32 %343 = OpConstant 15 
                                Private f32* %365 = OpVariable Private 
                                       f32_4 %367 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %369 = OpVariable Private 
                                             %377 = OpTypePointer Function %42 
                                Private f32* %385 = OpVariable Private 
        UniformConstant read_only Texture2D* %386 = OpVariable UniformConstant 
                    UniformConstant sampler* %388 = OpVariable UniformConstant 
                                             %390 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %391 = OpTypeSampledImage %390 
                                Private f32* %396 = OpVariable Private 
                                             %397 = OpTypePointer Uniform %6 
                                             %402 = OpTypePointer Output %7 
                               Output f32_4* %403 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %378 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %53 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFMul %153 %154 
                                                      OpStore %152 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %63 %66 %66 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %157 %159 
                                                      OpStore %135 %160 
                              Uniform f32_4* %161 = OpAccessChain %63 %66 %65 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %135 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %135 %167 
                              Uniform f32_4* %168 = OpAccessChain %63 %66 %78 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFNegate %171 
                                       f32_4 %173 = OpFMul %169 %172 
                                       f32_4 %174 = OpLoad %135 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %63 %66 %87 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %63 %182 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %181 %186 
                                       f32_4 %188 = OpLoad %135 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %135 %189 
                              Uniform f32_4* %190 = OpAccessChain %63 %182 %182 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %135 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                              Uniform f32_4* %202 = OpAccessChain %63 %182 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 2 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %135 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %135 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %135 %212 
                              Uniform f32_4* %214 = OpAccessChain %63 %182 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_4 %217 = OpLoad %9 
                                       f32_3 %218 = OpVectorShuffle %217 %217 3 3 3 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %135 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %135 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %135 %224 
                                       f32_4 %225 = OpLoad %152 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                                       f32_4 %227 = OpLoad %135 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %135 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %135 %231 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 1 1 1 
                              Uniform f32_4* %236 = OpAccessChain %63 %182 %66 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFMul %235 %238 
                                                      OpStore %233 %239 
                              Uniform f32_4* %240 = OpAccessChain %63 %182 %65 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %233 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %233 %247 
                              Uniform f32_4* %248 = OpAccessChain %63 %182 %78 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 2 2 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %233 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %233 %255 
                              Uniform f32_4* %256 = OpAccessChain %63 %182 %87 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 3 3 3 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %233 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %233 %263 
                                       f32_3 %264 = OpLoad %233 
                                       f32_4 %265 = OpLoad %152 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %135 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %135 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %135 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %182 %275 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %274 %278 
                                                      OpStore %233 %279 
                              Uniform f32_4* %281 = OpAccessChain %63 %182 %280 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %233 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %233 %288 
                              Uniform f32_4* %290 = OpAccessChain %63 %182 %289 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 2 2 2 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %233 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %233 %297 
                              Uniform f32_4* %299 = OpAccessChain %63 %182 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 3 3 3 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_3 %305 = OpLoad %233 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %233 %306 
                                       f32_3 %307 = OpLoad %233 
                                       f32_4 %308 = OpLoad %152 
                                       f32_3 %309 = OpVectorShuffle %308 %308 2 2 2 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %135 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFAdd %310 %312 
                                       f32_4 %314 = OpLoad %135 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %135 %315 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 1 1 1 
                              Uniform f32_4* %319 = OpAccessChain %63 %182 %318 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpFMul %317 %321 
                                                      OpStore %233 %322 
                              Uniform f32_4* %324 = OpAccessChain %63 %182 %323 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 0 0 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %233 
                                       f32_3 %331 = OpFAdd %329 %330 
                                                      OpStore %233 %331 
                              Uniform f32_4* %333 = OpAccessChain %63 %182 %332 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_4 %336 = OpLoad %9 
                                       f32_3 %337 = OpVectorShuffle %336 %336 2 2 2 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_3 %339 = OpLoad %233 
                                       f32_3 %340 = OpFAdd %338 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %9 %342 
                              Uniform f32_4* %344 = OpAccessChain %63 %182 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 3 3 3 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFAdd %349 %351 
                                       f32_4 %353 = OpLoad %9 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %9 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %152 
                                       f32_3 %358 = OpVectorShuffle %357 %357 3 3 3 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %135 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                                       f32_4 %366 = OpLoad %152 
                                         f32 %368 = OpDot %366 %367 
                                                      OpStore %365 %368 
                                         f32 %370 = OpLoad %365 
                                         f32 %371 = OpFNegate %370 
                                Private f32* %372 = OpAccessChain %9 %36 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFAdd %371 %373 
                                                      OpStore %369 %374 
                                         f32 %375 = OpLoad %369 
                                         f32 %376 = OpFAdd %375 %34 
                                                      OpStore %369 %376 
                                       f32_4 %379 = OpLoad %9 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                         f32 %381 = OpLoad %369 
                                         f32 %382 = OpCompositeExtract %380 0 
                                         f32 %383 = OpCompositeExtract %380 1 
                                       f32_3 %384 = OpCompositeConstruct %382 %383 %381 
                                                      OpStore %378 %384 
                         read_only Texture2D %387 = OpLoad %386 
                                     sampler %389 = OpLoad %388 
                  read_only Texture2DSampled %392 = OpSampledImage %387 %389 
                                       f32_3 %393 = OpLoad %378 
                                         f32 %394 = OpCompositeExtract %393 2 
                                         f32 %395 = OpImageSampleDrefExplicitLod %392 %393 %394 Lod %6 
                                                      OpStore %385 %395 
                                Uniform f32* %398 = OpAccessChain %63 %183 %27 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFNegate %399 
                                         f32 %401 = OpFAdd %400 %34 
                                                      OpStore %396 %401 
                                         f32 %404 = OpLoad %385 
                                       f32_4 %405 = OpCompositeConstruct %404 %404 %404 %404 
                                         f32 %406 = OpLoad %396 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpFMul %405 %407 
                              Uniform f32_4* %409 = OpAccessChain %63 %183 
                                       f32_4 %410 = OpLoad %409 
                                       f32_4 %411 = OpVectorShuffle %410 %410 0 0 0 0 
                                       f32_4 %412 = OpFAdd %408 %411 
                                                      OpStore %403 %412 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 414
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %403 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 RelaxedPrecision 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 DescriptorSet 386 
                                                      OpDecorate %386 Binding 386 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %388 DescriptorSet 388 
                                                      OpDecorate %388 Binding 388 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %403 Location 403 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                              Private f32_4* %152 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         i32 %213 = OpConstant 7 
                                             %232 = OpTypePointer Private %42 
                              Private f32_3* %233 = OpVariable Private 
                                         i32 %275 = OpConstant 9 
                                         i32 %280 = OpConstant 8 
                                         i32 %289 = OpConstant 10 
                                         i32 %298 = OpConstant 11 
                                         i32 %318 = OpConstant 13 
                                         i32 %323 = OpConstant 12 
                                         i32 %332 = OpConstant 14 
                                         i32 %343 = OpConstant 15 
                                Private f32* %365 = OpVariable Private 
                                       f32_4 %367 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %369 = OpVariable Private 
                                             %377 = OpTypePointer Function %42 
                                Private f32* %385 = OpVariable Private 
        UniformConstant read_only Texture2D* %386 = OpVariable UniformConstant 
                    UniformConstant sampler* %388 = OpVariable UniformConstant 
                                             %390 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %391 = OpTypeSampledImage %390 
                                Private f32* %396 = OpVariable Private 
                                             %397 = OpTypePointer Uniform %6 
                                             %402 = OpTypePointer Output %7 
                               Output f32_4* %403 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %378 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %53 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFMul %153 %154 
                                                      OpStore %152 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %63 %66 %66 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %157 %159 
                                                      OpStore %135 %160 
                              Uniform f32_4* %161 = OpAccessChain %63 %66 %65 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %135 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %135 %167 
                              Uniform f32_4* %168 = OpAccessChain %63 %66 %78 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFNegate %171 
                                       f32_4 %173 = OpFMul %169 %172 
                                       f32_4 %174 = OpLoad %135 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %63 %66 %87 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %63 %182 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %181 %186 
                                       f32_4 %188 = OpLoad %135 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %135 %189 
                              Uniform f32_4* %190 = OpAccessChain %63 %182 %182 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %135 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                              Uniform f32_4* %202 = OpAccessChain %63 %182 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 2 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %135 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %135 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %135 %212 
                              Uniform f32_4* %214 = OpAccessChain %63 %182 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_4 %217 = OpLoad %9 
                                       f32_3 %218 = OpVectorShuffle %217 %217 3 3 3 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %135 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %135 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %135 %224 
                                       f32_4 %225 = OpLoad %152 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                                       f32_4 %227 = OpLoad %135 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %135 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %135 %231 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 1 1 1 
                              Uniform f32_4* %236 = OpAccessChain %63 %182 %66 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFMul %235 %238 
                                                      OpStore %233 %239 
                              Uniform f32_4* %240 = OpAccessChain %63 %182 %65 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %233 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %233 %247 
                              Uniform f32_4* %248 = OpAccessChain %63 %182 %78 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 2 2 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %233 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %233 %255 
                              Uniform f32_4* %256 = OpAccessChain %63 %182 %87 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 3 3 3 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %233 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %233 %263 
                                       f32_3 %264 = OpLoad %233 
                                       f32_4 %265 = OpLoad %152 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %135 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %135 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %135 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %63 %182 %275 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %274 %278 
                                                      OpStore %233 %279 
                              Uniform f32_4* %281 = OpAccessChain %63 %182 %280 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %233 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %233 %288 
                              Uniform f32_4* %290 = OpAccessChain %63 %182 %289 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_4 %293 = OpLoad %9 
                                       f32_3 %294 = OpVectorShuffle %293 %293 2 2 2 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %233 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %233 %297 
                              Uniform f32_4* %299 = OpAccessChain %63 %182 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 3 3 3 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_3 %305 = OpLoad %233 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %233 %306 
                                       f32_3 %307 = OpLoad %233 
                                       f32_4 %308 = OpLoad %152 
                                       f32_3 %309 = OpVectorShuffle %308 %308 2 2 2 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %135 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFAdd %310 %312 
                                       f32_4 %314 = OpLoad %135 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %135 %315 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 1 1 1 
                              Uniform f32_4* %319 = OpAccessChain %63 %182 %318 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpFMul %317 %321 
                                                      OpStore %233 %322 
                              Uniform f32_4* %324 = OpAccessChain %63 %182 %323 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 0 0 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %233 
                                       f32_3 %331 = OpFAdd %329 %330 
                                                      OpStore %233 %331 
                              Uniform f32_4* %333 = OpAccessChain %63 %182 %332 
                                       f32_4 %334 = OpLoad %333 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_4 %336 = OpLoad %9 
                                       f32_3 %337 = OpVectorShuffle %336 %336 2 2 2 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_3 %339 = OpLoad %233 
                                       f32_3 %340 = OpFAdd %338 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %9 %342 
                              Uniform f32_4* %344 = OpAccessChain %63 %182 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 3 3 3 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFAdd %349 %351 
                                       f32_4 %353 = OpLoad %9 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %9 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %152 
                                       f32_3 %358 = OpVectorShuffle %357 %357 3 3 3 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %135 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                                       f32_4 %366 = OpLoad %152 
                                         f32 %368 = OpDot %366 %367 
                                                      OpStore %365 %368 
                                         f32 %370 = OpLoad %365 
                                         f32 %371 = OpFNegate %370 
                                Private f32* %372 = OpAccessChain %9 %36 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFAdd %371 %373 
                                                      OpStore %369 %374 
                                         f32 %375 = OpLoad %369 
                                         f32 %376 = OpFAdd %375 %34 
                                                      OpStore %369 %376 
                                       f32_4 %379 = OpLoad %9 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                         f32 %381 = OpLoad %369 
                                         f32 %382 = OpCompositeExtract %380 0 
                                         f32 %383 = OpCompositeExtract %380 1 
                                       f32_3 %384 = OpCompositeConstruct %382 %383 %381 
                                                      OpStore %378 %384 
                         read_only Texture2D %387 = OpLoad %386 
                                     sampler %389 = OpLoad %388 
                  read_only Texture2DSampled %392 = OpSampledImage %387 %389 
                                       f32_3 %393 = OpLoad %378 
                                         f32 %394 = OpCompositeExtract %393 2 
                                         f32 %395 = OpImageSampleDrefExplicitLod %392 %393 %394 Lod %6 
                                                      OpStore %385 %395 
                                Uniform f32* %398 = OpAccessChain %63 %183 %27 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFNegate %399 
                                         f32 %401 = OpFAdd %400 %34 
                                                      OpStore %396 %401 
                                         f32 %404 = OpLoad %385 
                                       f32_4 %405 = OpCompositeConstruct %404 %404 %404 %404 
                                         f32 %406 = OpLoad %396 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpFMul %405 %407 
                              Uniform f32_4* %409 = OpAccessChain %63 %183 
                                       f32_4 %410 = OpLoad %409 
                                       f32_4 %411 = OpVectorShuffle %410 %410 0 0 0 0 
                                       f32_4 %412 = OpFAdd %408 %411 
                                                      OpStore %403 %412 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat5;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * u_xlat16_3.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat5;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * u_xlat16_3.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat5;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * u_xlat16_3.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 438
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %427 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 RelaxedPrecision 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %410 DescriptorSet 410 
                                                      OpDecorate %410 Binding 410 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %427 Location 427 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                                             %138 = OpTypePointer Private %42 
                              Private f32_3* %139 = OpVariable Private 
                                         u32 %150 = OpConstant 1 
                                         u32 %173 = OpConstant 3 
                                             %175 = OpTypeBool 
                                             %176 = OpTypeVector %175 4 
                                             %177 = OpTypePointer Private %176 
                             Private bool_4* %178 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                             %184 = OpTypePointer Private %175 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %200 = OpConstant 3.674022E-40 
                              Private f32_3* %219 = OpVariable Private 
                                       f32_3 %221 = OpConstantComposite %200 %200 %200 
                                         i32 %225 = OpConstant 4 
                                         i32 %226 = OpConstant 5 
                                         i32 %239 = OpConstant 6 
                                         i32 %248 = OpConstant 7 
                              Private f32_3* %261 = OpVariable Private 
                                         i32 %300 = OpConstant 9 
                                         i32 %305 = OpConstant 8 
                                         i32 %314 = OpConstant 10 
                                         i32 %323 = OpConstant 11 
                                         i32 %340 = OpConstant 13 
                                         i32 %345 = OpConstant 12 
                                         i32 %354 = OpConstant 14 
                                         i32 %365 = OpConstant 15 
                                Private f32* %389 = OpVariable Private 
                                       f32_4 %391 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %393 = OpVariable Private 
                                             %401 = OpTypePointer Function %42 
                                Private f32* %409 = OpVariable Private 
        UniformConstant read_only Texture2D* %410 = OpVariable UniformConstant 
                    UniformConstant sampler* %412 = OpVariable UniformConstant 
                                             %414 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %415 = OpTypeSampledImage %414 
                                             %420 = OpTypePointer Uniform %6 
                                             %426 = OpTypePointer Output %7 
                               Output f32_4* %427 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %402 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %140 = OpLoad %9 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_4* %142 = OpAccessChain %64 %79 %67 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_3 %148 = OpLoad %139 
                                         f32 %149 = OpDot %147 %148 
                                Private f32* %151 = OpAccessChain %53 %150 
                                                      OpStore %151 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                              Uniform f32_4* %154 = OpAccessChain %64 %79 %79 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFNegate %156 
                                       f32_3 %158 = OpFAdd %153 %157 
                                                      OpStore %139 %158 
                                       f32_3 %159 = OpLoad %139 
                                       f32_3 %160 = OpLoad %139 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %162 = OpAccessChain %53 %36 
                                                      OpStore %162 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %64 %79 %88 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %169 = OpFAdd %164 %168 
                                                      OpStore %139 %169 
                                       f32_3 %170 = OpLoad %139 
                                       f32_3 %171 = OpLoad %139 
                                         f32 %172 = OpDot %170 %171 
                                Private f32* %174 = OpAccessChain %53 %173 
                                                      OpStore %174 %172 
                                       f32_4 %179 = OpLoad %53 
                              Uniform f32_4* %180 = OpAccessChain %64 %88 
                                       f32_4 %181 = OpLoad %180 
                                      bool_4 %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %178 %182 
                               Private bool* %185 = OpAccessChain %178 %27 
                                        bool %186 = OpLoad %185 
                                         f32 %188 = OpSelect %186 %48 %187 
                                Private f32* %189 = OpAccessChain %183 %27 
                                                      OpStore %189 %188 
                               Private bool* %190 = OpAccessChain %178 %150 
                                        bool %191 = OpLoad %190 
                                         f32 %192 = OpSelect %191 %48 %187 
                                Private f32* %193 = OpAccessChain %183 %150 
                                                      OpStore %193 %192 
                               Private bool* %194 = OpAccessChain %178 %36 
                                        bool %195 = OpLoad %194 
                                         f32 %196 = OpSelect %195 %48 %187 
                                Private f32* %197 = OpAccessChain %183 %36 
                                                      OpStore %197 %196 
                               Private bool* %198 = OpAccessChain %178 %27 
                                        bool %199 = OpLoad %198 
                                         f32 %201 = OpSelect %199 %34 %200 
                                Private f32* %202 = OpAccessChain %53 %27 
                                                      OpStore %202 %201 
                               Private bool* %203 = OpAccessChain %178 %150 
                                        bool %204 = OpLoad %203 
                                         f32 %205 = OpSelect %204 %34 %200 
                                Private f32* %206 = OpAccessChain %53 %150 
                                                      OpStore %206 %205 
                               Private bool* %207 = OpAccessChain %178 %36 
                                        bool %208 = OpLoad %207 
                                         f32 %209 = OpSelect %208 %34 %200 
                                Private f32* %210 = OpAccessChain %53 %36 
                                                      OpStore %210 %209 
                               Private bool* %211 = OpAccessChain %178 %173 
                                        bool %212 = OpLoad %211 
                                         f32 %213 = OpSelect %212 %34 %200 
                                Private f32* %214 = OpAccessChain %53 %173 
                                                      OpStore %214 %213 
                                       f32_3 %215 = OpLoad %183 
                                       f32_4 %216 = OpLoad %53 
                                       f32_3 %217 = OpVectorShuffle %216 %216 1 2 3 
                                       f32_3 %218 = OpFAdd %215 %217 
                                                      OpStore %183 %218 
                                       f32_3 %220 = OpLoad %183 
                                       f32_3 %222 = OpExtInst %1 40 %220 %221 
                                                      OpStore %219 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %64 %225 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %224 %229 
                                                      OpStore %139 %230 
                              Uniform f32_4* %231 = OpAccessChain %64 %225 %225 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_3 %237 = OpLoad %139 
                                       f32_3 %238 = OpFAdd %236 %237 
                                                      OpStore %139 %238 
                              Uniform f32_4* %240 = OpAccessChain %64 %225 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 2 2 2 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %139 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %139 %247 
                              Uniform f32_4* %249 = OpAccessChain %64 %225 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %139 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %139 %256 
                                       f32_3 %257 = OpLoad %219 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpLoad %139 
                                       f32_3 %260 = OpFMul %258 %259 
                                                      OpStore %139 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 1 1 1 
                              Uniform f32_4* %264 = OpAccessChain %64 %225 %67 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %263 %266 
                                                      OpStore %261 %267 
                              Uniform f32_4* %268 = OpAccessChain %64 %225 %66 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %261 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %261 %275 
                              Uniform f32_4* %276 = OpAccessChain %64 %225 %79 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 2 2 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_3 %282 = OpLoad %261 
                                       f32_3 %283 = OpFAdd %281 %282 
                                                      OpStore %261 %283 
                              Uniform f32_4* %284 = OpAccessChain %64 %225 %88 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 3 3 3 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_3 %290 = OpLoad %261 
                                       f32_3 %291 = OpFAdd %289 %290 
                                                      OpStore %261 %291 
                                       f32_3 %292 = OpLoad %261 
                                       f32_4 %293 = OpLoad %53 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %139 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %139 %297 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %64 %225 %300 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFMul %299 %303 
                                                      OpStore %261 %304 
                              Uniform f32_4* %306 = OpAccessChain %64 %225 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 0 0 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_3 %312 = OpLoad %261 
                                       f32_3 %313 = OpFAdd %311 %312 
                                                      OpStore %261 %313 
                              Uniform f32_4* %315 = OpAccessChain %64 %225 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_4 %318 = OpLoad %9 
                                       f32_3 %319 = OpVectorShuffle %318 %318 2 2 2 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %261 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %261 %322 
                              Uniform f32_4* %324 = OpAccessChain %64 %225 %323 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 3 3 3 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %261 
                                       f32_3 %331 = OpFAdd %329 %330 
                                                      OpStore %261 %331 
                                       f32_3 %332 = OpLoad %261 
                                       f32_3 %333 = OpLoad %219 
                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
                                       f32_3 %335 = OpFMul %332 %334 
                                       f32_3 %336 = OpLoad %139 
                                       f32_3 %337 = OpFAdd %335 %336 
                                                      OpStore %139 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %341 = OpAccessChain %64 %225 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                                      OpStore %261 %344 
                              Uniform f32_4* %346 = OpAccessChain %64 %225 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %261 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %261 %353 
                              Uniform f32_4* %355 = OpAccessChain %64 %225 %354 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %261 
                                       f32_3 %362 = OpFAdd %360 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                              Uniform f32_4* %366 = OpAccessChain %64 %225 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %371 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpLoad %219 
                                       f32_3 %380 = OpVectorShuffle %379 %379 2 2 2 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_3 %382 = OpLoad %139 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %386 = OpLoad %219 
                                       f32_4 %387 = OpLoad %53 
                                       f32_4 %388 = OpVectorShuffle %387 %386 0 4 5 6 
                                                      OpStore %53 %388 
                                       f32_4 %390 = OpLoad %53 
                                         f32 %392 = OpDot %390 %391 
                                                      OpStore %389 %392 
                                         f32 %394 = OpLoad %389 
                                         f32 %395 = OpFNegate %394 
                                Private f32* %396 = OpAccessChain %9 %36 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFAdd %395 %397 
                                                      OpStore %393 %398 
                                         f32 %399 = OpLoad %393 
                                         f32 %400 = OpFAdd %399 %34 
                                                      OpStore %393 %400 
                                       f32_4 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                         f32 %405 = OpLoad %393 
                                         f32 %406 = OpCompositeExtract %404 0 
                                         f32 %407 = OpCompositeExtract %404 1 
                                       f32_3 %408 = OpCompositeConstruct %406 %407 %405 
                                                      OpStore %402 %408 
                         read_only Texture2D %411 = OpLoad %410 
                                     sampler %413 = OpLoad %412 
                  read_only Texture2DSampled %416 = OpSampledImage %411 %413 
                                       f32_3 %417 = OpLoad %402 
                                         f32 %418 = OpCompositeExtract %417 2 
                                         f32 %419 = OpImageSampleDrefExplicitLod %416 %417 %418 Lod %6 
                                                      OpStore %409 %419 
                                Uniform f32* %421 = OpAccessChain %64 %226 %27 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFNegate %422 
                                         f32 %424 = OpFAdd %423 %34 
                                Private f32* %425 = OpAccessChain %183 %27 
                                                      OpStore %425 %424 
                                         f32 %428 = OpLoad %409 
                                       f32_4 %429 = OpCompositeConstruct %428 %428 %428 %428 
                                       f32_3 %430 = OpLoad %183 
                                       f32_4 %431 = OpVectorShuffle %430 %430 0 0 0 0 
                                       f32_4 %432 = OpFMul %429 %431 
                              Uniform f32_4* %433 = OpAccessChain %64 %226 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %435 = OpVectorShuffle %434 %434 0 0 0 0 
                                       f32_4 %436 = OpFAdd %432 %435 
                                                      OpStore %427 %436 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 438
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %427 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 RelaxedPrecision 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %410 DescriptorSet 410 
                                                      OpDecorate %410 Binding 410 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %427 Location 427 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                                             %138 = OpTypePointer Private %42 
                              Private f32_3* %139 = OpVariable Private 
                                         u32 %150 = OpConstant 1 
                                         u32 %173 = OpConstant 3 
                                             %175 = OpTypeBool 
                                             %176 = OpTypeVector %175 4 
                                             %177 = OpTypePointer Private %176 
                             Private bool_4* %178 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                             %184 = OpTypePointer Private %175 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %200 = OpConstant 3.674022E-40 
                              Private f32_3* %219 = OpVariable Private 
                                       f32_3 %221 = OpConstantComposite %200 %200 %200 
                                         i32 %225 = OpConstant 4 
                                         i32 %226 = OpConstant 5 
                                         i32 %239 = OpConstant 6 
                                         i32 %248 = OpConstant 7 
                              Private f32_3* %261 = OpVariable Private 
                                         i32 %300 = OpConstant 9 
                                         i32 %305 = OpConstant 8 
                                         i32 %314 = OpConstant 10 
                                         i32 %323 = OpConstant 11 
                                         i32 %340 = OpConstant 13 
                                         i32 %345 = OpConstant 12 
                                         i32 %354 = OpConstant 14 
                                         i32 %365 = OpConstant 15 
                                Private f32* %389 = OpVariable Private 
                                       f32_4 %391 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %393 = OpVariable Private 
                                             %401 = OpTypePointer Function %42 
                                Private f32* %409 = OpVariable Private 
        UniformConstant read_only Texture2D* %410 = OpVariable UniformConstant 
                    UniformConstant sampler* %412 = OpVariable UniformConstant 
                                             %414 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %415 = OpTypeSampledImage %414 
                                             %420 = OpTypePointer Uniform %6 
                                             %426 = OpTypePointer Output %7 
                               Output f32_4* %427 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %402 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %140 = OpLoad %9 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_4* %142 = OpAccessChain %64 %79 %67 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_3 %148 = OpLoad %139 
                                         f32 %149 = OpDot %147 %148 
                                Private f32* %151 = OpAccessChain %53 %150 
                                                      OpStore %151 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                              Uniform f32_4* %154 = OpAccessChain %64 %79 %79 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFNegate %156 
                                       f32_3 %158 = OpFAdd %153 %157 
                                                      OpStore %139 %158 
                                       f32_3 %159 = OpLoad %139 
                                       f32_3 %160 = OpLoad %139 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %162 = OpAccessChain %53 %36 
                                                      OpStore %162 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %64 %79 %88 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %169 = OpFAdd %164 %168 
                                                      OpStore %139 %169 
                                       f32_3 %170 = OpLoad %139 
                                       f32_3 %171 = OpLoad %139 
                                         f32 %172 = OpDot %170 %171 
                                Private f32* %174 = OpAccessChain %53 %173 
                                                      OpStore %174 %172 
                                       f32_4 %179 = OpLoad %53 
                              Uniform f32_4* %180 = OpAccessChain %64 %88 
                                       f32_4 %181 = OpLoad %180 
                                      bool_4 %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %178 %182 
                               Private bool* %185 = OpAccessChain %178 %27 
                                        bool %186 = OpLoad %185 
                                         f32 %188 = OpSelect %186 %48 %187 
                                Private f32* %189 = OpAccessChain %183 %27 
                                                      OpStore %189 %188 
                               Private bool* %190 = OpAccessChain %178 %150 
                                        bool %191 = OpLoad %190 
                                         f32 %192 = OpSelect %191 %48 %187 
                                Private f32* %193 = OpAccessChain %183 %150 
                                                      OpStore %193 %192 
                               Private bool* %194 = OpAccessChain %178 %36 
                                        bool %195 = OpLoad %194 
                                         f32 %196 = OpSelect %195 %48 %187 
                                Private f32* %197 = OpAccessChain %183 %36 
                                                      OpStore %197 %196 
                               Private bool* %198 = OpAccessChain %178 %27 
                                        bool %199 = OpLoad %198 
                                         f32 %201 = OpSelect %199 %34 %200 
                                Private f32* %202 = OpAccessChain %53 %27 
                                                      OpStore %202 %201 
                               Private bool* %203 = OpAccessChain %178 %150 
                                        bool %204 = OpLoad %203 
                                         f32 %205 = OpSelect %204 %34 %200 
                                Private f32* %206 = OpAccessChain %53 %150 
                                                      OpStore %206 %205 
                               Private bool* %207 = OpAccessChain %178 %36 
                                        bool %208 = OpLoad %207 
                                         f32 %209 = OpSelect %208 %34 %200 
                                Private f32* %210 = OpAccessChain %53 %36 
                                                      OpStore %210 %209 
                               Private bool* %211 = OpAccessChain %178 %173 
                                        bool %212 = OpLoad %211 
                                         f32 %213 = OpSelect %212 %34 %200 
                                Private f32* %214 = OpAccessChain %53 %173 
                                                      OpStore %214 %213 
                                       f32_3 %215 = OpLoad %183 
                                       f32_4 %216 = OpLoad %53 
                                       f32_3 %217 = OpVectorShuffle %216 %216 1 2 3 
                                       f32_3 %218 = OpFAdd %215 %217 
                                                      OpStore %183 %218 
                                       f32_3 %220 = OpLoad %183 
                                       f32_3 %222 = OpExtInst %1 40 %220 %221 
                                                      OpStore %219 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %64 %225 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %224 %229 
                                                      OpStore %139 %230 
                              Uniform f32_4* %231 = OpAccessChain %64 %225 %225 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_3 %237 = OpLoad %139 
                                       f32_3 %238 = OpFAdd %236 %237 
                                                      OpStore %139 %238 
                              Uniform f32_4* %240 = OpAccessChain %64 %225 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 2 2 2 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %139 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %139 %247 
                              Uniform f32_4* %249 = OpAccessChain %64 %225 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %139 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %139 %256 
                                       f32_3 %257 = OpLoad %219 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpLoad %139 
                                       f32_3 %260 = OpFMul %258 %259 
                                                      OpStore %139 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 1 1 1 
                              Uniform f32_4* %264 = OpAccessChain %64 %225 %67 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %263 %266 
                                                      OpStore %261 %267 
                              Uniform f32_4* %268 = OpAccessChain %64 %225 %66 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %261 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %261 %275 
                              Uniform f32_4* %276 = OpAccessChain %64 %225 %79 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 2 2 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_3 %282 = OpLoad %261 
                                       f32_3 %283 = OpFAdd %281 %282 
                                                      OpStore %261 %283 
                              Uniform f32_4* %284 = OpAccessChain %64 %225 %88 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 3 3 3 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_3 %290 = OpLoad %261 
                                       f32_3 %291 = OpFAdd %289 %290 
                                                      OpStore %261 %291 
                                       f32_3 %292 = OpLoad %261 
                                       f32_4 %293 = OpLoad %53 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %139 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %139 %297 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %64 %225 %300 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFMul %299 %303 
                                                      OpStore %261 %304 
                              Uniform f32_4* %306 = OpAccessChain %64 %225 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 0 0 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_3 %312 = OpLoad %261 
                                       f32_3 %313 = OpFAdd %311 %312 
                                                      OpStore %261 %313 
                              Uniform f32_4* %315 = OpAccessChain %64 %225 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_4 %318 = OpLoad %9 
                                       f32_3 %319 = OpVectorShuffle %318 %318 2 2 2 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %261 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %261 %322 
                              Uniform f32_4* %324 = OpAccessChain %64 %225 %323 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 3 3 3 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %261 
                                       f32_3 %331 = OpFAdd %329 %330 
                                                      OpStore %261 %331 
                                       f32_3 %332 = OpLoad %261 
                                       f32_3 %333 = OpLoad %219 
                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
                                       f32_3 %335 = OpFMul %332 %334 
                                       f32_3 %336 = OpLoad %139 
                                       f32_3 %337 = OpFAdd %335 %336 
                                                      OpStore %139 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %341 = OpAccessChain %64 %225 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                                      OpStore %261 %344 
                              Uniform f32_4* %346 = OpAccessChain %64 %225 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %261 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %261 %353 
                              Uniform f32_4* %355 = OpAccessChain %64 %225 %354 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %261 
                                       f32_3 %362 = OpFAdd %360 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                              Uniform f32_4* %366 = OpAccessChain %64 %225 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %371 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpLoad %219 
                                       f32_3 %380 = OpVectorShuffle %379 %379 2 2 2 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_3 %382 = OpLoad %139 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %386 = OpLoad %219 
                                       f32_4 %387 = OpLoad %53 
                                       f32_4 %388 = OpVectorShuffle %387 %386 0 4 5 6 
                                                      OpStore %53 %388 
                                       f32_4 %390 = OpLoad %53 
                                         f32 %392 = OpDot %390 %391 
                                                      OpStore %389 %392 
                                         f32 %394 = OpLoad %389 
                                         f32 %395 = OpFNegate %394 
                                Private f32* %396 = OpAccessChain %9 %36 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFAdd %395 %397 
                                                      OpStore %393 %398 
                                         f32 %399 = OpLoad %393 
                                         f32 %400 = OpFAdd %399 %34 
                                                      OpStore %393 %400 
                                       f32_4 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                         f32 %405 = OpLoad %393 
                                         f32 %406 = OpCompositeExtract %404 0 
                                         f32 %407 = OpCompositeExtract %404 1 
                                       f32_3 %408 = OpCompositeConstruct %406 %407 %405 
                                                      OpStore %402 %408 
                         read_only Texture2D %411 = OpLoad %410 
                                     sampler %413 = OpLoad %412 
                  read_only Texture2DSampled %416 = OpSampledImage %411 %413 
                                       f32_3 %417 = OpLoad %402 
                                         f32 %418 = OpCompositeExtract %417 2 
                                         f32 %419 = OpImageSampleDrefExplicitLod %416 %417 %418 Lod %6 
                                                      OpStore %409 %419 
                                Uniform f32* %421 = OpAccessChain %64 %226 %27 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFNegate %422 
                                         f32 %424 = OpFAdd %423 %34 
                                Private f32* %425 = OpAccessChain %183 %27 
                                                      OpStore %425 %424 
                                         f32 %428 = OpLoad %409 
                                       f32_4 %429 = OpCompositeConstruct %428 %428 %428 %428 
                                       f32_3 %430 = OpLoad %183 
                                       f32_4 %431 = OpVectorShuffle %430 %430 0 0 0 0 
                                       f32_4 %432 = OpFMul %429 %431 
                              Uniform f32_4* %433 = OpAccessChain %64 %226 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %435 = OpVectorShuffle %434 %434 0 0 0 0 
                                       f32_4 %436 = OpFAdd %432 %435 
                                                      OpStore %427 %436 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 438
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %427 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 RelaxedPrecision 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %410 DescriptorSet 410 
                                                      OpDecorate %410 Binding 410 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %427 Location 427 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                                             %138 = OpTypePointer Private %42 
                              Private f32_3* %139 = OpVariable Private 
                                         u32 %150 = OpConstant 1 
                                         u32 %173 = OpConstant 3 
                                             %175 = OpTypeBool 
                                             %176 = OpTypeVector %175 4 
                                             %177 = OpTypePointer Private %176 
                             Private bool_4* %178 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                             %184 = OpTypePointer Private %175 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %200 = OpConstant 3.674022E-40 
                              Private f32_3* %219 = OpVariable Private 
                                       f32_3 %221 = OpConstantComposite %200 %200 %200 
                                         i32 %225 = OpConstant 4 
                                         i32 %226 = OpConstant 5 
                                         i32 %239 = OpConstant 6 
                                         i32 %248 = OpConstant 7 
                              Private f32_3* %261 = OpVariable Private 
                                         i32 %300 = OpConstant 9 
                                         i32 %305 = OpConstant 8 
                                         i32 %314 = OpConstant 10 
                                         i32 %323 = OpConstant 11 
                                         i32 %340 = OpConstant 13 
                                         i32 %345 = OpConstant 12 
                                         i32 %354 = OpConstant 14 
                                         i32 %365 = OpConstant 15 
                                Private f32* %389 = OpVariable Private 
                                       f32_4 %391 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %393 = OpVariable Private 
                                             %401 = OpTypePointer Function %42 
                                Private f32* %409 = OpVariable Private 
        UniformConstant read_only Texture2D* %410 = OpVariable UniformConstant 
                    UniformConstant sampler* %412 = OpVariable UniformConstant 
                                             %414 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %415 = OpTypeSampledImage %414 
                                             %420 = OpTypePointer Uniform %6 
                                             %426 = OpTypePointer Output %7 
                               Output f32_4* %427 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %402 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %140 = OpLoad %9 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_4* %142 = OpAccessChain %64 %79 %67 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_3 %148 = OpLoad %139 
                                         f32 %149 = OpDot %147 %148 
                                Private f32* %151 = OpAccessChain %53 %150 
                                                      OpStore %151 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                              Uniform f32_4* %154 = OpAccessChain %64 %79 %79 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFNegate %156 
                                       f32_3 %158 = OpFAdd %153 %157 
                                                      OpStore %139 %158 
                                       f32_3 %159 = OpLoad %139 
                                       f32_3 %160 = OpLoad %139 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %162 = OpAccessChain %53 %36 
                                                      OpStore %162 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %64 %79 %88 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %169 = OpFAdd %164 %168 
                                                      OpStore %139 %169 
                                       f32_3 %170 = OpLoad %139 
                                       f32_3 %171 = OpLoad %139 
                                         f32 %172 = OpDot %170 %171 
                                Private f32* %174 = OpAccessChain %53 %173 
                                                      OpStore %174 %172 
                                       f32_4 %179 = OpLoad %53 
                              Uniform f32_4* %180 = OpAccessChain %64 %88 
                                       f32_4 %181 = OpLoad %180 
                                      bool_4 %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %178 %182 
                               Private bool* %185 = OpAccessChain %178 %27 
                                        bool %186 = OpLoad %185 
                                         f32 %188 = OpSelect %186 %48 %187 
                                Private f32* %189 = OpAccessChain %183 %27 
                                                      OpStore %189 %188 
                               Private bool* %190 = OpAccessChain %178 %150 
                                        bool %191 = OpLoad %190 
                                         f32 %192 = OpSelect %191 %48 %187 
                                Private f32* %193 = OpAccessChain %183 %150 
                                                      OpStore %193 %192 
                               Private bool* %194 = OpAccessChain %178 %36 
                                        bool %195 = OpLoad %194 
                                         f32 %196 = OpSelect %195 %48 %187 
                                Private f32* %197 = OpAccessChain %183 %36 
                                                      OpStore %197 %196 
                               Private bool* %198 = OpAccessChain %178 %27 
                                        bool %199 = OpLoad %198 
                                         f32 %201 = OpSelect %199 %34 %200 
                                Private f32* %202 = OpAccessChain %53 %27 
                                                      OpStore %202 %201 
                               Private bool* %203 = OpAccessChain %178 %150 
                                        bool %204 = OpLoad %203 
                                         f32 %205 = OpSelect %204 %34 %200 
                                Private f32* %206 = OpAccessChain %53 %150 
                                                      OpStore %206 %205 
                               Private bool* %207 = OpAccessChain %178 %36 
                                        bool %208 = OpLoad %207 
                                         f32 %209 = OpSelect %208 %34 %200 
                                Private f32* %210 = OpAccessChain %53 %36 
                                                      OpStore %210 %209 
                               Private bool* %211 = OpAccessChain %178 %173 
                                        bool %212 = OpLoad %211 
                                         f32 %213 = OpSelect %212 %34 %200 
                                Private f32* %214 = OpAccessChain %53 %173 
                                                      OpStore %214 %213 
                                       f32_3 %215 = OpLoad %183 
                                       f32_4 %216 = OpLoad %53 
                                       f32_3 %217 = OpVectorShuffle %216 %216 1 2 3 
                                       f32_3 %218 = OpFAdd %215 %217 
                                                      OpStore %183 %218 
                                       f32_3 %220 = OpLoad %183 
                                       f32_3 %222 = OpExtInst %1 40 %220 %221 
                                                      OpStore %219 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %64 %225 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %224 %229 
                                                      OpStore %139 %230 
                              Uniform f32_4* %231 = OpAccessChain %64 %225 %225 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_3 %237 = OpLoad %139 
                                       f32_3 %238 = OpFAdd %236 %237 
                                                      OpStore %139 %238 
                              Uniform f32_4* %240 = OpAccessChain %64 %225 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 2 2 2 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %139 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %139 %247 
                              Uniform f32_4* %249 = OpAccessChain %64 %225 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %139 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %139 %256 
                                       f32_3 %257 = OpLoad %219 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpLoad %139 
                                       f32_3 %260 = OpFMul %258 %259 
                                                      OpStore %139 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 1 1 1 
                              Uniform f32_4* %264 = OpAccessChain %64 %225 %67 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %263 %266 
                                                      OpStore %261 %267 
                              Uniform f32_4* %268 = OpAccessChain %64 %225 %66 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %261 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %261 %275 
                              Uniform f32_4* %276 = OpAccessChain %64 %225 %79 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 2 2 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_3 %282 = OpLoad %261 
                                       f32_3 %283 = OpFAdd %281 %282 
                                                      OpStore %261 %283 
                              Uniform f32_4* %284 = OpAccessChain %64 %225 %88 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 3 3 3 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_3 %290 = OpLoad %261 
                                       f32_3 %291 = OpFAdd %289 %290 
                                                      OpStore %261 %291 
                                       f32_3 %292 = OpLoad %261 
                                       f32_4 %293 = OpLoad %53 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %139 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %139 %297 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 1 1 1 
                              Uniform f32_4* %301 = OpAccessChain %64 %225 %300 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFMul %299 %303 
                                                      OpStore %261 %304 
                              Uniform f32_4* %306 = OpAccessChain %64 %225 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 0 0 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_3 %312 = OpLoad %261 
                                       f32_3 %313 = OpFAdd %311 %312 
                                                      OpStore %261 %313 
                              Uniform f32_4* %315 = OpAccessChain %64 %225 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_4 %318 = OpLoad %9 
                                       f32_3 %319 = OpVectorShuffle %318 %318 2 2 2 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %261 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %261 %322 
                              Uniform f32_4* %324 = OpAccessChain %64 %225 %323 
                                       f32_4 %325 = OpLoad %324 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 3 3 3 
                                       f32_3 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %261 
                                       f32_3 %331 = OpFAdd %329 %330 
                                                      OpStore %261 %331 
                                       f32_3 %332 = OpLoad %261 
                                       f32_3 %333 = OpLoad %219 
                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
                                       f32_3 %335 = OpFMul %332 %334 
                                       f32_3 %336 = OpLoad %139 
                                       f32_3 %337 = OpFAdd %335 %336 
                                                      OpStore %139 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %341 = OpAccessChain %64 %225 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                                      OpStore %261 %344 
                              Uniform f32_4* %346 = OpAccessChain %64 %225 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %261 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %261 %353 
                              Uniform f32_4* %355 = OpAccessChain %64 %225 %354 
                                       f32_4 %356 = OpLoad %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
                                       f32_3 %360 = OpFMul %357 %359 
                                       f32_3 %361 = OpLoad %261 
                                       f32_3 %362 = OpFAdd %360 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %9 %364 
                              Uniform f32_4* %366 = OpAccessChain %64 %225 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %9 
                                       f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %371 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpLoad %219 
                                       f32_3 %380 = OpVectorShuffle %379 %379 2 2 2 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_3 %382 = OpLoad %139 
                                       f32_3 %383 = OpFAdd %381 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_3 %386 = OpLoad %219 
                                       f32_4 %387 = OpLoad %53 
                                       f32_4 %388 = OpVectorShuffle %387 %386 0 4 5 6 
                                                      OpStore %53 %388 
                                       f32_4 %390 = OpLoad %53 
                                         f32 %392 = OpDot %390 %391 
                                                      OpStore %389 %392 
                                         f32 %394 = OpLoad %389 
                                         f32 %395 = OpFNegate %394 
                                Private f32* %396 = OpAccessChain %9 %36 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFAdd %395 %397 
                                                      OpStore %393 %398 
                                         f32 %399 = OpLoad %393 
                                         f32 %400 = OpFAdd %399 %34 
                                                      OpStore %393 %400 
                                       f32_4 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                         f32 %405 = OpLoad %393 
                                         f32 %406 = OpCompositeExtract %404 0 
                                         f32 %407 = OpCompositeExtract %404 1 
                                       f32_3 %408 = OpCompositeConstruct %406 %407 %405 
                                                      OpStore %402 %408 
                         read_only Texture2D %411 = OpLoad %410 
                                     sampler %413 = OpLoad %412 
                  read_only Texture2DSampled %416 = OpSampledImage %411 %413 
                                       f32_3 %417 = OpLoad %402 
                                         f32 %418 = OpCompositeExtract %417 2 
                                         f32 %419 = OpImageSampleDrefExplicitLod %416 %417 %418 Lod %6 
                                                      OpStore %409 %419 
                                Uniform f32* %421 = OpAccessChain %64 %226 %27 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFNegate %422 
                                         f32 %424 = OpFAdd %423 %34 
                                Private f32* %425 = OpAccessChain %183 %27 
                                                      OpStore %425 %424 
                                         f32 %428 = OpLoad %409 
                                       f32_4 %429 = OpCompositeConstruct %428 %428 %428 %428 
                                       f32_3 %430 = OpLoad %183 
                                       f32_4 %431 = OpVectorShuffle %430 %430 0 0 0 0 
                                       f32_4 %432 = OpFMul %429 %431 
                              Uniform f32_4* %433 = OpAccessChain %64 %226 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %435 = OpVectorShuffle %434 %434 0 0 0 0 
                                       f32_4 %436 = OpFAdd %432 %435 
                                                      OpStore %427 %436 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                         f32 %181 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %179 = OpSampledImage %174 %176 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %182 = OpCompositeExtract %180 2 
                                         f32 %183 = OpImageSampleDrefExplicitLod %179 %180 %182 Lod %6 
                                                      OpStore %172 %183 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                         f32 %192 = OpLoad %172 
                                       f32_4 %193 = OpCompositeConstruct %192 %192 %192 %192 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                         f32 %181 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %179 = OpSampledImage %174 %176 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %182 = OpCompositeExtract %180 2 
                                         f32 %183 = OpImageSampleDrefExplicitLod %179 %180 %182 Lod %6 
                                                      OpStore %172 %183 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                         f32 %192 = OpLoad %172 
                                       f32_4 %193 = OpCompositeConstruct %192 %192 %192 %192 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                         f32 %181 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %179 = OpSampledImage %174 %176 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %182 = OpCompositeExtract %180 2 
                                         f32 %183 = OpImageSampleDrefExplicitLod %179 %180 %182 Lod %6 
                                                      OpStore %172 %183 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                         f32 %192 = OpLoad %172 
                                       f32_4 %193 = OpCompositeConstruct %192 %192 %192 %192 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat16_2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = vec4(u_xlat16_0) * vec4(u_xlat16_2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                         f32 %181 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %179 = OpSampledImage %174 %176 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %182 = OpCompositeExtract %180 2 
                                         f32 %183 = OpImageSampleDrefExplicitLod %179 %180 %182 Lod %6 
                                                      OpStore %172 %183 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                         f32 %192 = OpLoad %172 
                                       f32_4 %193 = OpCompositeConstruct %192 %192 %192 %192 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                         f32 %181 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %179 = OpSampledImage %174 %176 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %182 = OpCompositeExtract %180 2 
                                         f32 %183 = OpImageSampleDrefExplicitLod %179 %180 %182 Lod %6 
                                                      OpStore %172 %183 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                         f32 %192 = OpLoad %172 
                                       f32_4 %193 = OpCompositeConstruct %192 %192 %192 %192 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %173 = OpVariable UniformConstant 
                    UniformConstant sampler* %175 = OpVariable UniformConstant 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                         f32 %181 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %174 = OpLoad %173 
                                     sampler %176 = OpLoad %175 
                  read_only Texture2DSampled %179 = OpSampledImage %174 %176 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %182 = OpCompositeExtract %180 2 
                                         f32 %183 = OpImageSampleDrefExplicitLod %179 %180 %182 Lod %6 
                                                      OpStore %172 %183 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                         f32 %192 = OpLoad %172 
                                       f32_4 %193 = OpCompositeConstruct %192 %192 %192 %192 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "PCF_SOFT" }
 Pass {
  Tags { "ShadowmapFilter" = "PCF_SOFT" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 180047
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    u_xlat2.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat2.xy = floor(u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat2.xy);
    u_xlat16.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat3.xy;
    u_xlat1.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat4.yw;
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat16.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat1.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat16.y;
    u_xlat4.w = u_xlat16.x;
    u_xlat5.zw = u_xlat1.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat1.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat1.zwxz + u_xlat4.zwxz;
    u_xlat6.xyz = u_xlat1.xzw / u_xlat4.zwy;
    u_xlat6.xyz = u_xlat6.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat6.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat16.xy = u_xlat2.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat16.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat1 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_3 * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_23 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_16 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat6 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat6.zw,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_16 + u_xlat0.x;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_9 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat1 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_2 + u_xlat0.x;
    u_xlat0.x = u_xlat1.y * u_xlat16_9 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_23 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    u_xlat2.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat2.xy = floor(u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat2.xy);
    u_xlat16.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat3.xy;
    u_xlat1.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat4.yw;
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat16.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat1.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat16.y;
    u_xlat4.w = u_xlat16.x;
    u_xlat5.zw = u_xlat1.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat1.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat1.zwxz + u_xlat4.zwxz;
    u_xlat6.xyz = u_xlat1.xzw / u_xlat4.zwy;
    u_xlat6.xyz = u_xlat6.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat6.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat16.xy = u_xlat2.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat16.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat1 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_3 * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_23 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_16 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat6 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat6.zw,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_16 + u_xlat0.x;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_9 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat1 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_2 + u_xlat0.x;
    u_xlat0.x = u_xlat1.y * u_xlat16_9 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_23 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    u_xlat2.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat2.xy = floor(u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat2.xy);
    u_xlat16.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat3.xy;
    u_xlat1.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat4.yw;
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat16.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat1.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat16.y;
    u_xlat4.w = u_xlat16.x;
    u_xlat5.zw = u_xlat1.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat1.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat1.zwxz + u_xlat4.zwxz;
    u_xlat6.xyz = u_xlat1.xzw / u_xlat4.zwy;
    u_xlat6.xyz = u_xlat6.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat6.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat16.xy = u_xlat2.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat16.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat1 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_3 * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_23 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_16 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat6 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat6.zw,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_16 + u_xlat0.x;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_9 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat1 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_2 + u_xlat0.x;
    u_xlat0.x = u_xlat1.y * u_xlat16_9 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_23 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 895
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %892 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %643 DescriptorSet 643 
                                                      OpDecorate %643 Binding 643 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %645 DescriptorSet 645 
                                                      OpDecorate %645 Binding 645 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %660 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %792 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %843 RelaxedPrecision 
                                                      OpDecorate %844 RelaxedPrecision 
                                                      OpDecorate %856 RelaxedPrecision 
                                                      OpDecorate %857 RelaxedPrecision 
                                                      OpDecorate %858 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %892 RelaxedPrecision 
                                                      OpDecorate %892 Location 892 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %7 %7 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                             %122 = OpTypeBool 
                                             %123 = OpTypeVector %122 4 
                                             %124 = OpTypePointer Private %123 
                             Private bool_4* %125 = OpVariable Private 
                                         i32 %128 = OpConstant 3 
                                             %132 = OpTypePointer Private %122 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                             Private bool_4* %151 = OpVariable Private 
                                         i32 %154 = OpConstant 4 
                              Private f32_4* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %181 = OpConstant 2 
                                         i32 %205 = OpConstant 5 
                                         i32 %223 = OpConstant 6 
                                         i32 %235 = OpConstant 7 
                              Private f32_4* %254 = OpVariable Private 
                                         i32 %308 = OpConstant 9 
                                         i32 %315 = OpConstant 8 
                                         i32 %327 = OpConstant 10 
                                         i32 %339 = OpConstant 11 
                                         i32 %363 = OpConstant 13 
                                         i32 %370 = OpConstant 12 
                                         i32 %382 = OpConstant 14 
                                         i32 %394 = OpConstant 15 
                                Private f32* %416 = OpVariable Private 
                                       f32_4 %418 = OpConstantComposite %51 %51 %51 %51 
                                         f32 %433 = OpConstant 3.674022E-40 
                                       f32_2 %434 = OpConstantComposite %433 %433 
                                             %455 = OpTypePointer Private %22 
                              Private f32_2* %456 = OpVariable Private 
                                       f32_2 %459 = OpConstantComposite %135 %135 
                                       f32_4 %463 = OpConstantComposite %433 %51 %433 %51 
                                       f32_2 %473 = OpConstantComposite %51 %51 
                                         f32 %476 = OpConstant 3.674022E-40 
                                       f32_2 %477 = OpConstantComposite %476 %476 
                              Private f32_4* %485 = OpVariable Private 
                              Private f32_4* %490 = OpVariable Private 
                              Private f32_4* %510 = OpVariable Private 
                                         f32 %530 = OpConstant 3.674022E-40 
                                       f32_2 %531 = OpConstantComposite %530 %530 
                                             %563 = OpTypePointer Private %74 
                              Private f32_3* %564 = OpVariable Private 
                                         f32 %574 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %576 = OpConstant 3.674022E-40 
                                       f32_3 %577 = OpConstantComposite %574 %575 %576 
                                             %635 = OpTypePointer Function %74 
                                Private f32* %642 = OpVariable Private 
        UniformConstant read_only Texture2D* %643 = OpVariable UniformConstant 
                    UniformConstant sampler* %645 = OpVariable UniformConstant 
                                             %647 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %648 = OpTypeSampledImage %647 
                                Private f32* %660 = OpVariable Private 
                                Private f32* %674 = OpVariable Private 
                                Private f32* %791 = OpVariable Private 
                                Private f32* %805 = OpVariable Private 
                                Private f32* %856 = OpVariable Private 
                                             %891 = OpTypePointer Output %7 
                               Output f32_4* %892 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %636 = OpVariable Function 
                             Function f32_3* %653 = OpVariable Function 
                             Function f32_3* %667 = OpVariable Function 
                             Function f32_3* %723 = OpVariable Function 
                             Function f32_3* %736 = OpVariable Function 
                             Function f32_3* %784 = OpVariable Function 
                             Function f32_3* %798 = OpVariable Function 
                             Function f32_3* %836 = OpVariable Function 
                             Function f32_3* %849 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 2 2 2 2 
                              Uniform f32_4* %129 = OpAccessChain %38 %128 
                                       f32_4 %130 = OpLoad %129 
                                      bool_4 %131 = OpFOrdGreaterThanEqual %127 %130 
                                                      OpStore %125 %131 
                               Private bool* %133 = OpAccessChain %125 %27 
                                        bool %134 = OpLoad %133 
                                         f32 %136 = OpSelect %134 %51 %135 
                                Private f32* %137 = OpAccessChain %73 %27 
                                                      OpStore %137 %136 
                               Private bool* %138 = OpAccessChain %125 %47 
                                        bool %139 = OpLoad %138 
                                         f32 %140 = OpSelect %139 %51 %135 
                                Private f32* %141 = OpAccessChain %73 %47 
                                                      OpStore %141 %140 
                               Private bool* %143 = OpAccessChain %125 %142 
                                        bool %144 = OpLoad %143 
                                         f32 %145 = OpSelect %144 %51 %135 
                                Private f32* %146 = OpAccessChain %73 %142 
                                                      OpStore %146 %145 
                               Private bool* %147 = OpAccessChain %125 %61 
                                        bool %148 = OpLoad %147 
                                         f32 %149 = OpSelect %148 %51 %135 
                                Private f32* %150 = OpAccessChain %73 %61 
                                                      OpStore %150 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %152 2 2 2 2 
                              Uniform f32_4* %155 = OpAccessChain %38 %154 
                                       f32_4 %156 = OpLoad %155 
                                      bool_4 %157 = OpFOrdLessThan %153 %156 
                                                      OpStore %151 %157 
                               Private bool* %159 = OpAccessChain %151 %27 
                                        bool %160 = OpLoad %159 
                                         f32 %161 = OpSelect %160 %51 %135 
                                Private f32* %162 = OpAccessChain %158 %27 
                                                      OpStore %162 %161 
                               Private bool* %163 = OpAccessChain %151 %47 
                                        bool %164 = OpLoad %163 
                                         f32 %165 = OpSelect %164 %51 %135 
                                Private f32* %166 = OpAccessChain %158 %47 
                                                      OpStore %166 %165 
                               Private bool* %167 = OpAccessChain %151 %142 
                                        bool %168 = OpLoad %167 
                                         f32 %169 = OpSelect %168 %51 %135 
                                Private f32* %170 = OpAccessChain %158 %142 
                                                      OpStore %170 %169 
                               Private bool* %171 = OpAccessChain %151 %61 
                                        bool %172 = OpLoad %171 
                                         f32 %173 = OpSelect %172 %51 %135 
                                Private f32* %174 = OpAccessChain %158 %61 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %73 
                                       f32_4 %177 = OpLoad %158 
                                       f32_4 %178 = OpFMul %176 %177 
                                                      OpStore %175 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %38 %181 %60 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %180 %183 
                                                      OpStore %158 %184 
                              Uniform f32_4* %185 = OpAccessChain %38 %181 %40 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %158 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %158 %191 
                              Uniform f32_4* %192 = OpAccessChain %38 %181 %181 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %158 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                              Uniform f32_4* %200 = OpAccessChain %38 %181 %128 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpFAdd %199 %201 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %38 %205 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %158 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %158 %211 
                              Uniform f32_4* %212 = OpAccessChain %38 %205 %154 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %158 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFAdd %217 %219 
                                       f32_4 %221 = OpLoad %158 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %158 %222 
                              Uniform f32_4* %224 = OpAccessChain %38 %205 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 2 2 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %158 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFAdd %229 %231 
                                       f32_4 %233 = OpLoad %158 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %158 %234 
                              Uniform f32_4* %236 = OpAccessChain %38 %205 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_4 %239 = OpLoad %9 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %158 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %158 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %158 %246 
                                       f32_4 %247 = OpLoad %175 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                                       f32_4 %249 = OpLoad %158 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %158 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %158 %253 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 1 1 1 
                              Uniform f32_4* %257 = OpAccessChain %38 %205 %60 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFMul %256 %259 
                                       f32_4 %261 = OpLoad %254 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %254 %262 
                              Uniform f32_4* %263 = OpAccessChain %38 %205 %40 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %254 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %254 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %254 %273 
                              Uniform f32_4* %274 = OpAccessChain %38 %205 %181 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 2 2 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %254 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFAdd %279 %281 
                                       f32_4 %283 = OpLoad %254 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %254 %284 
                              Uniform f32_4* %285 = OpAccessChain %38 %205 %128 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %254 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %254 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %254 %295 
                                       f32_4 %296 = OpLoad %254 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %175 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
                                       f32_3 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %158 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %158 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %158 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 1 1 1 
                              Uniform f32_4* %309 = OpAccessChain %38 %205 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %307 %311 
                                       f32_4 %313 = OpLoad %254 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %254 %314 
                              Uniform f32_4* %316 = OpAccessChain %38 %205 %315 
                                       f32_4 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_4 %319 = OpLoad %9 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 0 0 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %254 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %254 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %254 %326 
                              Uniform f32_4* %328 = OpAccessChain %38 %205 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 2 2 2 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %254 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %254 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %254 %338 
                              Uniform f32_4* %340 = OpAccessChain %38 %205 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 3 3 3 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %254 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFAdd %345 %347 
                                       f32_4 %349 = OpLoad %254 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %254 %350 
                                       f32_4 %351 = OpLoad %254 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_4 %353 = OpLoad %175 
                                       f32_3 %354 = OpVectorShuffle %353 %353 2 2 2 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_4 %356 = OpLoad %158 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %358 = OpFAdd %355 %357 
                                       f32_4 %359 = OpLoad %158 
                                       f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
                                                      OpStore %158 %360 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 1 1 1 
                              Uniform f32_4* %364 = OpAccessChain %38 %205 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFMul %362 %366 
                                       f32_4 %368 = OpLoad %254 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %254 %369 
                              Uniform f32_4* %371 = OpAccessChain %38 %205 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %254 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpFAdd %376 %378 
                                       f32_4 %380 = OpLoad %254 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 6 3 
                                                      OpStore %254 %381 
                              Uniform f32_4* %383 = OpAccessChain %38 %205 %382 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 2 2 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %254 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %9 %393 
                              Uniform f32_4* %395 = OpAccessChain %38 %205 %394 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 3 3 3 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %9 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_4 %408 = OpLoad %175 
                                       f32_3 %409 = OpVectorShuffle %408 %408 3 3 3 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_4 %411 = OpLoad %158 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFAdd %410 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                                       f32_4 %417 = OpLoad %175 
                                         f32 %419 = OpDot %417 %418 
                                                      OpStore %416 %419 
                                         f32 %420 = OpLoad %416 
                                         f32 %421 = OpFNegate %420 
                                Private f32* %422 = OpAccessChain %9 %142 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFAdd %421 %423 
                                                      OpStore %54 %424 
                                         f32 %425 = OpLoad %54 
                                         f32 %426 = OpFAdd %425 %51 
                                                      OpStore %54 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                              Uniform f32_4* %429 = OpAccessChain %38 %235 
                                       f32_4 %430 = OpLoad %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 2 3 
                                       f32_2 %432 = OpFMul %428 %431 
                                       f32_2 %435 = OpFAdd %432 %434 
                                       f32_4 %436 = OpLoad %158 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 2 3 
                                                      OpStore %158 %437 
                                       f32_4 %438 = OpLoad %158 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_2 %440 = OpExtInst %1 8 %439 
                                       f32_4 %441 = OpLoad %158 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
                                                      OpStore %158 %442 
                                       f32_4 %443 = OpLoad %9 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                              Uniform f32_4* %445 = OpAccessChain %38 %235 
                                       f32_4 %446 = OpLoad %445 
                                       f32_2 %447 = OpVectorShuffle %446 %446 2 3 
                                       f32_2 %448 = OpFMul %444 %447 
                                       f32_4 %449 = OpLoad %158 
                                       f32_2 %450 = OpVectorShuffle %449 %449 0 1 
                                       f32_2 %451 = OpFNegate %450 
                                       f32_2 %452 = OpFAdd %448 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 2 3 
                                                      OpStore %9 %454 
                                       f32_4 %457 = OpLoad %9 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 1 
                                       f32_2 %460 = OpExtInst %1 40 %458 %459 
                                                      OpStore %456 %460 
                                       f32_4 %461 = OpLoad %9 
                                       f32_4 %462 = OpVectorShuffle %461 %461 0 0 1 1 
                                       f32_4 %464 = OpFAdd %462 %463 
                                                      OpStore %73 %464 
                                       f32_2 %465 = OpLoad %456 
                                       f32_2 %466 = OpFNegate %465 
                                       f32_2 %467 = OpLoad %456 
                                       f32_2 %468 = OpFMul %466 %467 
                                       f32_4 %469 = OpLoad %73 
                                       f32_2 %470 = OpVectorShuffle %469 %469 1 3 
                                       f32_2 %471 = OpFAdd %468 %470 
                                                      OpStore %456 %471 
                                       f32_2 %472 = OpLoad %456 
                                       f32_2 %474 = OpFAdd %472 %473 
                                                      OpStore %456 %474 
                                       f32_2 %475 = OpLoad %456 
                                       f32_2 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %254 
                                       f32_4 %480 = OpVectorShuffle %479 %478 4 5 2 3 
                                                      OpStore %254 %480 
                                       f32_4 %481 = OpLoad %9 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 1 
                                       f32_2 %483 = OpFNegate %482 
                                       f32_2 %484 = OpFAdd %483 %473 
                                                      OpStore %456 %484 
                                       f32_2 %486 = OpLoad %456 
                                       f32_2 %487 = OpFMul %486 %477 
                                       f32_4 %488 = OpLoad %485 
                                       f32_4 %489 = OpVectorShuffle %488 %487 4 5 2 3 
                                                      OpStore %485 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 1 
                                       f32_2 %493 = OpExtInst %1 37 %492 %459 
                                       f32_4 %494 = OpLoad %490 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 2 3 
                                                      OpStore %490 %495 
                                       f32_4 %496 = OpLoad %490 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                       f32_2 %498 = OpFNegate %497 
                                       f32_4 %499 = OpLoad %490 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_2 %501 = OpFMul %498 %500 
                                       f32_2 %502 = OpLoad %456 
                                       f32_2 %503 = OpFAdd %501 %502 
                                                      OpStore %456 %503 
                                       f32_2 %504 = OpLoad %456 
                                       f32_2 %505 = OpFAdd %504 %473 
                                                      OpStore %456 %505 
                                       f32_2 %506 = OpLoad %456 
                                       f32_2 %507 = OpFMul %506 %477 
                                       f32_4 %508 = OpLoad %490 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 2 3 
                                                      OpStore %490 %509 
                                       f32_4 %511 = OpLoad %73 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 0 2 2 
                                       f32_4 %513 = OpLoad %73 
                                       f32_4 %514 = OpVectorShuffle %513 %513 0 0 2 2 
                                       f32_4 %515 = OpFMul %512 %514 
                                                      OpStore %510 %515 
                                       f32_4 %516 = OpLoad %73 
                                       f32_2 %517 = OpVectorShuffle %516 %516 1 3 
                                       f32_2 %518 = OpFMul %517 %477 
                                                      OpStore %456 %518 
                                       f32_4 %519 = OpLoad %510 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 2 
                                       f32_2 %521 = OpFMul %520 %434 
                                       f32_4 %522 = OpLoad %9 
                                       f32_2 %523 = OpVectorShuffle %522 %522 0 1 
                                       f32_2 %524 = OpFNegate %523 
                                       f32_2 %525 = OpFAdd %521 %524 
                                       f32_4 %526 = OpLoad %9 
                                       f32_4 %527 = OpVectorShuffle %526 %525 4 5 2 3 
                                                      OpStore %9 %527 
                                       f32_4 %528 = OpLoad %510 
                                       f32_2 %529 = OpVectorShuffle %528 %528 3 1 
                                       f32_2 %532 = OpFMul %529 %531 
                                       f32_4 %533 = OpLoad %485 
                                       f32_4 %534 = OpVectorShuffle %533 %532 0 1 4 5 
                                                      OpStore %485 %534 
                                       f32_4 %535 = OpLoad %9 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 1 
                                       f32_2 %537 = OpFMul %536 %477 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %537 4 5 2 3 
                                                      OpStore %73 %539 
                                Private f32* %540 = OpAccessChain %73 %47 
                                         f32 %541 = OpLoad %540 
                                Private f32* %542 = OpAccessChain %490 %142 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %456 %47 
                                         f32 %544 = OpLoad %543 
                                Private f32* %545 = OpAccessChain %490 %61 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %456 %27 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %73 %61 
                                                      OpStore %548 %547 
                                       f32_4 %549 = OpLoad %485 
                                       f32_2 %550 = OpVectorShuffle %549 %549 1 2 
                                       f32_4 %551 = OpLoad %254 
                                       f32_4 %552 = OpVectorShuffle %551 %550 0 1 4 5 
                                                      OpStore %254 %552 
                                       f32_4 %553 = OpLoad %254 
                                       f32_3 %554 = OpVectorShuffle %553 %553 2 1 3 
                                       f32_4 %555 = OpLoad %490 
                                       f32_3 %556 = OpVectorShuffle %555 %555 2 1 3 
                                       f32_3 %557 = OpFAdd %554 %556 
                                       f32_4 %558 = OpLoad %9 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 2 6 
                                                      OpStore %9 %559 
                                Private f32* %560 = OpAccessChain %490 %27 
                                         f32 %561 = OpLoad %560 
                                Private f32* %562 = OpAccessChain %73 %142 
                                                      OpStore %562 %561 
                                       f32_4 %565 = OpLoad %254 
                                       f32_3 %566 = OpVectorShuffle %565 %565 2 1 3 
                                       f32_4 %567 = OpLoad %9 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 3 
                                       f32_3 %569 = OpFDiv %566 %568 
                                                      OpStore %564 %569 
                                Private f32* %570 = OpAccessChain %254 %27 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %485 %142 
                                                      OpStore %572 %571 
                                       f32_3 %573 = OpLoad %564 
                                       f32_3 %578 = OpFAdd %573 %577 
                                       f32_4 %579 = OpLoad %254 
                                       f32_4 %580 = OpVectorShuffle %579 %578 4 5 6 3 
                                                      OpStore %254 %580 
                                       f32_4 %581 = OpLoad %254 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                              Uniform f32_4* %583 = OpAccessChain %38 %235 
                                       f32_4 %584 = OpLoad %583 
                                       f32_3 %585 = OpVectorShuffle %584 %584 1 1 1 
                                       f32_3 %586 = OpFMul %582 %585 
                                       f32_4 %587 = OpLoad %254 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                                      OpStore %254 %588 
                                Private f32* %589 = OpAccessChain %254 %27 
                                         f32 %590 = OpLoad %589 
                                Private f32* %591 = OpAccessChain %490 %61 
                                                      OpStore %591 %590 
                                       f32_4 %592 = OpLoad %73 
                                       f32_4 %593 = OpVectorShuffle %592 %592 2 3 0 2 
                                       f32_4 %594 = OpLoad %485 
                                       f32_4 %595 = OpVectorShuffle %594 %594 2 3 0 2 
                                       f32_4 %596 = OpFAdd %593 %595 
                                                      OpStore %73 %596 
                                       f32_4 %597 = OpLoad %485 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 2 3 
                                       f32_4 %599 = OpLoad %73 
                                       f32_3 %600 = OpVectorShuffle %599 %599 2 3 1 
                                       f32_3 %601 = OpFDiv %598 %600 
                                       f32_4 %602 = OpLoad %485 
                                       f32_4 %603 = OpVectorShuffle %602 %601 4 5 6 3 
                                                      OpStore %485 %603 
                                       f32_4 %604 = OpLoad %485 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_3 %606 = OpFAdd %605 %577 
                                       f32_4 %607 = OpLoad %485 
                                       f32_4 %608 = OpVectorShuffle %607 %606 4 5 6 3 
                                                      OpStore %485 %608 
                                       f32_4 %609 = OpLoad %485 
                                       f32_3 %610 = OpVectorShuffle %609 %609 1 0 2 
                              Uniform f32_4* %611 = OpAccessChain %38 %235 
                                       f32_4 %612 = OpLoad %611 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 0 0 
                                       f32_3 %614 = OpFMul %610 %613 
                                       f32_4 %615 = OpLoad %490 
                                       f32_4 %616 = OpVectorShuffle %615 %614 4 5 6 3 
                                                      OpStore %490 %616 
                                       f32_4 %617 = OpLoad %158 
                                       f32_4 %618 = OpVectorShuffle %617 %617 0 1 0 1 
                              Uniform f32_4* %619 = OpAccessChain %38 %235 
                                       f32_4 %620 = OpLoad %619 
                                       f32_4 %621 = OpVectorShuffle %620 %620 0 1 0 1 
                                       f32_4 %622 = OpFMul %618 %621 
                                       f32_4 %623 = OpLoad %490 
                                       f32_4 %624 = OpVectorShuffle %623 %623 1 3 0 3 
                                       f32_4 %625 = OpFAdd %622 %624 
                                                      OpStore %485 %625 
                                       f32_4 %626 = OpLoad %158 
                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
                              Uniform f32_4* %628 = OpAccessChain %38 %235 
                                       f32_4 %629 = OpLoad %628 
                                       f32_2 %630 = OpVectorShuffle %629 %629 0 1 
                                       f32_2 %631 = OpFMul %627 %630 
                                       f32_4 %632 = OpLoad %490 
                                       f32_2 %633 = OpVectorShuffle %632 %632 2 3 
                                       f32_2 %634 = OpFAdd %631 %633 
                                                      OpStore %456 %634 
                                       f32_2 %637 = OpLoad %456 
                                         f32 %638 = OpLoad %54 
                                         f32 %639 = OpCompositeExtract %637 0 
                                         f32 %640 = OpCompositeExtract %637 1 
                                       f32_3 %641 = OpCompositeConstruct %639 %640 %638 
                                                      OpStore %636 %641 
                         read_only Texture2D %644 = OpLoad %643 
                                     sampler %646 = OpLoad %645 
                  read_only Texture2DSampled %649 = OpSampledImage %644 %646 
                                       f32_3 %650 = OpLoad %636 
                                         f32 %651 = OpCompositeExtract %650 2 
                                         f32 %652 = OpImageSampleDrefExplicitLod %649 %650 %651 Lod %6 
                                                      OpStore %642 %652 
                                       f32_4 %654 = OpLoad %485 
                                       f32_2 %655 = OpVectorShuffle %654 %654 0 1 
                                         f32 %656 = OpLoad %54 
                                         f32 %657 = OpCompositeExtract %655 0 
                                         f32 %658 = OpCompositeExtract %655 1 
                                       f32_3 %659 = OpCompositeConstruct %657 %658 %656 
                                                      OpStore %653 %659 
                         read_only Texture2D %661 = OpLoad %643 
                                     sampler %662 = OpLoad %645 
                  read_only Texture2DSampled %663 = OpSampledImage %661 %662 
                                       f32_3 %664 = OpLoad %653 
                                         f32 %665 = OpCompositeExtract %664 2 
                                         f32 %666 = OpImageSampleDrefExplicitLod %663 %664 %665 Lod %6 
                                                      OpStore %660 %666 
                                       f32_4 %668 = OpLoad %485 
                                       f32_2 %669 = OpVectorShuffle %668 %668 2 3 
                                         f32 %670 = OpLoad %54 
                                         f32 %671 = OpCompositeExtract %669 0 
                                         f32 %672 = OpCompositeExtract %669 1 
                                       f32_3 %673 = OpCompositeConstruct %671 %672 %670 
                                                      OpStore %667 %673 
                         read_only Texture2D %675 = OpLoad %643 
                                     sampler %676 = OpLoad %645 
                  read_only Texture2DSampled %677 = OpSampledImage %675 %676 
                                       f32_3 %678 = OpLoad %667 
                                         f32 %679 = OpCompositeExtract %678 2 
                                         f32 %680 = OpImageSampleDrefExplicitLod %677 %678 %679 Lod %6 
                                                      OpStore %674 %680 
                                       f32_4 %681 = OpLoad %9 
                                       f32_4 %682 = OpVectorShuffle %681 %681 0 0 0 1 
                                       f32_4 %683 = OpLoad %73 
                                       f32_4 %684 = OpVectorShuffle %683 %683 2 3 1 2 
                                       f32_4 %685 = OpFMul %682 %684 
                                                      OpStore %485 %685 
                                         f32 %686 = OpLoad %674 
                                Private f32* %687 = OpAccessChain %485 %47 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpFMul %686 %688 
                                Private f32* %690 = OpAccessChain %9 %27 
                                                      OpStore %690 %689 
                                Private f32* %691 = OpAccessChain %485 %27 
                                         f32 %692 = OpLoad %691 
                                         f32 %693 = OpLoad %660 
                                         f32 %694 = OpFMul %692 %693 
                                Private f32* %695 = OpAccessChain %9 %27 
                                         f32 %696 = OpLoad %695 
                                         f32 %697 = OpFAdd %694 %696 
                                Private f32* %698 = OpAccessChain %9 %27 
                                                      OpStore %698 %697 
                                Private f32* %699 = OpAccessChain %485 %142 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpLoad %642 
                                         f32 %702 = OpFMul %700 %701 
                                Private f32* %703 = OpAccessChain %9 %27 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpFAdd %702 %704 
                                Private f32* %706 = OpAccessChain %9 %27 
                                                      OpStore %706 %705 
                                Private f32* %707 = OpAccessChain %490 %47 
                                         f32 %708 = OpLoad %707 
                                Private f32* %709 = OpAccessChain %254 %61 
                                                      OpStore %709 %708 
                                       f32_4 %710 = OpLoad %158 
                                       f32_4 %711 = OpVectorShuffle %710 %710 0 1 0 1 
                              Uniform f32_4* %712 = OpAccessChain %38 %235 
                                       f32_4 %713 = OpLoad %712 
                                       f32_4 %714 = OpVectorShuffle %713 %713 0 1 0 1 
                                       f32_4 %715 = OpFMul %711 %714 
                                       f32_4 %716 = OpLoad %254 
                                       f32_4 %717 = OpVectorShuffle %716 %716 3 1 3 2 
                                       f32_4 %718 = OpFAdd %715 %717 
                                                      OpStore %510 %718 
                                       f32_4 %719 = OpLoad %254 
                                       f32_2 %720 = OpVectorShuffle %719 %719 1 2 
                                       f32_4 %721 = OpLoad %490 
                                       f32_4 %722 = OpVectorShuffle %721 %720 0 4 2 5 
                                                      OpStore %490 %722 
                                       f32_4 %724 = OpLoad %510 
                                       f32_2 %725 = OpVectorShuffle %724 %724 0 1 
                                         f32 %726 = OpLoad %54 
                                         f32 %727 = OpCompositeExtract %725 0 
                                         f32 %728 = OpCompositeExtract %725 1 
                                       f32_3 %729 = OpCompositeConstruct %727 %728 %726 
                                                      OpStore %723 %729 
                         read_only Texture2D %730 = OpLoad %643 
                                     sampler %731 = OpLoad %645 
                  read_only Texture2DSampled %732 = OpSampledImage %730 %731 
                                       f32_3 %733 = OpLoad %723 
                                         f32 %734 = OpCompositeExtract %733 2 
                                         f32 %735 = OpImageSampleDrefExplicitLod %732 %733 %734 Lod %6 
                                                      OpStore %642 %735 
                                       f32_4 %737 = OpLoad %510 
                                       f32_2 %738 = OpVectorShuffle %737 %737 2 3 
                                         f32 %739 = OpLoad %54 
                                         f32 %740 = OpCompositeExtract %738 0 
                                         f32 %741 = OpCompositeExtract %738 1 
                                       f32_3 %742 = OpCompositeConstruct %740 %741 %739 
                                                      OpStore %736 %742 
                         read_only Texture2D %743 = OpLoad %643 
                                     sampler %744 = OpLoad %645 
                  read_only Texture2DSampled %745 = OpSampledImage %743 %744 
                                       f32_3 %746 = OpLoad %736 
                                         f32 %747 = OpCompositeExtract %746 2 
                                         f32 %748 = OpImageSampleDrefExplicitLod %745 %746 %747 Lod %6 
                                                      OpStore %660 %748 
                                Private f32* %749 = OpAccessChain %485 %61 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpLoad %642 
                                         f32 %752 = OpFMul %750 %751 
                                Private f32* %753 = OpAccessChain %9 %27 
                                         f32 %754 = OpLoad %753 
                                         f32 %755 = OpFAdd %752 %754 
                                Private f32* %756 = OpAccessChain %9 %27 
                                                      OpStore %756 %755 
                                       f32_4 %757 = OpLoad %9 
                                       f32_4 %758 = OpVectorShuffle %757 %757 1 1 3 3 
                                       f32_4 %759 = OpLoad %73 
                                       f32_4 %760 = OpFMul %758 %759 
                                                      OpStore %254 %760 
                                Private f32* %761 = OpAccessChain %9 %61 
                                         f32 %762 = OpLoad %761 
                                Private f32* %763 = OpAccessChain %73 %47 
                                         f32 %764 = OpLoad %763 
                                         f32 %765 = OpFMul %762 %764 
                                                      OpStore %31 %765 
                                       f32_4 %766 = OpLoad %158 
                                       f32_4 %767 = OpVectorShuffle %766 %766 0 1 0 1 
                              Uniform f32_4* %768 = OpAccessChain %38 %235 
                                       f32_4 %769 = OpLoad %768 
                                       f32_4 %770 = OpVectorShuffle %769 %769 0 1 0 1 
                                       f32_4 %771 = OpFMul %767 %770 
                                       f32_4 %772 = OpLoad %490 
                                       f32_4 %773 = OpVectorShuffle %772 %772 0 1 2 1 
                                       f32_4 %774 = OpFAdd %771 %773 
                                                      OpStore %73 %774 
                                       f32_4 %775 = OpLoad %158 
                                       f32_4 %776 = OpVectorShuffle %775 %775 0 1 0 1 
                              Uniform f32_4* %777 = OpAccessChain %38 %235 
                                       f32_4 %778 = OpLoad %777 
                                       f32_4 %779 = OpVectorShuffle %778 %778 0 1 0 1 
                                       f32_4 %780 = OpFMul %776 %779 
                                       f32_4 %781 = OpLoad %490 
                                       f32_4 %782 = OpVectorShuffle %781 %781 0 3 2 3 
                                       f32_4 %783 = OpFAdd %780 %782 
                                                      OpStore %485 %783 
                                       f32_4 %785 = OpLoad %73 
                                       f32_2 %786 = OpVectorShuffle %785 %785 0 1 
                                         f32 %787 = OpLoad %54 
                                         f32 %788 = OpCompositeExtract %786 0 
                                         f32 %789 = OpCompositeExtract %786 1 
                                       f32_3 %790 = OpCompositeConstruct %788 %789 %787 
                                                      OpStore %784 %790 
                         read_only Texture2D %792 = OpLoad %643 
                                     sampler %793 = OpLoad %645 
                  read_only Texture2DSampled %794 = OpSampledImage %792 %793 
                                       f32_3 %795 = OpLoad %784 
                                         f32 %796 = OpCompositeExtract %795 2 
                                         f32 %797 = OpImageSampleDrefExplicitLod %794 %795 %796 Lod %6 
                                                      OpStore %791 %797 
                                       f32_4 %799 = OpLoad %73 
                                       f32_2 %800 = OpVectorShuffle %799 %799 2 3 
                                         f32 %801 = OpLoad %54 
                                         f32 %802 = OpCompositeExtract %800 0 
                                         f32 %803 = OpCompositeExtract %800 1 
                                       f32_3 %804 = OpCompositeConstruct %802 %803 %801 
                                                      OpStore %798 %804 
                         read_only Texture2D %806 = OpLoad %643 
                                     sampler %807 = OpLoad %645 
                  read_only Texture2DSampled %808 = OpSampledImage %806 %807 
                                       f32_3 %809 = OpLoad %798 
                                         f32 %810 = OpCompositeExtract %809 2 
                                         f32 %811 = OpImageSampleDrefExplicitLod %808 %809 %810 Lod %6 
                                                      OpStore %805 %811 
                                Private f32* %812 = OpAccessChain %254 %27 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpLoad %791 
                                         f32 %815 = OpFMul %813 %814 
                                Private f32* %816 = OpAccessChain %9 %27 
                                         f32 %817 = OpLoad %816 
                                         f32 %818 = OpFAdd %815 %817 
                                Private f32* %819 = OpAccessChain %9 %27 
                                                      OpStore %819 %818 
                                Private f32* %820 = OpAccessChain %254 %47 
                                         f32 %821 = OpLoad %820 
                                         f32 %822 = OpLoad %805 
                                         f32 %823 = OpFMul %821 %822 
                                Private f32* %824 = OpAccessChain %9 %27 
                                         f32 %825 = OpLoad %824 
                                         f32 %826 = OpFAdd %823 %825 
                                Private f32* %827 = OpAccessChain %9 %27 
                                                      OpStore %827 %826 
                                Private f32* %828 = OpAccessChain %254 %142 
                                         f32 %829 = OpLoad %828 
                                         f32 %830 = OpLoad %660 
                                         f32 %831 = OpFMul %829 %830 
                                Private f32* %832 = OpAccessChain %9 %27 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpFAdd %831 %833 
                                Private f32* %835 = OpAccessChain %9 %27 
                                                      OpStore %835 %834 
                                       f32_4 %837 = OpLoad %485 
                                       f32_2 %838 = OpVectorShuffle %837 %837 0 1 
                                         f32 %839 = OpLoad %54 
                                         f32 %840 = OpCompositeExtract %838 0 
                                         f32 %841 = OpCompositeExtract %838 1 
                                       f32_3 %842 = OpCompositeConstruct %840 %841 %839 
                                                      OpStore %836 %842 
                         read_only Texture2D %843 = OpLoad %643 
                                     sampler %844 = OpLoad %645 
                  read_only Texture2DSampled %845 = OpSampledImage %843 %844 
                                       f32_3 %846 = OpLoad %836 
                                         f32 %847 = OpCompositeExtract %846 2 
                                         f32 %848 = OpImageSampleDrefExplicitLod %845 %846 %847 Lod %6 
                                                      OpStore %791 %848 
                                       f32_4 %850 = OpLoad %485 
                                       f32_2 %851 = OpVectorShuffle %850 %850 2 3 
                                         f32 %852 = OpLoad %54 
                                         f32 %853 = OpCompositeExtract %851 0 
                                         f32 %854 = OpCompositeExtract %851 1 
                                       f32_3 %855 = OpCompositeConstruct %853 %854 %852 
                                                      OpStore %849 %855 
                         read_only Texture2D %857 = OpLoad %643 
                                     sampler %858 = OpLoad %645 
                  read_only Texture2DSampled %859 = OpSampledImage %857 %858 
                                       f32_3 %860 = OpLoad %849 
                                         f32 %861 = OpCompositeExtract %860 2 
                                         f32 %862 = OpImageSampleDrefExplicitLod %859 %860 %861 Lod %6 
                                                      OpStore %856 %862 
                                Private f32* %863 = OpAccessChain %254 %61 
                                         f32 %864 = OpLoad %863 
                                         f32 %865 = OpLoad %791 
                                         f32 %866 = OpFMul %864 %865 
                                Private f32* %867 = OpAccessChain %9 %27 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpFAdd %866 %868 
                                Private f32* %870 = OpAccessChain %9 %27 
                                                      OpStore %870 %869 
                                         f32 %871 = OpLoad %31 
                                         f32 %872 = OpLoad %856 
                                         f32 %873 = OpFMul %871 %872 
                                Private f32* %874 = OpAccessChain %9 %27 
                                         f32 %875 = OpLoad %874 
                                         f32 %876 = OpFAdd %873 %875 
                                Private f32* %877 = OpAccessChain %9 %27 
                                                      OpStore %877 %876 
                                Uniform f32* %878 = OpAccessChain %38 %223 %27 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFNegate %879 
                                         f32 %881 = OpFAdd %880 %51 
                                                      OpStore %31 %881 
                                       f32_4 %882 = OpLoad %9 
                                       f32_4 %883 = OpVectorShuffle %882 %882 0 0 0 0 
                                         f32 %884 = OpLoad %31 
                                       f32_4 %885 = OpCompositeConstruct %884 %884 %884 %884 
                                       f32_4 %886 = OpFMul %883 %885 
                              Uniform f32_4* %887 = OpAccessChain %38 %223 
                                       f32_4 %888 = OpLoad %887 
                                       f32_4 %889 = OpVectorShuffle %888 %888 0 0 0 0 
                                       f32_4 %890 = OpFAdd %886 %889 
                                                      OpStore %9 %890 
                                       f32_4 %893 = OpLoad %9 
                                                      OpStore %892 %893 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 895
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %892 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %643 DescriptorSet 643 
                                                      OpDecorate %643 Binding 643 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %645 DescriptorSet 645 
                                                      OpDecorate %645 Binding 645 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %660 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %792 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %843 RelaxedPrecision 
                                                      OpDecorate %844 RelaxedPrecision 
                                                      OpDecorate %856 RelaxedPrecision 
                                                      OpDecorate %857 RelaxedPrecision 
                                                      OpDecorate %858 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %892 RelaxedPrecision 
                                                      OpDecorate %892 Location 892 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %7 %7 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                             %122 = OpTypeBool 
                                             %123 = OpTypeVector %122 4 
                                             %124 = OpTypePointer Private %123 
                             Private bool_4* %125 = OpVariable Private 
                                         i32 %128 = OpConstant 3 
                                             %132 = OpTypePointer Private %122 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                             Private bool_4* %151 = OpVariable Private 
                                         i32 %154 = OpConstant 4 
                              Private f32_4* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %181 = OpConstant 2 
                                         i32 %205 = OpConstant 5 
                                         i32 %223 = OpConstant 6 
                                         i32 %235 = OpConstant 7 
                              Private f32_4* %254 = OpVariable Private 
                                         i32 %308 = OpConstant 9 
                                         i32 %315 = OpConstant 8 
                                         i32 %327 = OpConstant 10 
                                         i32 %339 = OpConstant 11 
                                         i32 %363 = OpConstant 13 
                                         i32 %370 = OpConstant 12 
                                         i32 %382 = OpConstant 14 
                                         i32 %394 = OpConstant 15 
                                Private f32* %416 = OpVariable Private 
                                       f32_4 %418 = OpConstantComposite %51 %51 %51 %51 
                                         f32 %433 = OpConstant 3.674022E-40 
                                       f32_2 %434 = OpConstantComposite %433 %433 
                                             %455 = OpTypePointer Private %22 
                              Private f32_2* %456 = OpVariable Private 
                                       f32_2 %459 = OpConstantComposite %135 %135 
                                       f32_4 %463 = OpConstantComposite %433 %51 %433 %51 
                                       f32_2 %473 = OpConstantComposite %51 %51 
                                         f32 %476 = OpConstant 3.674022E-40 
                                       f32_2 %477 = OpConstantComposite %476 %476 
                              Private f32_4* %485 = OpVariable Private 
                              Private f32_4* %490 = OpVariable Private 
                              Private f32_4* %510 = OpVariable Private 
                                         f32 %530 = OpConstant 3.674022E-40 
                                       f32_2 %531 = OpConstantComposite %530 %530 
                                             %563 = OpTypePointer Private %74 
                              Private f32_3* %564 = OpVariable Private 
                                         f32 %574 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %576 = OpConstant 3.674022E-40 
                                       f32_3 %577 = OpConstantComposite %574 %575 %576 
                                             %635 = OpTypePointer Function %74 
                                Private f32* %642 = OpVariable Private 
        UniformConstant read_only Texture2D* %643 = OpVariable UniformConstant 
                    UniformConstant sampler* %645 = OpVariable UniformConstant 
                                             %647 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %648 = OpTypeSampledImage %647 
                                Private f32* %660 = OpVariable Private 
                                Private f32* %674 = OpVariable Private 
                                Private f32* %791 = OpVariable Private 
                                Private f32* %805 = OpVariable Private 
                                Private f32* %856 = OpVariable Private 
                                             %891 = OpTypePointer Output %7 
                               Output f32_4* %892 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %636 = OpVariable Function 
                             Function f32_3* %653 = OpVariable Function 
                             Function f32_3* %667 = OpVariable Function 
                             Function f32_3* %723 = OpVariable Function 
                             Function f32_3* %736 = OpVariable Function 
                             Function f32_3* %784 = OpVariable Function 
                             Function f32_3* %798 = OpVariable Function 
                             Function f32_3* %836 = OpVariable Function 
                             Function f32_3* %849 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 2 2 2 2 
                              Uniform f32_4* %129 = OpAccessChain %38 %128 
                                       f32_4 %130 = OpLoad %129 
                                      bool_4 %131 = OpFOrdGreaterThanEqual %127 %130 
                                                      OpStore %125 %131 
                               Private bool* %133 = OpAccessChain %125 %27 
                                        bool %134 = OpLoad %133 
                                         f32 %136 = OpSelect %134 %51 %135 
                                Private f32* %137 = OpAccessChain %73 %27 
                                                      OpStore %137 %136 
                               Private bool* %138 = OpAccessChain %125 %47 
                                        bool %139 = OpLoad %138 
                                         f32 %140 = OpSelect %139 %51 %135 
                                Private f32* %141 = OpAccessChain %73 %47 
                                                      OpStore %141 %140 
                               Private bool* %143 = OpAccessChain %125 %142 
                                        bool %144 = OpLoad %143 
                                         f32 %145 = OpSelect %144 %51 %135 
                                Private f32* %146 = OpAccessChain %73 %142 
                                                      OpStore %146 %145 
                               Private bool* %147 = OpAccessChain %125 %61 
                                        bool %148 = OpLoad %147 
                                         f32 %149 = OpSelect %148 %51 %135 
                                Private f32* %150 = OpAccessChain %73 %61 
                                                      OpStore %150 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %152 2 2 2 2 
                              Uniform f32_4* %155 = OpAccessChain %38 %154 
                                       f32_4 %156 = OpLoad %155 
                                      bool_4 %157 = OpFOrdLessThan %153 %156 
                                                      OpStore %151 %157 
                               Private bool* %159 = OpAccessChain %151 %27 
                                        bool %160 = OpLoad %159 
                                         f32 %161 = OpSelect %160 %51 %135 
                                Private f32* %162 = OpAccessChain %158 %27 
                                                      OpStore %162 %161 
                               Private bool* %163 = OpAccessChain %151 %47 
                                        bool %164 = OpLoad %163 
                                         f32 %165 = OpSelect %164 %51 %135 
                                Private f32* %166 = OpAccessChain %158 %47 
                                                      OpStore %166 %165 
                               Private bool* %167 = OpAccessChain %151 %142 
                                        bool %168 = OpLoad %167 
                                         f32 %169 = OpSelect %168 %51 %135 
                                Private f32* %170 = OpAccessChain %158 %142 
                                                      OpStore %170 %169 
                               Private bool* %171 = OpAccessChain %151 %61 
                                        bool %172 = OpLoad %171 
                                         f32 %173 = OpSelect %172 %51 %135 
                                Private f32* %174 = OpAccessChain %158 %61 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %73 
                                       f32_4 %177 = OpLoad %158 
                                       f32_4 %178 = OpFMul %176 %177 
                                                      OpStore %175 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %38 %181 %60 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %180 %183 
                                                      OpStore %158 %184 
                              Uniform f32_4* %185 = OpAccessChain %38 %181 %40 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %158 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %158 %191 
                              Uniform f32_4* %192 = OpAccessChain %38 %181 %181 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %158 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                              Uniform f32_4* %200 = OpAccessChain %38 %181 %128 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpFAdd %199 %201 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %38 %205 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %158 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %158 %211 
                              Uniform f32_4* %212 = OpAccessChain %38 %205 %154 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %158 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFAdd %217 %219 
                                       f32_4 %221 = OpLoad %158 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %158 %222 
                              Uniform f32_4* %224 = OpAccessChain %38 %205 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 2 2 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %158 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFAdd %229 %231 
                                       f32_4 %233 = OpLoad %158 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %158 %234 
                              Uniform f32_4* %236 = OpAccessChain %38 %205 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_4 %239 = OpLoad %9 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %158 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %158 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %158 %246 
                                       f32_4 %247 = OpLoad %175 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                                       f32_4 %249 = OpLoad %158 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %158 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %158 %253 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 1 1 1 
                              Uniform f32_4* %257 = OpAccessChain %38 %205 %60 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFMul %256 %259 
                                       f32_4 %261 = OpLoad %254 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %254 %262 
                              Uniform f32_4* %263 = OpAccessChain %38 %205 %40 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %254 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %254 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %254 %273 
                              Uniform f32_4* %274 = OpAccessChain %38 %205 %181 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 2 2 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %254 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFAdd %279 %281 
                                       f32_4 %283 = OpLoad %254 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %254 %284 
                              Uniform f32_4* %285 = OpAccessChain %38 %205 %128 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %254 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %254 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %254 %295 
                                       f32_4 %296 = OpLoad %254 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %175 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
                                       f32_3 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %158 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %158 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %158 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 1 1 1 
                              Uniform f32_4* %309 = OpAccessChain %38 %205 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %307 %311 
                                       f32_4 %313 = OpLoad %254 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %254 %314 
                              Uniform f32_4* %316 = OpAccessChain %38 %205 %315 
                                       f32_4 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_4 %319 = OpLoad %9 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 0 0 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %254 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %254 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %254 %326 
                              Uniform f32_4* %328 = OpAccessChain %38 %205 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 2 2 2 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %254 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %254 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %254 %338 
                              Uniform f32_4* %340 = OpAccessChain %38 %205 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 3 3 3 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %254 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFAdd %345 %347 
                                       f32_4 %349 = OpLoad %254 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %254 %350 
                                       f32_4 %351 = OpLoad %254 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_4 %353 = OpLoad %175 
                                       f32_3 %354 = OpVectorShuffle %353 %353 2 2 2 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_4 %356 = OpLoad %158 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %358 = OpFAdd %355 %357 
                                       f32_4 %359 = OpLoad %158 
                                       f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
                                                      OpStore %158 %360 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 1 1 1 
                              Uniform f32_4* %364 = OpAccessChain %38 %205 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFMul %362 %366 
                                       f32_4 %368 = OpLoad %254 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %254 %369 
                              Uniform f32_4* %371 = OpAccessChain %38 %205 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %254 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpFAdd %376 %378 
                                       f32_4 %380 = OpLoad %254 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 6 3 
                                                      OpStore %254 %381 
                              Uniform f32_4* %383 = OpAccessChain %38 %205 %382 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 2 2 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %254 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %9 %393 
                              Uniform f32_4* %395 = OpAccessChain %38 %205 %394 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 3 3 3 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %9 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_4 %408 = OpLoad %175 
                                       f32_3 %409 = OpVectorShuffle %408 %408 3 3 3 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_4 %411 = OpLoad %158 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFAdd %410 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                                       f32_4 %417 = OpLoad %175 
                                         f32 %419 = OpDot %417 %418 
                                                      OpStore %416 %419 
                                         f32 %420 = OpLoad %416 
                                         f32 %421 = OpFNegate %420 
                                Private f32* %422 = OpAccessChain %9 %142 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFAdd %421 %423 
                                                      OpStore %54 %424 
                                         f32 %425 = OpLoad %54 
                                         f32 %426 = OpFAdd %425 %51 
                                                      OpStore %54 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                              Uniform f32_4* %429 = OpAccessChain %38 %235 
                                       f32_4 %430 = OpLoad %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 2 3 
                                       f32_2 %432 = OpFMul %428 %431 
                                       f32_2 %435 = OpFAdd %432 %434 
                                       f32_4 %436 = OpLoad %158 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 2 3 
                                                      OpStore %158 %437 
                                       f32_4 %438 = OpLoad %158 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_2 %440 = OpExtInst %1 8 %439 
                                       f32_4 %441 = OpLoad %158 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
                                                      OpStore %158 %442 
                                       f32_4 %443 = OpLoad %9 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                              Uniform f32_4* %445 = OpAccessChain %38 %235 
                                       f32_4 %446 = OpLoad %445 
                                       f32_2 %447 = OpVectorShuffle %446 %446 2 3 
                                       f32_2 %448 = OpFMul %444 %447 
                                       f32_4 %449 = OpLoad %158 
                                       f32_2 %450 = OpVectorShuffle %449 %449 0 1 
                                       f32_2 %451 = OpFNegate %450 
                                       f32_2 %452 = OpFAdd %448 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 2 3 
                                                      OpStore %9 %454 
                                       f32_4 %457 = OpLoad %9 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 1 
                                       f32_2 %460 = OpExtInst %1 40 %458 %459 
                                                      OpStore %456 %460 
                                       f32_4 %461 = OpLoad %9 
                                       f32_4 %462 = OpVectorShuffle %461 %461 0 0 1 1 
                                       f32_4 %464 = OpFAdd %462 %463 
                                                      OpStore %73 %464 
                                       f32_2 %465 = OpLoad %456 
                                       f32_2 %466 = OpFNegate %465 
                                       f32_2 %467 = OpLoad %456 
                                       f32_2 %468 = OpFMul %466 %467 
                                       f32_4 %469 = OpLoad %73 
                                       f32_2 %470 = OpVectorShuffle %469 %469 1 3 
                                       f32_2 %471 = OpFAdd %468 %470 
                                                      OpStore %456 %471 
                                       f32_2 %472 = OpLoad %456 
                                       f32_2 %474 = OpFAdd %472 %473 
                                                      OpStore %456 %474 
                                       f32_2 %475 = OpLoad %456 
                                       f32_2 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %254 
                                       f32_4 %480 = OpVectorShuffle %479 %478 4 5 2 3 
                                                      OpStore %254 %480 
                                       f32_4 %481 = OpLoad %9 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 1 
                                       f32_2 %483 = OpFNegate %482 
                                       f32_2 %484 = OpFAdd %483 %473 
                                                      OpStore %456 %484 
                                       f32_2 %486 = OpLoad %456 
                                       f32_2 %487 = OpFMul %486 %477 
                                       f32_4 %488 = OpLoad %485 
                                       f32_4 %489 = OpVectorShuffle %488 %487 4 5 2 3 
                                                      OpStore %485 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 1 
                                       f32_2 %493 = OpExtInst %1 37 %492 %459 
                                       f32_4 %494 = OpLoad %490 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 2 3 
                                                      OpStore %490 %495 
                                       f32_4 %496 = OpLoad %490 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                       f32_2 %498 = OpFNegate %497 
                                       f32_4 %499 = OpLoad %490 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_2 %501 = OpFMul %498 %500 
                                       f32_2 %502 = OpLoad %456 
                                       f32_2 %503 = OpFAdd %501 %502 
                                                      OpStore %456 %503 
                                       f32_2 %504 = OpLoad %456 
                                       f32_2 %505 = OpFAdd %504 %473 
                                                      OpStore %456 %505 
                                       f32_2 %506 = OpLoad %456 
                                       f32_2 %507 = OpFMul %506 %477 
                                       f32_4 %508 = OpLoad %490 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 2 3 
                                                      OpStore %490 %509 
                                       f32_4 %511 = OpLoad %73 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 0 2 2 
                                       f32_4 %513 = OpLoad %73 
                                       f32_4 %514 = OpVectorShuffle %513 %513 0 0 2 2 
                                       f32_4 %515 = OpFMul %512 %514 
                                                      OpStore %510 %515 
                                       f32_4 %516 = OpLoad %73 
                                       f32_2 %517 = OpVectorShuffle %516 %516 1 3 
                                       f32_2 %518 = OpFMul %517 %477 
                                                      OpStore %456 %518 
                                       f32_4 %519 = OpLoad %510 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 2 
                                       f32_2 %521 = OpFMul %520 %434 
                                       f32_4 %522 = OpLoad %9 
                                       f32_2 %523 = OpVectorShuffle %522 %522 0 1 
                                       f32_2 %524 = OpFNegate %523 
                                       f32_2 %525 = OpFAdd %521 %524 
                                       f32_4 %526 = OpLoad %9 
                                       f32_4 %527 = OpVectorShuffle %526 %525 4 5 2 3 
                                                      OpStore %9 %527 
                                       f32_4 %528 = OpLoad %510 
                                       f32_2 %529 = OpVectorShuffle %528 %528 3 1 
                                       f32_2 %532 = OpFMul %529 %531 
                                       f32_4 %533 = OpLoad %485 
                                       f32_4 %534 = OpVectorShuffle %533 %532 0 1 4 5 
                                                      OpStore %485 %534 
                                       f32_4 %535 = OpLoad %9 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 1 
                                       f32_2 %537 = OpFMul %536 %477 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %537 4 5 2 3 
                                                      OpStore %73 %539 
                                Private f32* %540 = OpAccessChain %73 %47 
                                         f32 %541 = OpLoad %540 
                                Private f32* %542 = OpAccessChain %490 %142 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %456 %47 
                                         f32 %544 = OpLoad %543 
                                Private f32* %545 = OpAccessChain %490 %61 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %456 %27 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %73 %61 
                                                      OpStore %548 %547 
                                       f32_4 %549 = OpLoad %485 
                                       f32_2 %550 = OpVectorShuffle %549 %549 1 2 
                                       f32_4 %551 = OpLoad %254 
                                       f32_4 %552 = OpVectorShuffle %551 %550 0 1 4 5 
                                                      OpStore %254 %552 
                                       f32_4 %553 = OpLoad %254 
                                       f32_3 %554 = OpVectorShuffle %553 %553 2 1 3 
                                       f32_4 %555 = OpLoad %490 
                                       f32_3 %556 = OpVectorShuffle %555 %555 2 1 3 
                                       f32_3 %557 = OpFAdd %554 %556 
                                       f32_4 %558 = OpLoad %9 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 2 6 
                                                      OpStore %9 %559 
                                Private f32* %560 = OpAccessChain %490 %27 
                                         f32 %561 = OpLoad %560 
                                Private f32* %562 = OpAccessChain %73 %142 
                                                      OpStore %562 %561 
                                       f32_4 %565 = OpLoad %254 
                                       f32_3 %566 = OpVectorShuffle %565 %565 2 1 3 
                                       f32_4 %567 = OpLoad %9 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 3 
                                       f32_3 %569 = OpFDiv %566 %568 
                                                      OpStore %564 %569 
                                Private f32* %570 = OpAccessChain %254 %27 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %485 %142 
                                                      OpStore %572 %571 
                                       f32_3 %573 = OpLoad %564 
                                       f32_3 %578 = OpFAdd %573 %577 
                                       f32_4 %579 = OpLoad %254 
                                       f32_4 %580 = OpVectorShuffle %579 %578 4 5 6 3 
                                                      OpStore %254 %580 
                                       f32_4 %581 = OpLoad %254 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                              Uniform f32_4* %583 = OpAccessChain %38 %235 
                                       f32_4 %584 = OpLoad %583 
                                       f32_3 %585 = OpVectorShuffle %584 %584 1 1 1 
                                       f32_3 %586 = OpFMul %582 %585 
                                       f32_4 %587 = OpLoad %254 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                                      OpStore %254 %588 
                                Private f32* %589 = OpAccessChain %254 %27 
                                         f32 %590 = OpLoad %589 
                                Private f32* %591 = OpAccessChain %490 %61 
                                                      OpStore %591 %590 
                                       f32_4 %592 = OpLoad %73 
                                       f32_4 %593 = OpVectorShuffle %592 %592 2 3 0 2 
                                       f32_4 %594 = OpLoad %485 
                                       f32_4 %595 = OpVectorShuffle %594 %594 2 3 0 2 
                                       f32_4 %596 = OpFAdd %593 %595 
                                                      OpStore %73 %596 
                                       f32_4 %597 = OpLoad %485 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 2 3 
                                       f32_4 %599 = OpLoad %73 
                                       f32_3 %600 = OpVectorShuffle %599 %599 2 3 1 
                                       f32_3 %601 = OpFDiv %598 %600 
                                       f32_4 %602 = OpLoad %485 
                                       f32_4 %603 = OpVectorShuffle %602 %601 4 5 6 3 
                                                      OpStore %485 %603 
                                       f32_4 %604 = OpLoad %485 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_3 %606 = OpFAdd %605 %577 
                                       f32_4 %607 = OpLoad %485 
                                       f32_4 %608 = OpVectorShuffle %607 %606 4 5 6 3 
                                                      OpStore %485 %608 
                                       f32_4 %609 = OpLoad %485 
                                       f32_3 %610 = OpVectorShuffle %609 %609 1 0 2 
                              Uniform f32_4* %611 = OpAccessChain %38 %235 
                                       f32_4 %612 = OpLoad %611 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 0 0 
                                       f32_3 %614 = OpFMul %610 %613 
                                       f32_4 %615 = OpLoad %490 
                                       f32_4 %616 = OpVectorShuffle %615 %614 4 5 6 3 
                                                      OpStore %490 %616 
                                       f32_4 %617 = OpLoad %158 
                                       f32_4 %618 = OpVectorShuffle %617 %617 0 1 0 1 
                              Uniform f32_4* %619 = OpAccessChain %38 %235 
                                       f32_4 %620 = OpLoad %619 
                                       f32_4 %621 = OpVectorShuffle %620 %620 0 1 0 1 
                                       f32_4 %622 = OpFMul %618 %621 
                                       f32_4 %623 = OpLoad %490 
                                       f32_4 %624 = OpVectorShuffle %623 %623 1 3 0 3 
                                       f32_4 %625 = OpFAdd %622 %624 
                                                      OpStore %485 %625 
                                       f32_4 %626 = OpLoad %158 
                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
                              Uniform f32_4* %628 = OpAccessChain %38 %235 
                                       f32_4 %629 = OpLoad %628 
                                       f32_2 %630 = OpVectorShuffle %629 %629 0 1 
                                       f32_2 %631 = OpFMul %627 %630 
                                       f32_4 %632 = OpLoad %490 
                                       f32_2 %633 = OpVectorShuffle %632 %632 2 3 
                                       f32_2 %634 = OpFAdd %631 %633 
                                                      OpStore %456 %634 
                                       f32_2 %637 = OpLoad %456 
                                         f32 %638 = OpLoad %54 
                                         f32 %639 = OpCompositeExtract %637 0 
                                         f32 %640 = OpCompositeExtract %637 1 
                                       f32_3 %641 = OpCompositeConstruct %639 %640 %638 
                                                      OpStore %636 %641 
                         read_only Texture2D %644 = OpLoad %643 
                                     sampler %646 = OpLoad %645 
                  read_only Texture2DSampled %649 = OpSampledImage %644 %646 
                                       f32_3 %650 = OpLoad %636 
                                         f32 %651 = OpCompositeExtract %650 2 
                                         f32 %652 = OpImageSampleDrefExplicitLod %649 %650 %651 Lod %6 
                                                      OpStore %642 %652 
                                       f32_4 %654 = OpLoad %485 
                                       f32_2 %655 = OpVectorShuffle %654 %654 0 1 
                                         f32 %656 = OpLoad %54 
                                         f32 %657 = OpCompositeExtract %655 0 
                                         f32 %658 = OpCompositeExtract %655 1 
                                       f32_3 %659 = OpCompositeConstruct %657 %658 %656 
                                                      OpStore %653 %659 
                         read_only Texture2D %661 = OpLoad %643 
                                     sampler %662 = OpLoad %645 
                  read_only Texture2DSampled %663 = OpSampledImage %661 %662 
                                       f32_3 %664 = OpLoad %653 
                                         f32 %665 = OpCompositeExtract %664 2 
                                         f32 %666 = OpImageSampleDrefExplicitLod %663 %664 %665 Lod %6 
                                                      OpStore %660 %666 
                                       f32_4 %668 = OpLoad %485 
                                       f32_2 %669 = OpVectorShuffle %668 %668 2 3 
                                         f32 %670 = OpLoad %54 
                                         f32 %671 = OpCompositeExtract %669 0 
                                         f32 %672 = OpCompositeExtract %669 1 
                                       f32_3 %673 = OpCompositeConstruct %671 %672 %670 
                                                      OpStore %667 %673 
                         read_only Texture2D %675 = OpLoad %643 
                                     sampler %676 = OpLoad %645 
                  read_only Texture2DSampled %677 = OpSampledImage %675 %676 
                                       f32_3 %678 = OpLoad %667 
                                         f32 %679 = OpCompositeExtract %678 2 
                                         f32 %680 = OpImageSampleDrefExplicitLod %677 %678 %679 Lod %6 
                                                      OpStore %674 %680 
                                       f32_4 %681 = OpLoad %9 
                                       f32_4 %682 = OpVectorShuffle %681 %681 0 0 0 1 
                                       f32_4 %683 = OpLoad %73 
                                       f32_4 %684 = OpVectorShuffle %683 %683 2 3 1 2 
                                       f32_4 %685 = OpFMul %682 %684 
                                                      OpStore %485 %685 
                                         f32 %686 = OpLoad %674 
                                Private f32* %687 = OpAccessChain %485 %47 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpFMul %686 %688 
                                Private f32* %690 = OpAccessChain %9 %27 
                                                      OpStore %690 %689 
                                Private f32* %691 = OpAccessChain %485 %27 
                                         f32 %692 = OpLoad %691 
                                         f32 %693 = OpLoad %660 
                                         f32 %694 = OpFMul %692 %693 
                                Private f32* %695 = OpAccessChain %9 %27 
                                         f32 %696 = OpLoad %695 
                                         f32 %697 = OpFAdd %694 %696 
                                Private f32* %698 = OpAccessChain %9 %27 
                                                      OpStore %698 %697 
                                Private f32* %699 = OpAccessChain %485 %142 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpLoad %642 
                                         f32 %702 = OpFMul %700 %701 
                                Private f32* %703 = OpAccessChain %9 %27 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpFAdd %702 %704 
                                Private f32* %706 = OpAccessChain %9 %27 
                                                      OpStore %706 %705 
                                Private f32* %707 = OpAccessChain %490 %47 
                                         f32 %708 = OpLoad %707 
                                Private f32* %709 = OpAccessChain %254 %61 
                                                      OpStore %709 %708 
                                       f32_4 %710 = OpLoad %158 
                                       f32_4 %711 = OpVectorShuffle %710 %710 0 1 0 1 
                              Uniform f32_4* %712 = OpAccessChain %38 %235 
                                       f32_4 %713 = OpLoad %712 
                                       f32_4 %714 = OpVectorShuffle %713 %713 0 1 0 1 
                                       f32_4 %715 = OpFMul %711 %714 
                                       f32_4 %716 = OpLoad %254 
                                       f32_4 %717 = OpVectorShuffle %716 %716 3 1 3 2 
                                       f32_4 %718 = OpFAdd %715 %717 
                                                      OpStore %510 %718 
                                       f32_4 %719 = OpLoad %254 
                                       f32_2 %720 = OpVectorShuffle %719 %719 1 2 
                                       f32_4 %721 = OpLoad %490 
                                       f32_4 %722 = OpVectorShuffle %721 %720 0 4 2 5 
                                                      OpStore %490 %722 
                                       f32_4 %724 = OpLoad %510 
                                       f32_2 %725 = OpVectorShuffle %724 %724 0 1 
                                         f32 %726 = OpLoad %54 
                                         f32 %727 = OpCompositeExtract %725 0 
                                         f32 %728 = OpCompositeExtract %725 1 
                                       f32_3 %729 = OpCompositeConstruct %727 %728 %726 
                                                      OpStore %723 %729 
                         read_only Texture2D %730 = OpLoad %643 
                                     sampler %731 = OpLoad %645 
                  read_only Texture2DSampled %732 = OpSampledImage %730 %731 
                                       f32_3 %733 = OpLoad %723 
                                         f32 %734 = OpCompositeExtract %733 2 
                                         f32 %735 = OpImageSampleDrefExplicitLod %732 %733 %734 Lod %6 
                                                      OpStore %642 %735 
                                       f32_4 %737 = OpLoad %510 
                                       f32_2 %738 = OpVectorShuffle %737 %737 2 3 
                                         f32 %739 = OpLoad %54 
                                         f32 %740 = OpCompositeExtract %738 0 
                                         f32 %741 = OpCompositeExtract %738 1 
                                       f32_3 %742 = OpCompositeConstruct %740 %741 %739 
                                                      OpStore %736 %742 
                         read_only Texture2D %743 = OpLoad %643 
                                     sampler %744 = OpLoad %645 
                  read_only Texture2DSampled %745 = OpSampledImage %743 %744 
                                       f32_3 %746 = OpLoad %736 
                                         f32 %747 = OpCompositeExtract %746 2 
                                         f32 %748 = OpImageSampleDrefExplicitLod %745 %746 %747 Lod %6 
                                                      OpStore %660 %748 
                                Private f32* %749 = OpAccessChain %485 %61 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpLoad %642 
                                         f32 %752 = OpFMul %750 %751 
                                Private f32* %753 = OpAccessChain %9 %27 
                                         f32 %754 = OpLoad %753 
                                         f32 %755 = OpFAdd %752 %754 
                                Private f32* %756 = OpAccessChain %9 %27 
                                                      OpStore %756 %755 
                                       f32_4 %757 = OpLoad %9 
                                       f32_4 %758 = OpVectorShuffle %757 %757 1 1 3 3 
                                       f32_4 %759 = OpLoad %73 
                                       f32_4 %760 = OpFMul %758 %759 
                                                      OpStore %254 %760 
                                Private f32* %761 = OpAccessChain %9 %61 
                                         f32 %762 = OpLoad %761 
                                Private f32* %763 = OpAccessChain %73 %47 
                                         f32 %764 = OpLoad %763 
                                         f32 %765 = OpFMul %762 %764 
                                                      OpStore %31 %765 
                                       f32_4 %766 = OpLoad %158 
                                       f32_4 %767 = OpVectorShuffle %766 %766 0 1 0 1 
                              Uniform f32_4* %768 = OpAccessChain %38 %235 
                                       f32_4 %769 = OpLoad %768 
                                       f32_4 %770 = OpVectorShuffle %769 %769 0 1 0 1 
                                       f32_4 %771 = OpFMul %767 %770 
                                       f32_4 %772 = OpLoad %490 
                                       f32_4 %773 = OpVectorShuffle %772 %772 0 1 2 1 
                                       f32_4 %774 = OpFAdd %771 %773 
                                                      OpStore %73 %774 
                                       f32_4 %775 = OpLoad %158 
                                       f32_4 %776 = OpVectorShuffle %775 %775 0 1 0 1 
                              Uniform f32_4* %777 = OpAccessChain %38 %235 
                                       f32_4 %778 = OpLoad %777 
                                       f32_4 %779 = OpVectorShuffle %778 %778 0 1 0 1 
                                       f32_4 %780 = OpFMul %776 %779 
                                       f32_4 %781 = OpLoad %490 
                                       f32_4 %782 = OpVectorShuffle %781 %781 0 3 2 3 
                                       f32_4 %783 = OpFAdd %780 %782 
                                                      OpStore %485 %783 
                                       f32_4 %785 = OpLoad %73 
                                       f32_2 %786 = OpVectorShuffle %785 %785 0 1 
                                         f32 %787 = OpLoad %54 
                                         f32 %788 = OpCompositeExtract %786 0 
                                         f32 %789 = OpCompositeExtract %786 1 
                                       f32_3 %790 = OpCompositeConstruct %788 %789 %787 
                                                      OpStore %784 %790 
                         read_only Texture2D %792 = OpLoad %643 
                                     sampler %793 = OpLoad %645 
                  read_only Texture2DSampled %794 = OpSampledImage %792 %793 
                                       f32_3 %795 = OpLoad %784 
                                         f32 %796 = OpCompositeExtract %795 2 
                                         f32 %797 = OpImageSampleDrefExplicitLod %794 %795 %796 Lod %6 
                                                      OpStore %791 %797 
                                       f32_4 %799 = OpLoad %73 
                                       f32_2 %800 = OpVectorShuffle %799 %799 2 3 
                                         f32 %801 = OpLoad %54 
                                         f32 %802 = OpCompositeExtract %800 0 
                                         f32 %803 = OpCompositeExtract %800 1 
                                       f32_3 %804 = OpCompositeConstruct %802 %803 %801 
                                                      OpStore %798 %804 
                         read_only Texture2D %806 = OpLoad %643 
                                     sampler %807 = OpLoad %645 
                  read_only Texture2DSampled %808 = OpSampledImage %806 %807 
                                       f32_3 %809 = OpLoad %798 
                                         f32 %810 = OpCompositeExtract %809 2 
                                         f32 %811 = OpImageSampleDrefExplicitLod %808 %809 %810 Lod %6 
                                                      OpStore %805 %811 
                                Private f32* %812 = OpAccessChain %254 %27 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpLoad %791 
                                         f32 %815 = OpFMul %813 %814 
                                Private f32* %816 = OpAccessChain %9 %27 
                                         f32 %817 = OpLoad %816 
                                         f32 %818 = OpFAdd %815 %817 
                                Private f32* %819 = OpAccessChain %9 %27 
                                                      OpStore %819 %818 
                                Private f32* %820 = OpAccessChain %254 %47 
                                         f32 %821 = OpLoad %820 
                                         f32 %822 = OpLoad %805 
                                         f32 %823 = OpFMul %821 %822 
                                Private f32* %824 = OpAccessChain %9 %27 
                                         f32 %825 = OpLoad %824 
                                         f32 %826 = OpFAdd %823 %825 
                                Private f32* %827 = OpAccessChain %9 %27 
                                                      OpStore %827 %826 
                                Private f32* %828 = OpAccessChain %254 %142 
                                         f32 %829 = OpLoad %828 
                                         f32 %830 = OpLoad %660 
                                         f32 %831 = OpFMul %829 %830 
                                Private f32* %832 = OpAccessChain %9 %27 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpFAdd %831 %833 
                                Private f32* %835 = OpAccessChain %9 %27 
                                                      OpStore %835 %834 
                                       f32_4 %837 = OpLoad %485 
                                       f32_2 %838 = OpVectorShuffle %837 %837 0 1 
                                         f32 %839 = OpLoad %54 
                                         f32 %840 = OpCompositeExtract %838 0 
                                         f32 %841 = OpCompositeExtract %838 1 
                                       f32_3 %842 = OpCompositeConstruct %840 %841 %839 
                                                      OpStore %836 %842 
                         read_only Texture2D %843 = OpLoad %643 
                                     sampler %844 = OpLoad %645 
                  read_only Texture2DSampled %845 = OpSampledImage %843 %844 
                                       f32_3 %846 = OpLoad %836 
                                         f32 %847 = OpCompositeExtract %846 2 
                                         f32 %848 = OpImageSampleDrefExplicitLod %845 %846 %847 Lod %6 
                                                      OpStore %791 %848 
                                       f32_4 %850 = OpLoad %485 
                                       f32_2 %851 = OpVectorShuffle %850 %850 2 3 
                                         f32 %852 = OpLoad %54 
                                         f32 %853 = OpCompositeExtract %851 0 
                                         f32 %854 = OpCompositeExtract %851 1 
                                       f32_3 %855 = OpCompositeConstruct %853 %854 %852 
                                                      OpStore %849 %855 
                         read_only Texture2D %857 = OpLoad %643 
                                     sampler %858 = OpLoad %645 
                  read_only Texture2DSampled %859 = OpSampledImage %857 %858 
                                       f32_3 %860 = OpLoad %849 
                                         f32 %861 = OpCompositeExtract %860 2 
                                         f32 %862 = OpImageSampleDrefExplicitLod %859 %860 %861 Lod %6 
                                                      OpStore %856 %862 
                                Private f32* %863 = OpAccessChain %254 %61 
                                         f32 %864 = OpLoad %863 
                                         f32 %865 = OpLoad %791 
                                         f32 %866 = OpFMul %864 %865 
                                Private f32* %867 = OpAccessChain %9 %27 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpFAdd %866 %868 
                                Private f32* %870 = OpAccessChain %9 %27 
                                                      OpStore %870 %869 
                                         f32 %871 = OpLoad %31 
                                         f32 %872 = OpLoad %856 
                                         f32 %873 = OpFMul %871 %872 
                                Private f32* %874 = OpAccessChain %9 %27 
                                         f32 %875 = OpLoad %874 
                                         f32 %876 = OpFAdd %873 %875 
                                Private f32* %877 = OpAccessChain %9 %27 
                                                      OpStore %877 %876 
                                Uniform f32* %878 = OpAccessChain %38 %223 %27 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFNegate %879 
                                         f32 %881 = OpFAdd %880 %51 
                                                      OpStore %31 %881 
                                       f32_4 %882 = OpLoad %9 
                                       f32_4 %883 = OpVectorShuffle %882 %882 0 0 0 0 
                                         f32 %884 = OpLoad %31 
                                       f32_4 %885 = OpCompositeConstruct %884 %884 %884 %884 
                                       f32_4 %886 = OpFMul %883 %885 
                              Uniform f32_4* %887 = OpAccessChain %38 %223 
                                       f32_4 %888 = OpLoad %887 
                                       f32_4 %889 = OpVectorShuffle %888 %888 0 0 0 0 
                                       f32_4 %890 = OpFAdd %886 %889 
                                                      OpStore %9 %890 
                                       f32_4 %893 = OpLoad %9 
                                                      OpStore %892 %893 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 895
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %892 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 RelaxedPrecision 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %643 DescriptorSet 643 
                                                      OpDecorate %643 Binding 643 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %645 DescriptorSet 645 
                                                      OpDecorate %645 Binding 645 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %660 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %792 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %843 RelaxedPrecision 
                                                      OpDecorate %844 RelaxedPrecision 
                                                      OpDecorate %856 RelaxedPrecision 
                                                      OpDecorate %857 RelaxedPrecision 
                                                      OpDecorate %858 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %892 RelaxedPrecision 
                                                      OpDecorate %892 Location 892 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %7 %7 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                             %122 = OpTypeBool 
                                             %123 = OpTypeVector %122 4 
                                             %124 = OpTypePointer Private %123 
                             Private bool_4* %125 = OpVariable Private 
                                         i32 %128 = OpConstant 3 
                                             %132 = OpTypePointer Private %122 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                             Private bool_4* %151 = OpVariable Private 
                                         i32 %154 = OpConstant 4 
                              Private f32_4* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %181 = OpConstant 2 
                                         i32 %205 = OpConstant 5 
                                         i32 %223 = OpConstant 6 
                                         i32 %235 = OpConstant 7 
                              Private f32_4* %254 = OpVariable Private 
                                         i32 %308 = OpConstant 9 
                                         i32 %315 = OpConstant 8 
                                         i32 %327 = OpConstant 10 
                                         i32 %339 = OpConstant 11 
                                         i32 %363 = OpConstant 13 
                                         i32 %370 = OpConstant 12 
                                         i32 %382 = OpConstant 14 
                                         i32 %394 = OpConstant 15 
                                Private f32* %416 = OpVariable Private 
                                       f32_4 %418 = OpConstantComposite %51 %51 %51 %51 
                                         f32 %433 = OpConstant 3.674022E-40 
                                       f32_2 %434 = OpConstantComposite %433 %433 
                                             %455 = OpTypePointer Private %22 
                              Private f32_2* %456 = OpVariable Private 
                                       f32_2 %459 = OpConstantComposite %135 %135 
                                       f32_4 %463 = OpConstantComposite %433 %51 %433 %51 
                                       f32_2 %473 = OpConstantComposite %51 %51 
                                         f32 %476 = OpConstant 3.674022E-40 
                                       f32_2 %477 = OpConstantComposite %476 %476 
                              Private f32_4* %485 = OpVariable Private 
                              Private f32_4* %490 = OpVariable Private 
                              Private f32_4* %510 = OpVariable Private 
                                         f32 %530 = OpConstant 3.674022E-40 
                                       f32_2 %531 = OpConstantComposite %530 %530 
                                             %563 = OpTypePointer Private %74 
                              Private f32_3* %564 = OpVariable Private 
                                         f32 %574 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %576 = OpConstant 3.674022E-40 
                                       f32_3 %577 = OpConstantComposite %574 %575 %576 
                                             %635 = OpTypePointer Function %74 
                                Private f32* %642 = OpVariable Private 
        UniformConstant read_only Texture2D* %643 = OpVariable UniformConstant 
                    UniformConstant sampler* %645 = OpVariable UniformConstant 
                                             %647 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %648 = OpTypeSampledImage %647 
                                Private f32* %660 = OpVariable Private 
                                Private f32* %674 = OpVariable Private 
                                Private f32* %791 = OpVariable Private 
                                Private f32* %805 = OpVariable Private 
                                Private f32* %856 = OpVariable Private 
                                             %891 = OpTypePointer Output %7 
                               Output f32_4* %892 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %636 = OpVariable Function 
                             Function f32_3* %653 = OpVariable Function 
                             Function f32_3* %667 = OpVariable Function 
                             Function f32_3* %723 = OpVariable Function 
                             Function f32_3* %736 = OpVariable Function 
                             Function f32_3* %784 = OpVariable Function 
                             Function f32_3* %798 = OpVariable Function 
                             Function f32_3* %836 = OpVariable Function 
                             Function f32_3* %849 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 2 2 2 2 
                              Uniform f32_4* %129 = OpAccessChain %38 %128 
                                       f32_4 %130 = OpLoad %129 
                                      bool_4 %131 = OpFOrdGreaterThanEqual %127 %130 
                                                      OpStore %125 %131 
                               Private bool* %133 = OpAccessChain %125 %27 
                                        bool %134 = OpLoad %133 
                                         f32 %136 = OpSelect %134 %51 %135 
                                Private f32* %137 = OpAccessChain %73 %27 
                                                      OpStore %137 %136 
                               Private bool* %138 = OpAccessChain %125 %47 
                                        bool %139 = OpLoad %138 
                                         f32 %140 = OpSelect %139 %51 %135 
                                Private f32* %141 = OpAccessChain %73 %47 
                                                      OpStore %141 %140 
                               Private bool* %143 = OpAccessChain %125 %142 
                                        bool %144 = OpLoad %143 
                                         f32 %145 = OpSelect %144 %51 %135 
                                Private f32* %146 = OpAccessChain %73 %142 
                                                      OpStore %146 %145 
                               Private bool* %147 = OpAccessChain %125 %61 
                                        bool %148 = OpLoad %147 
                                         f32 %149 = OpSelect %148 %51 %135 
                                Private f32* %150 = OpAccessChain %73 %61 
                                                      OpStore %150 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %152 2 2 2 2 
                              Uniform f32_4* %155 = OpAccessChain %38 %154 
                                       f32_4 %156 = OpLoad %155 
                                      bool_4 %157 = OpFOrdLessThan %153 %156 
                                                      OpStore %151 %157 
                               Private bool* %159 = OpAccessChain %151 %27 
                                        bool %160 = OpLoad %159 
                                         f32 %161 = OpSelect %160 %51 %135 
                                Private f32* %162 = OpAccessChain %158 %27 
                                                      OpStore %162 %161 
                               Private bool* %163 = OpAccessChain %151 %47 
                                        bool %164 = OpLoad %163 
                                         f32 %165 = OpSelect %164 %51 %135 
                                Private f32* %166 = OpAccessChain %158 %47 
                                                      OpStore %166 %165 
                               Private bool* %167 = OpAccessChain %151 %142 
                                        bool %168 = OpLoad %167 
                                         f32 %169 = OpSelect %168 %51 %135 
                                Private f32* %170 = OpAccessChain %158 %142 
                                                      OpStore %170 %169 
                               Private bool* %171 = OpAccessChain %151 %61 
                                        bool %172 = OpLoad %171 
                                         f32 %173 = OpSelect %172 %51 %135 
                                Private f32* %174 = OpAccessChain %158 %61 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %73 
                                       f32_4 %177 = OpLoad %158 
                                       f32_4 %178 = OpFMul %176 %177 
                                                      OpStore %175 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %38 %181 %60 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %180 %183 
                                                      OpStore %158 %184 
                              Uniform f32_4* %185 = OpAccessChain %38 %181 %40 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %158 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %158 %191 
                              Uniform f32_4* %192 = OpAccessChain %38 %181 %181 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %158 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                              Uniform f32_4* %200 = OpAccessChain %38 %181 %128 
                                       f32_4 %201 = OpLoad %200 
                                       f32_4 %202 = OpFAdd %199 %201 
                                                      OpStore %9 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 1 1 
                              Uniform f32_4* %206 = OpAccessChain %38 %205 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFMul %204 %208 
                                       f32_4 %210 = OpLoad %158 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %158 %211 
                              Uniform f32_4* %212 = OpAccessChain %38 %205 %154 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %9 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %158 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFAdd %217 %219 
                                       f32_4 %221 = OpLoad %158 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %158 %222 
                              Uniform f32_4* %224 = OpAccessChain %38 %205 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 2 2 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %158 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFAdd %229 %231 
                                       f32_4 %233 = OpLoad %158 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %158 %234 
                              Uniform f32_4* %236 = OpAccessChain %38 %205 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_4 %239 = OpLoad %9 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %158 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %241 %243 
                                       f32_4 %245 = OpLoad %158 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %158 %246 
                                       f32_4 %247 = OpLoad %175 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                                       f32_4 %249 = OpLoad %158 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %158 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %158 %253 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 1 1 1 
                              Uniform f32_4* %257 = OpAccessChain %38 %205 %60 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFMul %256 %259 
                                       f32_4 %261 = OpLoad %254 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %254 %262 
                              Uniform f32_4* %263 = OpAccessChain %38 %205 %40 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %254 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %254 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %254 %273 
                              Uniform f32_4* %274 = OpAccessChain %38 %205 %181 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 2 2 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %254 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFAdd %279 %281 
                                       f32_4 %283 = OpLoad %254 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %254 %284 
                              Uniform f32_4* %285 = OpAccessChain %38 %205 %128 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %254 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %254 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %254 %295 
                                       f32_4 %296 = OpLoad %254 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %175 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
                                       f32_3 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %158 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %158 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %158 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 1 1 1 
                              Uniform f32_4* %309 = OpAccessChain %38 %205 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %307 %311 
                                       f32_4 %313 = OpLoad %254 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %254 %314 
                              Uniform f32_4* %316 = OpAccessChain %38 %205 %315 
                                       f32_4 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_4 %319 = OpLoad %9 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 0 0 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %254 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %254 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %254 %326 
                              Uniform f32_4* %328 = OpAccessChain %38 %205 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 2 2 2 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %254 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %254 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %254 %338 
                              Uniform f32_4* %340 = OpAccessChain %38 %205 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 3 3 3 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %254 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFAdd %345 %347 
                                       f32_4 %349 = OpLoad %254 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %254 %350 
                                       f32_4 %351 = OpLoad %254 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_4 %353 = OpLoad %175 
                                       f32_3 %354 = OpVectorShuffle %353 %353 2 2 2 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_4 %356 = OpLoad %158 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %358 = OpFAdd %355 %357 
                                       f32_4 %359 = OpLoad %158 
                                       f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
                                                      OpStore %158 %360 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 1 1 1 
                              Uniform f32_4* %364 = OpAccessChain %38 %205 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFMul %362 %366 
                                       f32_4 %368 = OpLoad %254 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %254 %369 
                              Uniform f32_4* %371 = OpAccessChain %38 %205 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %254 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpFAdd %376 %378 
                                       f32_4 %380 = OpLoad %254 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 6 3 
                                                      OpStore %254 %381 
                              Uniform f32_4* %383 = OpAccessChain %38 %205 %382 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 2 2 2 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %254 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %9 %393 
                              Uniform f32_4* %395 = OpAccessChain %38 %205 %394 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 3 3 3 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %9 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_4 %408 = OpLoad %175 
                                       f32_3 %409 = OpVectorShuffle %408 %408 3 3 3 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_4 %411 = OpLoad %158 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFAdd %410 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                                       f32_4 %417 = OpLoad %175 
                                         f32 %419 = OpDot %417 %418 
                                                      OpStore %416 %419 
                                         f32 %420 = OpLoad %416 
                                         f32 %421 = OpFNegate %420 
                                Private f32* %422 = OpAccessChain %9 %142 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFAdd %421 %423 
                                                      OpStore %54 %424 
                                         f32 %425 = OpLoad %54 
                                         f32 %426 = OpFAdd %425 %51 
                                                      OpStore %54 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                              Uniform f32_4* %429 = OpAccessChain %38 %235 
                                       f32_4 %430 = OpLoad %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 2 3 
                                       f32_2 %432 = OpFMul %428 %431 
                                       f32_2 %435 = OpFAdd %432 %434 
                                       f32_4 %436 = OpLoad %158 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 2 3 
                                                      OpStore %158 %437 
                                       f32_4 %438 = OpLoad %158 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_2 %440 = OpExtInst %1 8 %439 
                                       f32_4 %441 = OpLoad %158 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
                                                      OpStore %158 %442 
                                       f32_4 %443 = OpLoad %9 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                              Uniform f32_4* %445 = OpAccessChain %38 %235 
                                       f32_4 %446 = OpLoad %445 
                                       f32_2 %447 = OpVectorShuffle %446 %446 2 3 
                                       f32_2 %448 = OpFMul %444 %447 
                                       f32_4 %449 = OpLoad %158 
                                       f32_2 %450 = OpVectorShuffle %449 %449 0 1 
                                       f32_2 %451 = OpFNegate %450 
                                       f32_2 %452 = OpFAdd %448 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 2 3 
                                                      OpStore %9 %454 
                                       f32_4 %457 = OpLoad %9 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 1 
                                       f32_2 %460 = OpExtInst %1 40 %458 %459 
                                                      OpStore %456 %460 
                                       f32_4 %461 = OpLoad %9 
                                       f32_4 %462 = OpVectorShuffle %461 %461 0 0 1 1 
                                       f32_4 %464 = OpFAdd %462 %463 
                                                      OpStore %73 %464 
                                       f32_2 %465 = OpLoad %456 
                                       f32_2 %466 = OpFNegate %465 
                                       f32_2 %467 = OpLoad %456 
                                       f32_2 %468 = OpFMul %466 %467 
                                       f32_4 %469 = OpLoad %73 
                                       f32_2 %470 = OpVectorShuffle %469 %469 1 3 
                                       f32_2 %471 = OpFAdd %468 %470 
                                                      OpStore %456 %471 
                                       f32_2 %472 = OpLoad %456 
                                       f32_2 %474 = OpFAdd %472 %473 
                                                      OpStore %456 %474 
                                       f32_2 %475 = OpLoad %456 
                                       f32_2 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %254 
                                       f32_4 %480 = OpVectorShuffle %479 %478 4 5 2 3 
                                                      OpStore %254 %480 
                                       f32_4 %481 = OpLoad %9 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 1 
                                       f32_2 %483 = OpFNegate %482 
                                       f32_2 %484 = OpFAdd %483 %473 
                                                      OpStore %456 %484 
                                       f32_2 %486 = OpLoad %456 
                                       f32_2 %487 = OpFMul %486 %477 
                                       f32_4 %488 = OpLoad %485 
                                       f32_4 %489 = OpVectorShuffle %488 %487 4 5 2 3 
                                                      OpStore %485 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 1 
                                       f32_2 %493 = OpExtInst %1 37 %492 %459 
                                       f32_4 %494 = OpLoad %490 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 2 3 
                                                      OpStore %490 %495 
                                       f32_4 %496 = OpLoad %490 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                       f32_2 %498 = OpFNegate %497 
                                       f32_4 %499 = OpLoad %490 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_2 %501 = OpFMul %498 %500 
                                       f32_2 %502 = OpLoad %456 
                                       f32_2 %503 = OpFAdd %501 %502 
                                                      OpStore %456 %503 
                                       f32_2 %504 = OpLoad %456 
                                       f32_2 %505 = OpFAdd %504 %473 
                                                      OpStore %456 %505 
                                       f32_2 %506 = OpLoad %456 
                                       f32_2 %507 = OpFMul %506 %477 
                                       f32_4 %508 = OpLoad %490 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 2 3 
                                                      OpStore %490 %509 
                                       f32_4 %511 = OpLoad %73 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 0 2 2 
                                       f32_4 %513 = OpLoad %73 
                                       f32_4 %514 = OpVectorShuffle %513 %513 0 0 2 2 
                                       f32_4 %515 = OpFMul %512 %514 
                                                      OpStore %510 %515 
                                       f32_4 %516 = OpLoad %73 
                                       f32_2 %517 = OpVectorShuffle %516 %516 1 3 
                                       f32_2 %518 = OpFMul %517 %477 
                                                      OpStore %456 %518 
                                       f32_4 %519 = OpLoad %510 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 2 
                                       f32_2 %521 = OpFMul %520 %434 
                                       f32_4 %522 = OpLoad %9 
                                       f32_2 %523 = OpVectorShuffle %522 %522 0 1 
                                       f32_2 %524 = OpFNegate %523 
                                       f32_2 %525 = OpFAdd %521 %524 
                                       f32_4 %526 = OpLoad %9 
                                       f32_4 %527 = OpVectorShuffle %526 %525 4 5 2 3 
                                                      OpStore %9 %527 
                                       f32_4 %528 = OpLoad %510 
                                       f32_2 %529 = OpVectorShuffle %528 %528 3 1 
                                       f32_2 %532 = OpFMul %529 %531 
                                       f32_4 %533 = OpLoad %485 
                                       f32_4 %534 = OpVectorShuffle %533 %532 0 1 4 5 
                                                      OpStore %485 %534 
                                       f32_4 %535 = OpLoad %9 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 1 
                                       f32_2 %537 = OpFMul %536 %477 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %537 4 5 2 3 
                                                      OpStore %73 %539 
                                Private f32* %540 = OpAccessChain %73 %47 
                                         f32 %541 = OpLoad %540 
                                Private f32* %542 = OpAccessChain %490 %142 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %456 %47 
                                         f32 %544 = OpLoad %543 
                                Private f32* %545 = OpAccessChain %490 %61 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %456 %27 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %73 %61 
                                                      OpStore %548 %547 
                                       f32_4 %549 = OpLoad %485 
                                       f32_2 %550 = OpVectorShuffle %549 %549 1 2 
                                       f32_4 %551 = OpLoad %254 
                                       f32_4 %552 = OpVectorShuffle %551 %550 0 1 4 5 
                                                      OpStore %254 %552 
                                       f32_4 %553 = OpLoad %254 
                                       f32_3 %554 = OpVectorShuffle %553 %553 2 1 3 
                                       f32_4 %555 = OpLoad %490 
                                       f32_3 %556 = OpVectorShuffle %555 %555 2 1 3 
                                       f32_3 %557 = OpFAdd %554 %556 
                                       f32_4 %558 = OpLoad %9 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 2 6 
                                                      OpStore %9 %559 
                                Private f32* %560 = OpAccessChain %490 %27 
                                         f32 %561 = OpLoad %560 
                                Private f32* %562 = OpAccessChain %73 %142 
                                                      OpStore %562 %561 
                                       f32_4 %565 = OpLoad %254 
                                       f32_3 %566 = OpVectorShuffle %565 %565 2 1 3 
                                       f32_4 %567 = OpLoad %9 
                                       f32_3 %568 = OpVectorShuffle %567 %567 0 1 3 
                                       f32_3 %569 = OpFDiv %566 %568 
                                                      OpStore %564 %569 
                                Private f32* %570 = OpAccessChain %254 %27 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %485 %142 
                                                      OpStore %572 %571 
                                       f32_3 %573 = OpLoad %564 
                                       f32_3 %578 = OpFAdd %573 %577 
                                       f32_4 %579 = OpLoad %254 
                                       f32_4 %580 = OpVectorShuffle %579 %578 4 5 6 3 
                                                      OpStore %254 %580 
                                       f32_4 %581 = OpLoad %254 
                                       f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                              Uniform f32_4* %583 = OpAccessChain %38 %235 
                                       f32_4 %584 = OpLoad %583 
                                       f32_3 %585 = OpVectorShuffle %584 %584 1 1 1 
                                       f32_3 %586 = OpFMul %582 %585 
                                       f32_4 %587 = OpLoad %254 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                                      OpStore %254 %588 
                                Private f32* %589 = OpAccessChain %254 %27 
                                         f32 %590 = OpLoad %589 
                                Private f32* %591 = OpAccessChain %490 %61 
                                                      OpStore %591 %590 
                                       f32_4 %592 = OpLoad %73 
                                       f32_4 %593 = OpVectorShuffle %592 %592 2 3 0 2 
                                       f32_4 %594 = OpLoad %485 
                                       f32_4 %595 = OpVectorShuffle %594 %594 2 3 0 2 
                                       f32_4 %596 = OpFAdd %593 %595 
                                                      OpStore %73 %596 
                                       f32_4 %597 = OpLoad %485 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 2 3 
                                       f32_4 %599 = OpLoad %73 
                                       f32_3 %600 = OpVectorShuffle %599 %599 2 3 1 
                                       f32_3 %601 = OpFDiv %598 %600 
                                       f32_4 %602 = OpLoad %485 
                                       f32_4 %603 = OpVectorShuffle %602 %601 4 5 6 3 
                                                      OpStore %485 %603 
                                       f32_4 %604 = OpLoad %485 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_3 %606 = OpFAdd %605 %577 
                                       f32_4 %607 = OpLoad %485 
                                       f32_4 %608 = OpVectorShuffle %607 %606 4 5 6 3 
                                                      OpStore %485 %608 
                                       f32_4 %609 = OpLoad %485 
                                       f32_3 %610 = OpVectorShuffle %609 %609 1 0 2 
                              Uniform f32_4* %611 = OpAccessChain %38 %235 
                                       f32_4 %612 = OpLoad %611 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 0 0 
                                       f32_3 %614 = OpFMul %610 %613 
                                       f32_4 %615 = OpLoad %490 
                                       f32_4 %616 = OpVectorShuffle %615 %614 4 5 6 3 
                                                      OpStore %490 %616 
                                       f32_4 %617 = OpLoad %158 
                                       f32_4 %618 = OpVectorShuffle %617 %617 0 1 0 1 
                              Uniform f32_4* %619 = OpAccessChain %38 %235 
                                       f32_4 %620 = OpLoad %619 
                                       f32_4 %621 = OpVectorShuffle %620 %620 0 1 0 1 
                                       f32_4 %622 = OpFMul %618 %621 
                                       f32_4 %623 = OpLoad %490 
                                       f32_4 %624 = OpVectorShuffle %623 %623 1 3 0 3 
                                       f32_4 %625 = OpFAdd %622 %624 
                                                      OpStore %485 %625 
                                       f32_4 %626 = OpLoad %158 
                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
                              Uniform f32_4* %628 = OpAccessChain %38 %235 
                                       f32_4 %629 = OpLoad %628 
                                       f32_2 %630 = OpVectorShuffle %629 %629 0 1 
                                       f32_2 %631 = OpFMul %627 %630 
                                       f32_4 %632 = OpLoad %490 
                                       f32_2 %633 = OpVectorShuffle %632 %632 2 3 
                                       f32_2 %634 = OpFAdd %631 %633 
                                                      OpStore %456 %634 
                                       f32_2 %637 = OpLoad %456 
                                         f32 %638 = OpLoad %54 
                                         f32 %639 = OpCompositeExtract %637 0 
                                         f32 %640 = OpCompositeExtract %637 1 
                                       f32_3 %641 = OpCompositeConstruct %639 %640 %638 
                                                      OpStore %636 %641 
                         read_only Texture2D %644 = OpLoad %643 
                                     sampler %646 = OpLoad %645 
                  read_only Texture2DSampled %649 = OpSampledImage %644 %646 
                                       f32_3 %650 = OpLoad %636 
                                         f32 %651 = OpCompositeExtract %650 2 
                                         f32 %652 = OpImageSampleDrefExplicitLod %649 %650 %651 Lod %6 
                                                      OpStore %642 %652 
                                       f32_4 %654 = OpLoad %485 
                                       f32_2 %655 = OpVectorShuffle %654 %654 0 1 
                                         f32 %656 = OpLoad %54 
                                         f32 %657 = OpCompositeExtract %655 0 
                                         f32 %658 = OpCompositeExtract %655 1 
                                       f32_3 %659 = OpCompositeConstruct %657 %658 %656 
                                                      OpStore %653 %659 
                         read_only Texture2D %661 = OpLoad %643 
                                     sampler %662 = OpLoad %645 
                  read_only Texture2DSampled %663 = OpSampledImage %661 %662 
                                       f32_3 %664 = OpLoad %653 
                                         f32 %665 = OpCompositeExtract %664 2 
                                         f32 %666 = OpImageSampleDrefExplicitLod %663 %664 %665 Lod %6 
                                                      OpStore %660 %666 
                                       f32_4 %668 = OpLoad %485 
                                       f32_2 %669 = OpVectorShuffle %668 %668 2 3 
                                         f32 %670 = OpLoad %54 
                                         f32 %671 = OpCompositeExtract %669 0 
                                         f32 %672 = OpCompositeExtract %669 1 
                                       f32_3 %673 = OpCompositeConstruct %671 %672 %670 
                                                      OpStore %667 %673 
                         read_only Texture2D %675 = OpLoad %643 
                                     sampler %676 = OpLoad %645 
                  read_only Texture2DSampled %677 = OpSampledImage %675 %676 
                                       f32_3 %678 = OpLoad %667 
                                         f32 %679 = OpCompositeExtract %678 2 
                                         f32 %680 = OpImageSampleDrefExplicitLod %677 %678 %679 Lod %6 
                                                      OpStore %674 %680 
                                       f32_4 %681 = OpLoad %9 
                                       f32_4 %682 = OpVectorShuffle %681 %681 0 0 0 1 
                                       f32_4 %683 = OpLoad %73 
                                       f32_4 %684 = OpVectorShuffle %683 %683 2 3 1 2 
                                       f32_4 %685 = OpFMul %682 %684 
                                                      OpStore %485 %685 
                                         f32 %686 = OpLoad %674 
                                Private f32* %687 = OpAccessChain %485 %47 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpFMul %686 %688 
                                Private f32* %690 = OpAccessChain %9 %27 
                                                      OpStore %690 %689 
                                Private f32* %691 = OpAccessChain %485 %27 
                                         f32 %692 = OpLoad %691 
                                         f32 %693 = OpLoad %660 
                                         f32 %694 = OpFMul %692 %693 
                                Private f32* %695 = OpAccessChain %9 %27 
                                         f32 %696 = OpLoad %695 
                                         f32 %697 = OpFAdd %694 %696 
                                Private f32* %698 = OpAccessChain %9 %27 
                                                      OpStore %698 %697 
                                Private f32* %699 = OpAccessChain %485 %142 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpLoad %642 
                                         f32 %702 = OpFMul %700 %701 
                                Private f32* %703 = OpAccessChain %9 %27 
                                         f32 %704 = OpLoad %703 
                                         f32 %705 = OpFAdd %702 %704 
                                Private f32* %706 = OpAccessChain %9 %27 
                                                      OpStore %706 %705 
                                Private f32* %707 = OpAccessChain %490 %47 
                                         f32 %708 = OpLoad %707 
                                Private f32* %709 = OpAccessChain %254 %61 
                                                      OpStore %709 %708 
                                       f32_4 %710 = OpLoad %158 
                                       f32_4 %711 = OpVectorShuffle %710 %710 0 1 0 1 
                              Uniform f32_4* %712 = OpAccessChain %38 %235 
                                       f32_4 %713 = OpLoad %712 
                                       f32_4 %714 = OpVectorShuffle %713 %713 0 1 0 1 
                                       f32_4 %715 = OpFMul %711 %714 
                                       f32_4 %716 = OpLoad %254 
                                       f32_4 %717 = OpVectorShuffle %716 %716 3 1 3 2 
                                       f32_4 %718 = OpFAdd %715 %717 
                                                      OpStore %510 %718 
                                       f32_4 %719 = OpLoad %254 
                                       f32_2 %720 = OpVectorShuffle %719 %719 1 2 
                                       f32_4 %721 = OpLoad %490 
                                       f32_4 %722 = OpVectorShuffle %721 %720 0 4 2 5 
                                                      OpStore %490 %722 
                                       f32_4 %724 = OpLoad %510 
                                       f32_2 %725 = OpVectorShuffle %724 %724 0 1 
                                         f32 %726 = OpLoad %54 
                                         f32 %727 = OpCompositeExtract %725 0 
                                         f32 %728 = OpCompositeExtract %725 1 
                                       f32_3 %729 = OpCompositeConstruct %727 %728 %726 
                                                      OpStore %723 %729 
                         read_only Texture2D %730 = OpLoad %643 
                                     sampler %731 = OpLoad %645 
                  read_only Texture2DSampled %732 = OpSampledImage %730 %731 
                                       f32_3 %733 = OpLoad %723 
                                         f32 %734 = OpCompositeExtract %733 2 
                                         f32 %735 = OpImageSampleDrefExplicitLod %732 %733 %734 Lod %6 
                                                      OpStore %642 %735 
                                       f32_4 %737 = OpLoad %510 
                                       f32_2 %738 = OpVectorShuffle %737 %737 2 3 
                                         f32 %739 = OpLoad %54 
                                         f32 %740 = OpCompositeExtract %738 0 
                                         f32 %741 = OpCompositeExtract %738 1 
                                       f32_3 %742 = OpCompositeConstruct %740 %741 %739 
                                                      OpStore %736 %742 
                         read_only Texture2D %743 = OpLoad %643 
                                     sampler %744 = OpLoad %645 
                  read_only Texture2DSampled %745 = OpSampledImage %743 %744 
                                       f32_3 %746 = OpLoad %736 
                                         f32 %747 = OpCompositeExtract %746 2 
                                         f32 %748 = OpImageSampleDrefExplicitLod %745 %746 %747 Lod %6 
                                                      OpStore %660 %748 
                                Private f32* %749 = OpAccessChain %485 %61 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpLoad %642 
                                         f32 %752 = OpFMul %750 %751 
                                Private f32* %753 = OpAccessChain %9 %27 
                                         f32 %754 = OpLoad %753 
                                         f32 %755 = OpFAdd %752 %754 
                                Private f32* %756 = OpAccessChain %9 %27 
                                                      OpStore %756 %755 
                                       f32_4 %757 = OpLoad %9 
                                       f32_4 %758 = OpVectorShuffle %757 %757 1 1 3 3 
                                       f32_4 %759 = OpLoad %73 
                                       f32_4 %760 = OpFMul %758 %759 
                                                      OpStore %254 %760 
                                Private f32* %761 = OpAccessChain %9 %61 
                                         f32 %762 = OpLoad %761 
                                Private f32* %763 = OpAccessChain %73 %47 
                                         f32 %764 = OpLoad %763 
                                         f32 %765 = OpFMul %762 %764 
                                                      OpStore %31 %765 
                                       f32_4 %766 = OpLoad %158 
                                       f32_4 %767 = OpVectorShuffle %766 %766 0 1 0 1 
                              Uniform f32_4* %768 = OpAccessChain %38 %235 
                                       f32_4 %769 = OpLoad %768 
                                       f32_4 %770 = OpVectorShuffle %769 %769 0 1 0 1 
                                       f32_4 %771 = OpFMul %767 %770 
                                       f32_4 %772 = OpLoad %490 
                                       f32_4 %773 = OpVectorShuffle %772 %772 0 1 2 1 
                                       f32_4 %774 = OpFAdd %771 %773 
                                                      OpStore %73 %774 
                                       f32_4 %775 = OpLoad %158 
                                       f32_4 %776 = OpVectorShuffle %775 %775 0 1 0 1 
                              Uniform f32_4* %777 = OpAccessChain %38 %235 
                                       f32_4 %778 = OpLoad %777 
                                       f32_4 %779 = OpVectorShuffle %778 %778 0 1 0 1 
                                       f32_4 %780 = OpFMul %776 %779 
                                       f32_4 %781 = OpLoad %490 
                                       f32_4 %782 = OpVectorShuffle %781 %781 0 3 2 3 
                                       f32_4 %783 = OpFAdd %780 %782 
                                                      OpStore %485 %783 
                                       f32_4 %785 = OpLoad %73 
                                       f32_2 %786 = OpVectorShuffle %785 %785 0 1 
                                         f32 %787 = OpLoad %54 
                                         f32 %788 = OpCompositeExtract %786 0 
                                         f32 %789 = OpCompositeExtract %786 1 
                                       f32_3 %790 = OpCompositeConstruct %788 %789 %787 
                                                      OpStore %784 %790 
                         read_only Texture2D %792 = OpLoad %643 
                                     sampler %793 = OpLoad %645 
                  read_only Texture2DSampled %794 = OpSampledImage %792 %793 
                                       f32_3 %795 = OpLoad %784 
                                         f32 %796 = OpCompositeExtract %795 2 
                                         f32 %797 = OpImageSampleDrefExplicitLod %794 %795 %796 Lod %6 
                                                      OpStore %791 %797 
                                       f32_4 %799 = OpLoad %73 
                                       f32_2 %800 = OpVectorShuffle %799 %799 2 3 
                                         f32 %801 = OpLoad %54 
                                         f32 %802 = OpCompositeExtract %800 0 
                                         f32 %803 = OpCompositeExtract %800 1 
                                       f32_3 %804 = OpCompositeConstruct %802 %803 %801 
                                                      OpStore %798 %804 
                         read_only Texture2D %806 = OpLoad %643 
                                     sampler %807 = OpLoad %645 
                  read_only Texture2DSampled %808 = OpSampledImage %806 %807 
                                       f32_3 %809 = OpLoad %798 
                                         f32 %810 = OpCompositeExtract %809 2 
                                         f32 %811 = OpImageSampleDrefExplicitLod %808 %809 %810 Lod %6 
                                                      OpStore %805 %811 
                                Private f32* %812 = OpAccessChain %254 %27 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpLoad %791 
                                         f32 %815 = OpFMul %813 %814 
                                Private f32* %816 = OpAccessChain %9 %27 
                                         f32 %817 = OpLoad %816 
                                         f32 %818 = OpFAdd %815 %817 
                                Private f32* %819 = OpAccessChain %9 %27 
                                                      OpStore %819 %818 
                                Private f32* %820 = OpAccessChain %254 %47 
                                         f32 %821 = OpLoad %820 
                                         f32 %822 = OpLoad %805 
                                         f32 %823 = OpFMul %821 %822 
                                Private f32* %824 = OpAccessChain %9 %27 
                                         f32 %825 = OpLoad %824 
                                         f32 %826 = OpFAdd %823 %825 
                                Private f32* %827 = OpAccessChain %9 %27 
                                                      OpStore %827 %826 
                                Private f32* %828 = OpAccessChain %254 %142 
                                         f32 %829 = OpLoad %828 
                                         f32 %830 = OpLoad %660 
                                         f32 %831 = OpFMul %829 %830 
                                Private f32* %832 = OpAccessChain %9 %27 
                                         f32 %833 = OpLoad %832 
                                         f32 %834 = OpFAdd %831 %833 
                                Private f32* %835 = OpAccessChain %9 %27 
                                                      OpStore %835 %834 
                                       f32_4 %837 = OpLoad %485 
                                       f32_2 %838 = OpVectorShuffle %837 %837 0 1 
                                         f32 %839 = OpLoad %54 
                                         f32 %840 = OpCompositeExtract %838 0 
                                         f32 %841 = OpCompositeExtract %838 1 
                                       f32_3 %842 = OpCompositeConstruct %840 %841 %839 
                                                      OpStore %836 %842 
                         read_only Texture2D %843 = OpLoad %643 
                                     sampler %844 = OpLoad %645 
                  read_only Texture2DSampled %845 = OpSampledImage %843 %844 
                                       f32_3 %846 = OpLoad %836 
                                         f32 %847 = OpCompositeExtract %846 2 
                                         f32 %848 = OpImageSampleDrefExplicitLod %845 %846 %847 Lod %6 
                                                      OpStore %791 %848 
                                       f32_4 %850 = OpLoad %485 
                                       f32_2 %851 = OpVectorShuffle %850 %850 2 3 
                                         f32 %852 = OpLoad %54 
                                         f32 %853 = OpCompositeExtract %851 0 
                                         f32 %854 = OpCompositeExtract %851 1 
                                       f32_3 %855 = OpCompositeConstruct %853 %854 %852 
                                                      OpStore %849 %855 
                         read_only Texture2D %857 = OpLoad %643 
                                     sampler %858 = OpLoad %645 
                  read_only Texture2DSampled %859 = OpSampledImage %857 %858 
                                       f32_3 %860 = OpLoad %849 
                                         f32 %861 = OpCompositeExtract %860 2 
                                         f32 %862 = OpImageSampleDrefExplicitLod %859 %860 %861 Lod %6 
                                                      OpStore %856 %862 
                                Private f32* %863 = OpAccessChain %254 %61 
                                         f32 %864 = OpLoad %863 
                                         f32 %865 = OpLoad %791 
                                         f32 %866 = OpFMul %864 %865 
                                Private f32* %867 = OpAccessChain %9 %27 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpFAdd %866 %868 
                                Private f32* %870 = OpAccessChain %9 %27 
                                                      OpStore %870 %869 
                                         f32 %871 = OpLoad %31 
                                         f32 %872 = OpLoad %856 
                                         f32 %873 = OpFMul %871 %872 
                                Private f32* %874 = OpAccessChain %9 %27 
                                         f32 %875 = OpLoad %874 
                                         f32 %876 = OpFAdd %873 %875 
                                Private f32* %877 = OpAccessChain %9 %27 
                                                      OpStore %877 %876 
                                Uniform f32* %878 = OpAccessChain %38 %223 %27 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFNegate %879 
                                         f32 %881 = OpFAdd %880 %51 
                                                      OpStore %31 %881 
                                       f32_4 %882 = OpLoad %9 
                                       f32_4 %883 = OpVectorShuffle %882 %882 0 0 0 0 
                                         f32 %884 = OpLoad %31 
                                       f32_4 %885 = OpCompositeConstruct %884 %884 %884 %884 
                                       f32_4 %886 = OpFMul %883 %885 
                              Uniform f32_4* %887 = OpAccessChain %38 %223 
                                       f32_4 %888 = OpLoad %887 
                                       f32_4 %889 = OpVectorShuffle %888 %888 0 0 0 0 
                                       f32_4 %890 = OpFAdd %886 %889 
                                                      OpStore %9 %890 
                                       f32_4 %893 = OpLoad %9 
                                                      OpStore %892 %893 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat16_3.xxx * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat2.xxzz * u_xlat2.xxzz;
    u_xlat15.xy = u_xlat2.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat2.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat5.z = u_xlat2.y;
    u_xlat5.w = u_xlat15.y;
    u_xlat2.w = u_xlat15.x;
    u_xlat3.zw = u_xlat4.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat5.xyz = u_xlat3.zyw / u_xlat0.xyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xyz = u_xlat5.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat2 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat4.xyz = u_xlat4.xzw / u_xlat2.zwy;
    u_xlat4.xyz = u_xlat4.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat4.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat2.zwyz;
    u_xlat0.x = u_xlat16_4 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat3 = u_xlat0.yyww * u_xlat2;
    u_xlat7 = u_xlat0.w * u_xlat2.y;
    u_xlat0.x = u_xlat3.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat3.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat3.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat3.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat16_3.xxx * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat2.xxzz * u_xlat2.xxzz;
    u_xlat15.xy = u_xlat2.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat2.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat5.z = u_xlat2.y;
    u_xlat5.w = u_xlat15.y;
    u_xlat2.w = u_xlat15.x;
    u_xlat3.zw = u_xlat4.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat5.xyz = u_xlat3.zyw / u_xlat0.xyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xyz = u_xlat5.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat2 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat4.xyz = u_xlat4.xzw / u_xlat2.zwy;
    u_xlat4.xyz = u_xlat4.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat4.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat2.zwyz;
    u_xlat0.x = u_xlat16_4 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat3 = u_xlat0.yyww * u_xlat2;
    u_xlat7 = u_xlat0.w * u_xlat2.y;
    u_xlat0.x = u_xlat3.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat3.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat3.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat3.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat16_3.xxx * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat2.xxzz * u_xlat2.xxzz;
    u_xlat15.xy = u_xlat2.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat2.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat5.z = u_xlat2.y;
    u_xlat5.w = u_xlat15.y;
    u_xlat2.w = u_xlat15.x;
    u_xlat3.zw = u_xlat4.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat5.xyz = u_xlat3.zyw / u_xlat0.xyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xyz = u_xlat5.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat2 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat4.xyz = u_xlat4.xzw / u_xlat2.zwy;
    u_xlat4.xyz = u_xlat4.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat4.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat2.zwyz;
    u_xlat0.x = u_xlat16_4 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat3 = u_xlat0.yyww * u_xlat2;
    u_xlat7 = u_xlat0.w * u_xlat2.y;
    u_xlat0.x = u_xlat3.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat3.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat3.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat3.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 964
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %77 %80 %94 %961 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 RelaxedPrecision 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate vs_TEXCOORD3 Location 80 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %711 DescriptorSet 711 
                                                      OpDecorate %711 Binding 711 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %713 DescriptorSet 713 
                                                      OpDecorate %713 Binding 713 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %850 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %852 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %866 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %911 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %913 RelaxedPrecision 
                                                      OpDecorate %925 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %927 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %941 RelaxedPrecision 
                                                      OpDecorate %948 RelaxedPrecision 
                                                      OpDecorate %949 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %957 RelaxedPrecision 
                                                      OpDecorate %958 RelaxedPrecision 
                                                      OpDecorate %961 RelaxedPrecision 
                                                      OpDecorate %961 Location 961 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeArray %7 %32 
                                          u32 %35 = OpConstant 16 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeStruct %7 %7 %33 %34 %7 %36 %7 %7 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          u32 %48 = OpConstant 1 
                                          f32 %52 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %74 = OpVariable Private 
                                              %75 = OpTypeVector %6 3 
                                              %76 = OpTypePointer Input %75 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %111 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 2 
                                         i32 %144 = OpConstant 3 
                              Private f32_4* %163 = OpVariable Private 
                                         u32 %193 = OpConstant 2 
                                             %210 = OpTypeBool 
                                             %211 = OpTypeVector %210 4 
                                             %212 = OpTypePointer Private %211 
                             Private bool_4* %213 = OpVariable Private 
                                         i32 %215 = OpConstant 4 
                                             %219 = OpTypePointer Private %75 
                              Private f32_3* %220 = OpVariable Private 
                                             %221 = OpTypePointer Private %210 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         f32 %225 = OpConstant 3.674022E-40 
                                         f32 %238 = OpConstant 3.674022E-40 
                              Private f32_3* %257 = OpVariable Private 
                                       f32_3 %259 = OpConstantComposite %238 %238 %238 
                                         i32 %263 = OpConstant 5 
                                         i32 %281 = OpConstant 6 
                                         i32 %293 = OpConstant 7 
                              Private f32_4* %312 = OpVariable Private 
                                         i32 %366 = OpConstant 9 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 10 
                                         i32 %397 = OpConstant 11 
                                         i32 %421 = OpConstant 13 
                                         i32 %428 = OpConstant 12 
                                         i32 %440 = OpConstant 14 
                                         i32 %452 = OpConstant 15 
                                Private f32* %477 = OpVariable Private 
                                       f32_4 %479 = OpConstantComposite %52 %52 %52 %52 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_2 %495 = OpConstantComposite %494 %494 
                                             %516 = OpTypePointer Private %22 
                              Private f32_2* %517 = OpVariable Private 
                                       f32_2 %520 = OpConstantComposite %238 %238 
                                       f32_4 %524 = OpConstantComposite %494 %52 %494 %52 
                                       f32_2 %534 = OpConstantComposite %52 %52 
                              Private f32_4* %536 = OpVariable Private 
                                         f32 %538 = OpConstant 3.674022E-40 
                                       f32_2 %539 = OpConstantComposite %538 %538 
                              Private f32_4* %551 = OpVariable Private 
                                         f32 %564 = OpConstant 3.674022E-40 
                                       f32_2 %565 = OpConstantComposite %564 %564 
                              Private f32_2* %569 = OpVariable Private 
                              Private f32_4* %602 = OpVariable Private 
                                         f32 %642 = OpConstant 3.674022E-40 
                                         f32 %643 = OpConstant 3.674022E-40 
                                         f32 %644 = OpConstant 3.674022E-40 
                                       f32_3 %645 = OpConstantComposite %642 %643 %644 
                                             %703 = OpTypePointer Function %75 
                                Private f32* %710 = OpVariable Private 
        UniformConstant read_only Texture2D* %711 = OpVariable UniformConstant 
                    UniformConstant sampler* %713 = OpVariable UniformConstant 
                                             %715 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %716 = OpTypeSampledImage %715 
                                Private f32* %728 = OpVariable Private 
                                Private f32* %742 = OpVariable Private 
                                Private f32* %850 = OpVariable Private 
                                Private f32* %864 = OpVariable Private 
                                Private f32* %911 = OpVariable Private 
                                Private f32* %925 = OpVariable Private 
                                             %960 = OpTypePointer Output %7 
                               Output f32_4* %961 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %704 = OpVariable Function 
                             Function f32_3* %721 = OpVariable Function 
                             Function f32_3* %735 = OpVariable Function 
                             Function f32_3* %791 = OpVariable Function 
                             Function f32_3* %804 = OpVariable Function 
                             Function f32_3* %843 = OpVariable Function 
                             Function f32_3* %857 = OpVariable Function 
                             Function f32_3* %904 = OpVariable Function 
                             Function f32_3* %918 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %43 = OpAccessChain %39 %41 %27 
                                          f32 %44 = OpLoad %43 
                                 Private f32* %45 = OpAccessChain %9 %27 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Uniform f32* %49 = OpAccessChain %39 %41 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                                      OpStore %31 %51 
                                          f32 %53 = OpLoad %31 
                                          f32 %54 = OpFDiv %52 %53 
                                                      OpStore %31 %54 
                                          f32 %56 = OpLoad %31 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %39 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %55 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %31 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %31 %68 
                                 Private f32* %69 = OpAccessChain %9 %27 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                          f32 %72 = OpFAdd %71 %52 
                                 Private f32* %73 = OpAccessChain %9 %27 
                                                      OpStore %73 %72 
                                        f32_3 %78 = OpLoad vs_TEXCOORD2 
                                        f32_3 %79 = OpFNegate %78 
                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_4 %87 = OpLoad %74 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_3 %90 = OpLoad vs_TEXCOORD2 
                                        f32_3 %91 = OpFAdd %89 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 1 5 6 
                                                      OpStore %9 %93 
                                        f32_3 %95 = OpLoad vs_TEXCOORD1 
                                        f32_3 %96 = OpFNegate %95 
                                          f32 %97 = OpLoad %31 
                                        f32_3 %98 = OpCompositeConstruct %97 %97 %97 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 2 3 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 6 
                                                      OpStore %9 %104 
                                         f32 %105 = OpLoad %31 
                                       f32_3 %106 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD1 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %74 %110 
                              Uniform f32_4* %112 = OpAccessChain %39 %61 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 3 3 3 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 2 3 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %74 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %123 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %39 %125 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %124 %127 
                                                      OpStore %74 %128 
                              Uniform f32_4* %129 = OpAccessChain %39 %125 %41 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %74 %135 
                              Uniform f32_4* %136 = OpAccessChain %39 %125 %125 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %39 %125 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %143 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %39 %144 %41 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                       f32_4 %157 = OpLoad %74 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %74 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %158 %160 
                                Private f32* %162 = OpAccessChain %74 %27 
                                                      OpStore %162 %161 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                              Uniform f32_4* %166 = OpAccessChain %39 %144 %61 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %170 = OpFAdd %165 %169 
                                       f32_4 %171 = OpLoad %163 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %163 %172 
                                       f32_4 %173 = OpLoad %163 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_4 %175 = OpLoad %163 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %174 %176 
                                Private f32* %178 = OpAccessChain %74 %48 
                                                      OpStore %178 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                              Uniform f32_4* %181 = OpAccessChain %39 %144 %125 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFNegate %183 
                                       f32_3 %185 = OpFAdd %180 %184 
                                       f32_4 %186 = OpLoad %163 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %163 %187 
                                       f32_4 %188 = OpLoad %163 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %163 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                Private f32* %194 = OpAccessChain %74 %193 
                                                      OpStore %194 %192 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                              Uniform f32_4* %197 = OpAccessChain %39 %144 %144 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %196 %200 
                                       f32_4 %202 = OpLoad %163 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %163 %203 
                                       f32_4 %204 = OpLoad %163 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %163 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                Private f32* %209 = OpAccessChain %74 %62 
                                                      OpStore %209 %208 
                                       f32_4 %214 = OpLoad %74 
                              Uniform f32_4* %216 = OpAccessChain %39 %215 
                                       f32_4 %217 = OpLoad %216 
                                      bool_4 %218 = OpFOrdLessThan %214 %217 
                                                      OpStore %213 %218 
                               Private bool* %222 = OpAccessChain %213 %27 
                                        bool %223 = OpLoad %222 
                                         f32 %226 = OpSelect %223 %224 %225 
                                Private f32* %227 = OpAccessChain %220 %27 
                                                      OpStore %227 %226 
                               Private bool* %228 = OpAccessChain %213 %48 
                                        bool %229 = OpLoad %228 
                                         f32 %230 = OpSelect %229 %224 %225 
                                Private f32* %231 = OpAccessChain %220 %48 
                                                      OpStore %231 %230 
                               Private bool* %232 = OpAccessChain %213 %193 
                                        bool %233 = OpLoad %232 
                                         f32 %234 = OpSelect %233 %224 %225 
                                Private f32* %235 = OpAccessChain %220 %193 
                                                      OpStore %235 %234 
                               Private bool* %236 = OpAccessChain %213 %27 
                                        bool %237 = OpLoad %236 
                                         f32 %239 = OpSelect %237 %52 %238 
                                Private f32* %240 = OpAccessChain %74 %27 
                                                      OpStore %240 %239 
                               Private bool* %241 = OpAccessChain %213 %48 
                                        bool %242 = OpLoad %241 
                                         f32 %243 = OpSelect %242 %52 %238 
                                Private f32* %244 = OpAccessChain %74 %48 
                                                      OpStore %244 %243 
                               Private bool* %245 = OpAccessChain %213 %193 
                                        bool %246 = OpLoad %245 
                                         f32 %247 = OpSelect %246 %52 %238 
                                Private f32* %248 = OpAccessChain %74 %193 
                                                      OpStore %248 %247 
                               Private bool* %249 = OpAccessChain %213 %62 
                                        bool %250 = OpLoad %249 
                                         f32 %251 = OpSelect %250 %52 %238 
                                Private f32* %252 = OpAccessChain %74 %62 
                                                      OpStore %252 %251 
                                       f32_3 %253 = OpLoad %220 
                                       f32_4 %254 = OpLoad %74 
                                       f32_3 %255 = OpVectorShuffle %254 %254 1 2 3 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %220 %256 
                                       f32_3 %258 = OpLoad %220 
                                       f32_3 %260 = OpExtInst %1 40 %258 %259 
                                                      OpStore %257 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 1 1 1 
                              Uniform f32_4* %264 = OpAccessChain %39 %263 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %262 %266 
                                       f32_4 %268 = OpLoad %163 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %163 %269 
                              Uniform f32_4* %270 = OpAccessChain %39 %263 %215 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 0 0 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %163 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %163 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %163 %280 
                              Uniform f32_4* %282 = OpAccessChain %39 %263 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 2 2 2 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %163 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFAdd %287 %289 
                                       f32_4 %291 = OpLoad %163 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %163 %292 
                              Uniform f32_4* %294 = OpAccessChain %39 %263 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 3 3 3 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %163 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %163 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %163 %304 
                                       f32_3 %305 = OpLoad %257 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_4 %307 = OpLoad %163 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %163 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %163 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %39 %263 %61 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %314 %317 
                                       f32_4 %319 = OpLoad %312 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %312 %320 
                              Uniform f32_4* %321 = OpAccessChain %39 %263 %41 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %312 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %312 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %312 %331 
                              Uniform f32_4* %332 = OpAccessChain %39 %263 %125 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 2 2 2 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %312 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %312 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %312 %342 
                              Uniform f32_4* %343 = OpAccessChain %39 %263 %144 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_4 %346 = OpLoad %9 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_4 %349 = OpLoad %312 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFAdd %348 %350 
                                       f32_4 %352 = OpLoad %312 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %312 %353 
                                       f32_4 %354 = OpLoad %312 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %74 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 0 0 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %163 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %163 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %163 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 1 1 1 
                              Uniform f32_4* %367 = OpAccessChain %39 %263 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %365 %369 
                                       f32_4 %371 = OpLoad %312 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %312 %372 
                              Uniform f32_4* %374 = OpAccessChain %39 %263 %373 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                                       f32_4 %380 = OpLoad %312 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_3 %382 = OpFAdd %379 %381 
                                       f32_4 %383 = OpLoad %312 
                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
                                                      OpStore %312 %384 
                              Uniform f32_4* %386 = OpAccessChain %39 %263 %385 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 2 2 2 
                                       f32_3 %391 = OpFMul %388 %390 
                                       f32_4 %392 = OpLoad %312 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFAdd %391 %393 
                                       f32_4 %395 = OpLoad %312 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %312 %396 
                              Uniform f32_4* %398 = OpAccessChain %39 %263 %397 
                                       f32_4 %399 = OpLoad %398 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 3 3 3 
                                       f32_3 %403 = OpFMul %400 %402 
                                       f32_4 %404 = OpLoad %312 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpFAdd %403 %405 
                                       f32_4 %407 = OpLoad %312 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 6 3 
                                                      OpStore %312 %408 
                                       f32_4 %409 = OpLoad %312 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_3 %411 = OpLoad %257 
                                       f32_3 %412 = OpVectorShuffle %411 %411 1 1 1 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %163 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFAdd %413 %415 
                                       f32_4 %417 = OpLoad %163 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %163 %418 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 1 1 1 
                              Uniform f32_4* %422 = OpAccessChain %39 %263 %421 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFMul %420 %424 
                                       f32_4 %426 = OpLoad %312 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
                                                      OpStore %312 %427 
                              Uniform f32_4* %429 = OpAccessChain %39 %263 %428 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_4 %432 = OpLoad %9 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 0 0 
                                       f32_3 %434 = OpFMul %431 %433 
                                       f32_4 %435 = OpLoad %312 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpFAdd %434 %436 
                                       f32_4 %438 = OpLoad %312 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %312 %439 
                              Uniform f32_4* %441 = OpAccessChain %39 %263 %440 
                                       f32_4 %442 = OpLoad %441 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_4 %444 = OpLoad %9 
                                       f32_3 %445 = OpVectorShuffle %444 %444 2 2 2 
                                       f32_3 %446 = OpFMul %443 %445 
                                       f32_4 %447 = OpLoad %312 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFAdd %446 %448 
                                       f32_4 %450 = OpLoad %9 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 6 3 
                                                      OpStore %9 %451 
                              Uniform f32_4* %453 = OpAccessChain %39 %263 %452 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %9 
                                       f32_3 %457 = OpVectorShuffle %456 %456 3 3 3 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_4 %459 = OpLoad %9 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %466 = OpLoad %257 
                                       f32_3 %467 = OpVectorShuffle %466 %466 2 2 2 
                                       f32_3 %468 = OpFMul %465 %467 
                                       f32_4 %469 = OpLoad %163 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %468 %470 
                                       f32_4 %472 = OpLoad %9 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %9 %473 
                                       f32_3 %474 = OpLoad %257 
                                       f32_4 %475 = OpLoad %74 
                                       f32_4 %476 = OpVectorShuffle %475 %474 0 4 5 6 
                                                      OpStore %74 %476 
                                       f32_4 %478 = OpLoad %74 
                                         f32 %480 = OpDot %478 %479 
                                                      OpStore %477 %480 
                                         f32 %481 = OpLoad %477 
                                         f32 %482 = OpFNegate %481 
                                Private f32* %483 = OpAccessChain %9 %193 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFAdd %482 %484 
                                                      OpStore %55 %485 
                                         f32 %486 = OpLoad %55 
                                         f32 %487 = OpFAdd %486 %52 
                                                      OpStore %55 %487 
                                       f32_4 %488 = OpLoad %9 
                                       f32_2 %489 = OpVectorShuffle %488 %488 0 1 
                              Uniform f32_4* %490 = OpAccessChain %39 %293 
                                       f32_4 %491 = OpLoad %490 
                                       f32_2 %492 = OpVectorShuffle %491 %491 2 3 
                                       f32_2 %493 = OpFMul %489 %492 
                                       f32_2 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %74 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore %74 %498 
                                       f32_4 %499 = OpLoad %74 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_2 %501 = OpExtInst %1 8 %500 
                                       f32_4 %502 = OpLoad %74 
                                       f32_4 %503 = OpVectorShuffle %502 %501 4 5 2 3 
                                                      OpStore %74 %503 
                                       f32_4 %504 = OpLoad %9 
                                       f32_2 %505 = OpVectorShuffle %504 %504 0 1 
                              Uniform f32_4* %506 = OpAccessChain %39 %293 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFMul %505 %508 
                                       f32_4 %510 = OpLoad %74 
                                       f32_2 %511 = OpVectorShuffle %510 %510 0 1 
                                       f32_2 %512 = OpFNegate %511 
                                       f32_2 %513 = OpFAdd %509 %512 
                                       f32_4 %514 = OpLoad %9 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %9 %515 
                                       f32_4 %518 = OpLoad %9 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_2 %521 = OpExtInst %1 40 %519 %520 
                                                      OpStore %517 %521 
                                       f32_4 %522 = OpLoad %9 
                                       f32_4 %523 = OpVectorShuffle %522 %522 0 0 1 1 
                                       f32_4 %525 = OpFAdd %523 %524 
                                                      OpStore %163 %525 
                                       f32_2 %526 = OpLoad %517 
                                       f32_2 %527 = OpFNegate %526 
                                       f32_2 %528 = OpLoad %517 
                                       f32_2 %529 = OpFMul %527 %528 
                                       f32_4 %530 = OpLoad %163 
                                       f32_2 %531 = OpVectorShuffle %530 %530 1 3 
                                       f32_2 %532 = OpFAdd %529 %531 
                                                      OpStore %517 %532 
                                       f32_2 %533 = OpLoad %517 
                                       f32_2 %535 = OpFAdd %533 %534 
                                                      OpStore %517 %535 
                                       f32_2 %537 = OpLoad %517 
                                       f32_2 %540 = OpFMul %537 %539 
                                       f32_4 %541 = OpLoad %536 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 2 3 
                                                      OpStore %536 %542 
                                       f32_4 %543 = OpLoad %9 
                                       f32_2 %544 = OpVectorShuffle %543 %543 0 1 
                                       f32_2 %545 = OpFNegate %544 
                                       f32_2 %546 = OpFAdd %545 %534 
                                                      OpStore %517 %546 
                                       f32_2 %547 = OpLoad %517 
                                       f32_2 %548 = OpFMul %547 %539 
                                       f32_4 %549 = OpLoad %312 
                                       f32_4 %550 = OpVectorShuffle %549 %548 4 5 2 3 
                                                      OpStore %312 %550 
                                       f32_4 %552 = OpLoad %163 
                                       f32_4 %553 = OpVectorShuffle %552 %552 0 0 2 2 
                                       f32_4 %554 = OpLoad %163 
                                       f32_4 %555 = OpVectorShuffle %554 %554 0 0 2 2 
                                       f32_4 %556 = OpFMul %553 %555 
                                                      OpStore %551 %556 
                                       f32_4 %557 = OpLoad %163 
                                       f32_2 %558 = OpVectorShuffle %557 %557 1 3 
                                       f32_2 %559 = OpFMul %558 %539 
                                       f32_4 %560 = OpLoad %163 
                                       f32_4 %561 = OpVectorShuffle %560 %559 4 5 2 3 
                                                      OpStore %163 %561 
                                       f32_4 %562 = OpLoad %551 
                                       f32_2 %563 = OpVectorShuffle %562 %562 3 1 
                                       f32_2 %566 = OpFMul %563 %565 
                                       f32_4 %567 = OpLoad %312 
                                       f32_4 %568 = OpVectorShuffle %567 %566 0 1 4 5 
                                                      OpStore %312 %568 
                                       f32_4 %570 = OpLoad %551 
                                       f32_2 %571 = OpVectorShuffle %570 %570 0 2 
                                       f32_2 %572 = OpFMul %571 %495 
                                       f32_4 %573 = OpLoad %9 
                                       f32_2 %574 = OpVectorShuffle %573 %573 0 1 
                                       f32_2 %575 = OpFNegate %574 
                                       f32_2 %576 = OpFAdd %572 %575 
                                                      OpStore %569 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_2 %578 = OpVectorShuffle %577 %577 0 1 
                                       f32_2 %579 = OpExtInst %1 37 %578 %520 
                                       f32_4 %580 = OpLoad %9 
                                       f32_4 %581 = OpVectorShuffle %580 %579 4 5 2 3 
                                                      OpStore %9 %581 
                                       f32_4 %582 = OpLoad %9 
                                       f32_2 %583 = OpVectorShuffle %582 %582 0 1 
                                       f32_2 %584 = OpFNegate %583 
                                       f32_4 %585 = OpLoad %9 
                                       f32_2 %586 = OpVectorShuffle %585 %585 0 1 
                                       f32_2 %587 = OpFMul %584 %586 
                                       f32_2 %588 = OpLoad %517 
                                       f32_2 %589 = OpFAdd %587 %588 
                                       f32_4 %590 = OpLoad %9 
                                       f32_4 %591 = OpVectorShuffle %590 %589 4 5 2 3 
                                                      OpStore %9 %591 
                                       f32_4 %592 = OpLoad %9 
                                       f32_2 %593 = OpVectorShuffle %592 %592 0 1 
                                       f32_2 %594 = OpFAdd %593 %534 
                                       f32_4 %595 = OpLoad %9 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 2 3 
                                                      OpStore %9 %596 
                                       f32_4 %597 = OpLoad %9 
                                       f32_2 %598 = OpVectorShuffle %597 %597 0 1 
                                       f32_2 %599 = OpFMul %598 %539 
                                       f32_4 %600 = OpLoad %551 
                                       f32_4 %601 = OpVectorShuffle %600 %599 4 5 2 3 
                                                      OpStore %551 %601 
                                       f32_2 %603 = OpLoad %569 
                                       f32_2 %604 = OpFMul %603 %539 
                                       f32_4 %605 = OpLoad %602 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 2 3 
                                                      OpStore %602 %606 
                                       f32_4 %607 = OpLoad %312 
                                       f32_2 %608 = OpVectorShuffle %607 %607 1 2 
                                       f32_4 %609 = OpLoad %536 
                                       f32_4 %610 = OpVectorShuffle %609 %608 0 1 4 5 
                                                      OpStore %536 %610 
                                Private f32* %611 = OpAccessChain %602 %48 
                                         f32 %612 = OpLoad %611 
                                Private f32* %613 = OpAccessChain %551 %193 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %163 %48 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %551 %62 
                                                      OpStore %616 %615 
                                Private f32* %617 = OpAccessChain %163 %27 
                                         f32 %618 = OpLoad %617 
                                Private f32* %619 = OpAccessChain %602 %62 
                                                      OpStore %619 %618 
                                       f32_4 %620 = OpLoad %536 
                                       f32_3 %621 = OpVectorShuffle %620 %620 2 1 3 
                                       f32_4 %622 = OpLoad %551 
                                       f32_3 %623 = OpVectorShuffle %622 %622 2 1 3 
                                       f32_3 %624 = OpFAdd %621 %623 
                                       f32_4 %625 = OpLoad %9 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 5 2 6 
                                                      OpStore %9 %626 
                                Private f32* %627 = OpAccessChain %551 %27 
                                         f32 %628 = OpLoad %627 
                                Private f32* %629 = OpAccessChain %602 %193 
                                                      OpStore %629 %628 
                                       f32_4 %630 = OpLoad %536 
                                       f32_3 %631 = OpVectorShuffle %630 %630 2 1 3 
                                       f32_4 %632 = OpLoad %9 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 3 
                                       f32_3 %634 = OpFDiv %631 %633 
                                       f32_4 %635 = OpLoad %163 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 6 3 
                                                      OpStore %163 %636 
                                Private f32* %637 = OpAccessChain %536 %27 
                                         f32 %638 = OpLoad %637 
                                Private f32* %639 = OpAccessChain %312 %193 
                                                      OpStore %639 %638 
                                       f32_4 %640 = OpLoad %163 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %646 = OpFAdd %641 %645 
                                       f32_4 %647 = OpLoad %163 
                                       f32_4 %648 = OpVectorShuffle %647 %646 4 5 6 3 
                                                      OpStore %163 %648 
                                       f32_4 %649 = OpLoad %163 
                                       f32_3 %650 = OpVectorShuffle %649 %649 0 1 2 
                              Uniform f32_4* %651 = OpAccessChain %39 %293 
                                       f32_4 %652 = OpLoad %651 
                                       f32_3 %653 = OpVectorShuffle %652 %652 1 1 1 
                                       f32_3 %654 = OpFMul %650 %653 
                                       f32_4 %655 = OpLoad %163 
                                       f32_4 %656 = OpVectorShuffle %655 %654 4 5 6 3 
                                                      OpStore %163 %656 
                                Private f32* %657 = OpAccessChain %163 %27 
                                         f32 %658 = OpLoad %657 
                                Private f32* %659 = OpAccessChain %536 %62 
                                                      OpStore %659 %658 
                                       f32_4 %660 = OpLoad %312 
                                       f32_4 %661 = OpVectorShuffle %660 %660 2 3 0 2 
                                       f32_4 %662 = OpLoad %602 
                                       f32_4 %663 = OpVectorShuffle %662 %662 2 3 0 2 
                                       f32_4 %664 = OpFAdd %661 %663 
                                                      OpStore %551 %664 
                                       f32_4 %665 = OpLoad %312 
                                       f32_3 %666 = OpVectorShuffle %665 %665 0 2 3 
                                       f32_4 %667 = OpLoad %551 
                                       f32_3 %668 = OpVectorShuffle %667 %667 2 3 1 
                                       f32_3 %669 = OpFDiv %666 %668 
                                       f32_4 %670 = OpLoad %312 
                                       f32_4 %671 = OpVectorShuffle %670 %669 4 5 6 3 
                                                      OpStore %312 %671 
                                       f32_4 %672 = OpLoad %312 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 2 
                                       f32_3 %674 = OpFAdd %673 %645 
                                       f32_4 %675 = OpLoad %312 
                                       f32_4 %676 = OpVectorShuffle %675 %674 4 5 6 3 
                                                      OpStore %312 %676 
                                       f32_4 %677 = OpLoad %312 
                                       f32_3 %678 = OpVectorShuffle %677 %677 1 0 2 
                              Uniform f32_4* %679 = OpAccessChain %39 %293 
                                       f32_4 %680 = OpLoad %679 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 0 0 
                                       f32_3 %682 = OpFMul %678 %681 
                                       f32_4 %683 = OpLoad %536 
                                       f32_4 %684 = OpVectorShuffle %683 %682 4 5 6 3 
                                                      OpStore %536 %684 
                                       f32_4 %685 = OpLoad %74 
                                       f32_4 %686 = OpVectorShuffle %685 %685 0 1 0 1 
                              Uniform f32_4* %687 = OpAccessChain %39 %293 
                                       f32_4 %688 = OpLoad %687 
                                       f32_4 %689 = OpVectorShuffle %688 %688 0 1 0 1 
                                       f32_4 %690 = OpFMul %686 %689 
                                       f32_4 %691 = OpLoad %536 
                                       f32_4 %692 = OpVectorShuffle %691 %691 1 3 0 3 
                                       f32_4 %693 = OpFAdd %690 %692 
                                                      OpStore %312 %693 
                                       f32_4 %694 = OpLoad %74 
                                       f32_2 %695 = OpVectorShuffle %694 %694 0 1 
                              Uniform f32_4* %696 = OpAccessChain %39 %293 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 1 
                                       f32_2 %699 = OpFMul %695 %698 
                                       f32_4 %700 = OpLoad %536 
                                       f32_2 %701 = OpVectorShuffle %700 %700 2 3 
                                       f32_2 %702 = OpFAdd %699 %701 
                                                      OpStore %517 %702 
                                       f32_2 %705 = OpLoad %517 
                                         f32 %706 = OpLoad %55 
                                         f32 %707 = OpCompositeExtract %705 0 
                                         f32 %708 = OpCompositeExtract %705 1 
                                       f32_3 %709 = OpCompositeConstruct %707 %708 %706 
                                                      OpStore %704 %709 
                         read_only Texture2D %712 = OpLoad %711 
                                     sampler %714 = OpLoad %713 
                  read_only Texture2DSampled %717 = OpSampledImage %712 %714 
                                       f32_3 %718 = OpLoad %704 
                                         f32 %719 = OpCompositeExtract %718 2 
                                         f32 %720 = OpImageSampleDrefExplicitLod %717 %718 %719 Lod %6 
                                                      OpStore %710 %720 
                                       f32_4 %722 = OpLoad %312 
                                       f32_2 %723 = OpVectorShuffle %722 %722 0 1 
                                         f32 %724 = OpLoad %55 
                                         f32 %725 = OpCompositeExtract %723 0 
                                         f32 %726 = OpCompositeExtract %723 1 
                                       f32_3 %727 = OpCompositeConstruct %725 %726 %724 
                                                      OpStore %721 %727 
                         read_only Texture2D %729 = OpLoad %711 
                                     sampler %730 = OpLoad %713 
                  read_only Texture2DSampled %731 = OpSampledImage %729 %730 
                                       f32_3 %732 = OpLoad %721 
                                         f32 %733 = OpCompositeExtract %732 2 
                                         f32 %734 = OpImageSampleDrefExplicitLod %731 %732 %733 Lod %6 
                                                      OpStore %728 %734 
                                       f32_4 %736 = OpLoad %312 
                                       f32_2 %737 = OpVectorShuffle %736 %736 2 3 
                                         f32 %738 = OpLoad %55 
                                         f32 %739 = OpCompositeExtract %737 0 
                                         f32 %740 = OpCompositeExtract %737 1 
                                       f32_3 %741 = OpCompositeConstruct %739 %740 %738 
                                                      OpStore %735 %741 
                         read_only Texture2D %743 = OpLoad %711 
                                     sampler %744 = OpLoad %713 
                  read_only Texture2DSampled %745 = OpSampledImage %743 %744 
                                       f32_3 %746 = OpLoad %735 
                                         f32 %747 = OpCompositeExtract %746 2 
                                         f32 %748 = OpImageSampleDrefExplicitLod %745 %746 %747 Lod %6 
                                                      OpStore %742 %748 
                                       f32_4 %749 = OpLoad %9 
                                       f32_4 %750 = OpVectorShuffle %749 %749 0 0 0 1 
                                       f32_4 %751 = OpLoad %551 
                                       f32_4 %752 = OpVectorShuffle %751 %751 2 3 1 2 
                                       f32_4 %753 = OpFMul %750 %752 
                                                      OpStore %312 %753 
                                         f32 %754 = OpLoad %742 
                                Private f32* %755 = OpAccessChain %312 %48 
                                         f32 %756 = OpLoad %755 
                                         f32 %757 = OpFMul %754 %756 
                                Private f32* %758 = OpAccessChain %9 %27 
                                                      OpStore %758 %757 
                                Private f32* %759 = OpAccessChain %312 %27 
                                         f32 %760 = OpLoad %759 
                                         f32 %761 = OpLoad %728 
                                         f32 %762 = OpFMul %760 %761 
                                Private f32* %763 = OpAccessChain %9 %27 
                                         f32 %764 = OpLoad %763 
                                         f32 %765 = OpFAdd %762 %764 
                                Private f32* %766 = OpAccessChain %9 %27 
                                                      OpStore %766 %765 
                                Private f32* %767 = OpAccessChain %312 %193 
                                         f32 %768 = OpLoad %767 
                                         f32 %769 = OpLoad %710 
                                         f32 %770 = OpFMul %768 %769 
                                Private f32* %771 = OpAccessChain %9 %27 
                                         f32 %772 = OpLoad %771 
                                         f32 %773 = OpFAdd %770 %772 
                                Private f32* %774 = OpAccessChain %9 %27 
                                                      OpStore %774 %773 
                                Private f32* %775 = OpAccessChain %536 %48 
                                         f32 %776 = OpLoad %775 
                                Private f32* %777 = OpAccessChain %163 %62 
                                                      OpStore %777 %776 
                                       f32_4 %778 = OpLoad %74 
                                       f32_4 %779 = OpVectorShuffle %778 %778 0 1 0 1 
                              Uniform f32_4* %780 = OpAccessChain %39 %293 
                                       f32_4 %781 = OpLoad %780 
                                       f32_4 %782 = OpVectorShuffle %781 %781 0 1 0 1 
                                       f32_4 %783 = OpFMul %779 %782 
                                       f32_4 %784 = OpLoad %163 
                                       f32_4 %785 = OpVectorShuffle %784 %784 3 1 3 2 
                                       f32_4 %786 = OpFAdd %783 %785 
                                                      OpStore %602 %786 
                                       f32_4 %787 = OpLoad %163 
                                       f32_2 %788 = OpVectorShuffle %787 %787 1 2 
                                       f32_4 %789 = OpLoad %536 
                                       f32_4 %790 = OpVectorShuffle %789 %788 0 4 2 5 
                                                      OpStore %536 %790 
                                       f32_4 %792 = OpLoad %602 
                                       f32_2 %793 = OpVectorShuffle %792 %792 0 1 
                                         f32 %794 = OpLoad %55 
                                         f32 %795 = OpCompositeExtract %793 0 
                                         f32 %796 = OpCompositeExtract %793 1 
                                       f32_3 %797 = OpCompositeConstruct %795 %796 %794 
                                                      OpStore %791 %797 
                         read_only Texture2D %798 = OpLoad %711 
                                     sampler %799 = OpLoad %713 
                  read_only Texture2DSampled %800 = OpSampledImage %798 %799 
                                       f32_3 %801 = OpLoad %791 
                                         f32 %802 = OpCompositeExtract %801 2 
                                         f32 %803 = OpImageSampleDrefExplicitLod %800 %801 %802 Lod %6 
                                                      OpStore %710 %803 
                                       f32_4 %805 = OpLoad %602 
                                       f32_2 %806 = OpVectorShuffle %805 %805 2 3 
                                         f32 %807 = OpLoad %55 
                                         f32 %808 = OpCompositeExtract %806 0 
                                         f32 %809 = OpCompositeExtract %806 1 
                                       f32_3 %810 = OpCompositeConstruct %808 %809 %807 
                                                      OpStore %804 %810 
                         read_only Texture2D %811 = OpLoad %711 
                                     sampler %812 = OpLoad %713 
                  read_only Texture2DSampled %813 = OpSampledImage %811 %812 
                                       f32_3 %814 = OpLoad %804 
                                         f32 %815 = OpCompositeExtract %814 2 
                                         f32 %816 = OpImageSampleDrefExplicitLod %813 %814 %815 Lod %6 
                                                      OpStore %728 %816 
                                Private f32* %817 = OpAccessChain %312 %62 
                                         f32 %818 = OpLoad %817 
                                         f32 %819 = OpLoad %710 
                                         f32 %820 = OpFMul %818 %819 
                                Private f32* %821 = OpAccessChain %9 %27 
                                         f32 %822 = OpLoad %821 
                                         f32 %823 = OpFAdd %820 %822 
                                Private f32* %824 = OpAccessChain %9 %27 
                                                      OpStore %824 %823 
                                       f32_4 %825 = OpLoad %74 
                                       f32_4 %826 = OpVectorShuffle %825 %825 0 1 0 1 
                              Uniform f32_4* %827 = OpAccessChain %39 %293 
                                       f32_4 %828 = OpLoad %827 
                                       f32_4 %829 = OpVectorShuffle %828 %828 0 1 0 1 
                                       f32_4 %830 = OpFMul %826 %829 
                                       f32_4 %831 = OpLoad %536 
                                       f32_4 %832 = OpVectorShuffle %831 %831 0 1 2 1 
                                       f32_4 %833 = OpFAdd %830 %832 
                                                      OpStore %163 %833 
                                       f32_4 %834 = OpLoad %74 
                                       f32_4 %835 = OpVectorShuffle %834 %834 0 1 0 1 
                              Uniform f32_4* %836 = OpAccessChain %39 %293 
                                       f32_4 %837 = OpLoad %836 
                                       f32_4 %838 = OpVectorShuffle %837 %837 0 1 0 1 
                                       f32_4 %839 = OpFMul %835 %838 
                                       f32_4 %840 = OpLoad %536 
                                       f32_4 %841 = OpVectorShuffle %840 %840 0 3 2 3 
                                       f32_4 %842 = OpFAdd %839 %841 
                                                      OpStore %536 %842 
                                       f32_4 %844 = OpLoad %163 
                                       f32_2 %845 = OpVectorShuffle %844 %844 0 1 
                                         f32 %846 = OpLoad %55 
                                         f32 %847 = OpCompositeExtract %845 0 
                                         f32 %848 = OpCompositeExtract %845 1 
                                       f32_3 %849 = OpCompositeConstruct %847 %848 %846 
                                                      OpStore %843 %849 
                         read_only Texture2D %851 = OpLoad %711 
                                     sampler %852 = OpLoad %713 
                  read_only Texture2DSampled %853 = OpSampledImage %851 %852 
                                       f32_3 %854 = OpLoad %843 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                                      OpStore %850 %856 
                                       f32_4 %858 = OpLoad %163 
                                       f32_2 %859 = OpVectorShuffle %858 %858 2 3 
                                         f32 %860 = OpLoad %55 
                                         f32 %861 = OpCompositeExtract %859 0 
                                         f32 %862 = OpCompositeExtract %859 1 
                                       f32_3 %863 = OpCompositeConstruct %861 %862 %860 
                                                      OpStore %857 %863 
                         read_only Texture2D %865 = OpLoad %711 
                                     sampler %866 = OpLoad %713 
                  read_only Texture2DSampled %867 = OpSampledImage %865 %866 
                                       f32_3 %868 = OpLoad %857 
                                         f32 %869 = OpCompositeExtract %868 2 
                                         f32 %870 = OpImageSampleDrefExplicitLod %867 %868 %869 Lod %6 
                                                      OpStore %864 %870 
                                       f32_4 %871 = OpLoad %9 
                                       f32_4 %872 = OpVectorShuffle %871 %871 1 1 3 3 
                                       f32_4 %873 = OpLoad %551 
                                       f32_4 %874 = OpFMul %872 %873 
                                                      OpStore %163 %874 
                                Private f32* %875 = OpAccessChain %9 %62 
                                         f32 %876 = OpLoad %875 
                                Private f32* %877 = OpAccessChain %551 %48 
                                         f32 %878 = OpLoad %877 
                                         f32 %879 = OpFMul %876 %878 
                                                      OpStore %31 %879 
                                Private f32* %880 = OpAccessChain %163 %27 
                                         f32 %881 = OpLoad %880 
                                         f32 %882 = OpLoad %850 
                                         f32 %883 = OpFMul %881 %882 
                                Private f32* %884 = OpAccessChain %9 %27 
                                         f32 %885 = OpLoad %884 
                                         f32 %886 = OpFAdd %883 %885 
                                Private f32* %887 = OpAccessChain %9 %27 
                                                      OpStore %887 %886 
                                Private f32* %888 = OpAccessChain %163 %48 
                                         f32 %889 = OpLoad %888 
                                         f32 %890 = OpLoad %864 
                                         f32 %891 = OpFMul %889 %890 
                                Private f32* %892 = OpAccessChain %9 %27 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpFAdd %891 %893 
                                Private f32* %895 = OpAccessChain %9 %27 
                                                      OpStore %895 %894 
                                Private f32* %896 = OpAccessChain %163 %193 
                                         f32 %897 = OpLoad %896 
                                         f32 %898 = OpLoad %728 
                                         f32 %899 = OpFMul %897 %898 
                                Private f32* %900 = OpAccessChain %9 %27 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFAdd %899 %901 
                                Private f32* %903 = OpAccessChain %9 %27 
                                                      OpStore %903 %902 
                                       f32_4 %905 = OpLoad %536 
                                       f32_2 %906 = OpVectorShuffle %905 %905 0 1 
                                         f32 %907 = OpLoad %55 
                                         f32 %908 = OpCompositeExtract %906 0 
                                         f32 %909 = OpCompositeExtract %906 1 
                                       f32_3 %910 = OpCompositeConstruct %908 %909 %907 
                                                      OpStore %904 %910 
                         read_only Texture2D %912 = OpLoad %711 
                                     sampler %913 = OpLoad %713 
                  read_only Texture2DSampled %914 = OpSampledImage %912 %913 
                                       f32_3 %915 = OpLoad %904 
                                         f32 %916 = OpCompositeExtract %915 2 
                                         f32 %917 = OpImageSampleDrefExplicitLod %914 %915 %916 Lod %6 
                                                      OpStore %911 %917 
                                       f32_4 %919 = OpLoad %536 
                                       f32_2 %920 = OpVectorShuffle %919 %919 2 3 
                                         f32 %921 = OpLoad %55 
                                         f32 %922 = OpCompositeExtract %920 0 
                                         f32 %923 = OpCompositeExtract %920 1 
                                       f32_3 %924 = OpCompositeConstruct %922 %923 %921 
                                                      OpStore %918 %924 
                         read_only Texture2D %926 = OpLoad %711 
                                     sampler %927 = OpLoad %713 
                  read_only Texture2DSampled %928 = OpSampledImage %926 %927 
                                       f32_3 %929 = OpLoad %918 
                                         f32 %930 = OpCompositeExtract %929 2 
                                         f32 %931 = OpImageSampleDrefExplicitLod %928 %929 %930 Lod %6 
                                                      OpStore %925 %931 
                                Private f32* %932 = OpAccessChain %163 %62 
                                         f32 %933 = OpLoad %932 
                                         f32 %934 = OpLoad %911 
                                         f32 %935 = OpFMul %933 %934 
                                Private f32* %936 = OpAccessChain %9 %27 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFAdd %935 %937 
                                Private f32* %939 = OpAccessChain %9 %27 
                                                      OpStore %939 %938 
                                         f32 %940 = OpLoad %31 
                                         f32 %941 = OpLoad %925 
                                         f32 %942 = OpFMul %940 %941 
                                Private f32* %943 = OpAccessChain %9 %27 
                                         f32 %944 = OpLoad %943 
                                         f32 %945 = OpFAdd %942 %944 
                                Private f32* %946 = OpAccessChain %9 %27 
                                                      OpStore %946 %945 
                                Uniform f32* %947 = OpAccessChain %39 %281 %27 
                                         f32 %948 = OpLoad %947 
                                         f32 %949 = OpFNegate %948 
                                         f32 %950 = OpFAdd %949 %52 
                                                      OpStore %31 %950 
                                       f32_4 %951 = OpLoad %9 
                                       f32_4 %952 = OpVectorShuffle %951 %951 0 0 0 0 
                                         f32 %953 = OpLoad %31 
                                       f32_4 %954 = OpCompositeConstruct %953 %953 %953 %953 
                                       f32_4 %955 = OpFMul %952 %954 
                              Uniform f32_4* %956 = OpAccessChain %39 %281 
                                       f32_4 %957 = OpLoad %956 
                                       f32_4 %958 = OpVectorShuffle %957 %957 0 0 0 0 
                                       f32_4 %959 = OpFAdd %955 %958 
                                                      OpStore %9 %959 
                                       f32_4 %962 = OpLoad %9 
                                                      OpStore %961 %962 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 964
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %77 %80 %94 %961 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 RelaxedPrecision 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate vs_TEXCOORD3 Location 80 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %711 DescriptorSet 711 
                                                      OpDecorate %711 Binding 711 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %713 DescriptorSet 713 
                                                      OpDecorate %713 Binding 713 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %850 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %852 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %866 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %911 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %913 RelaxedPrecision 
                                                      OpDecorate %925 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %927 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %941 RelaxedPrecision 
                                                      OpDecorate %948 RelaxedPrecision 
                                                      OpDecorate %949 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %957 RelaxedPrecision 
                                                      OpDecorate %958 RelaxedPrecision 
                                                      OpDecorate %961 RelaxedPrecision 
                                                      OpDecorate %961 Location 961 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeArray %7 %32 
                                          u32 %35 = OpConstant 16 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeStruct %7 %7 %33 %34 %7 %36 %7 %7 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          u32 %48 = OpConstant 1 
                                          f32 %52 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %74 = OpVariable Private 
                                              %75 = OpTypeVector %6 3 
                                              %76 = OpTypePointer Input %75 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %111 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 2 
                                         i32 %144 = OpConstant 3 
                              Private f32_4* %163 = OpVariable Private 
                                         u32 %193 = OpConstant 2 
                                             %210 = OpTypeBool 
                                             %211 = OpTypeVector %210 4 
                                             %212 = OpTypePointer Private %211 
                             Private bool_4* %213 = OpVariable Private 
                                         i32 %215 = OpConstant 4 
                                             %219 = OpTypePointer Private %75 
                              Private f32_3* %220 = OpVariable Private 
                                             %221 = OpTypePointer Private %210 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         f32 %225 = OpConstant 3.674022E-40 
                                         f32 %238 = OpConstant 3.674022E-40 
                              Private f32_3* %257 = OpVariable Private 
                                       f32_3 %259 = OpConstantComposite %238 %238 %238 
                                         i32 %263 = OpConstant 5 
                                         i32 %281 = OpConstant 6 
                                         i32 %293 = OpConstant 7 
                              Private f32_4* %312 = OpVariable Private 
                                         i32 %366 = OpConstant 9 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 10 
                                         i32 %397 = OpConstant 11 
                                         i32 %421 = OpConstant 13 
                                         i32 %428 = OpConstant 12 
                                         i32 %440 = OpConstant 14 
                                         i32 %452 = OpConstant 15 
                                Private f32* %477 = OpVariable Private 
                                       f32_4 %479 = OpConstantComposite %52 %52 %52 %52 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_2 %495 = OpConstantComposite %494 %494 
                                             %516 = OpTypePointer Private %22 
                              Private f32_2* %517 = OpVariable Private 
                                       f32_2 %520 = OpConstantComposite %238 %238 
                                       f32_4 %524 = OpConstantComposite %494 %52 %494 %52 
                                       f32_2 %534 = OpConstantComposite %52 %52 
                              Private f32_4* %536 = OpVariable Private 
                                         f32 %538 = OpConstant 3.674022E-40 
                                       f32_2 %539 = OpConstantComposite %538 %538 
                              Private f32_4* %551 = OpVariable Private 
                                         f32 %564 = OpConstant 3.674022E-40 
                                       f32_2 %565 = OpConstantComposite %564 %564 
                              Private f32_2* %569 = OpVariable Private 
                              Private f32_4* %602 = OpVariable Private 
                                         f32 %642 = OpConstant 3.674022E-40 
                                         f32 %643 = OpConstant 3.674022E-40 
                                         f32 %644 = OpConstant 3.674022E-40 
                                       f32_3 %645 = OpConstantComposite %642 %643 %644 
                                             %703 = OpTypePointer Function %75 
                                Private f32* %710 = OpVariable Private 
        UniformConstant read_only Texture2D* %711 = OpVariable UniformConstant 
                    UniformConstant sampler* %713 = OpVariable UniformConstant 
                                             %715 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %716 = OpTypeSampledImage %715 
                                Private f32* %728 = OpVariable Private 
                                Private f32* %742 = OpVariable Private 
                                Private f32* %850 = OpVariable Private 
                                Private f32* %864 = OpVariable Private 
                                Private f32* %911 = OpVariable Private 
                                Private f32* %925 = OpVariable Private 
                                             %960 = OpTypePointer Output %7 
                               Output f32_4* %961 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %704 = OpVariable Function 
                             Function f32_3* %721 = OpVariable Function 
                             Function f32_3* %735 = OpVariable Function 
                             Function f32_3* %791 = OpVariable Function 
                             Function f32_3* %804 = OpVariable Function 
                             Function f32_3* %843 = OpVariable Function 
                             Function f32_3* %857 = OpVariable Function 
                             Function f32_3* %904 = OpVariable Function 
                             Function f32_3* %918 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %43 = OpAccessChain %39 %41 %27 
                                          f32 %44 = OpLoad %43 
                                 Private f32* %45 = OpAccessChain %9 %27 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Uniform f32* %49 = OpAccessChain %39 %41 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                                      OpStore %31 %51 
                                          f32 %53 = OpLoad %31 
                                          f32 %54 = OpFDiv %52 %53 
                                                      OpStore %31 %54 
                                          f32 %56 = OpLoad %31 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %39 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %55 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %31 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %31 %68 
                                 Private f32* %69 = OpAccessChain %9 %27 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                          f32 %72 = OpFAdd %71 %52 
                                 Private f32* %73 = OpAccessChain %9 %27 
                                                      OpStore %73 %72 
                                        f32_3 %78 = OpLoad vs_TEXCOORD2 
                                        f32_3 %79 = OpFNegate %78 
                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_4 %87 = OpLoad %74 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_3 %90 = OpLoad vs_TEXCOORD2 
                                        f32_3 %91 = OpFAdd %89 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 1 5 6 
                                                      OpStore %9 %93 
                                        f32_3 %95 = OpLoad vs_TEXCOORD1 
                                        f32_3 %96 = OpFNegate %95 
                                          f32 %97 = OpLoad %31 
                                        f32_3 %98 = OpCompositeConstruct %97 %97 %97 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 2 3 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 6 
                                                      OpStore %9 %104 
                                         f32 %105 = OpLoad %31 
                                       f32_3 %106 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD1 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %74 %110 
                              Uniform f32_4* %112 = OpAccessChain %39 %61 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 3 3 3 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 2 3 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %74 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %123 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %39 %125 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %124 %127 
                                                      OpStore %74 %128 
                              Uniform f32_4* %129 = OpAccessChain %39 %125 %41 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %74 %135 
                              Uniform f32_4* %136 = OpAccessChain %39 %125 %125 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %39 %125 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %143 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %39 %144 %41 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                       f32_4 %157 = OpLoad %74 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %74 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %158 %160 
                                Private f32* %162 = OpAccessChain %74 %27 
                                                      OpStore %162 %161 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                              Uniform f32_4* %166 = OpAccessChain %39 %144 %61 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %170 = OpFAdd %165 %169 
                                       f32_4 %171 = OpLoad %163 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %163 %172 
                                       f32_4 %173 = OpLoad %163 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_4 %175 = OpLoad %163 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %174 %176 
                                Private f32* %178 = OpAccessChain %74 %48 
                                                      OpStore %178 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                              Uniform f32_4* %181 = OpAccessChain %39 %144 %125 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFNegate %183 
                                       f32_3 %185 = OpFAdd %180 %184 
                                       f32_4 %186 = OpLoad %163 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %163 %187 
                                       f32_4 %188 = OpLoad %163 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %163 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                Private f32* %194 = OpAccessChain %74 %193 
                                                      OpStore %194 %192 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                              Uniform f32_4* %197 = OpAccessChain %39 %144 %144 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %196 %200 
                                       f32_4 %202 = OpLoad %163 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %163 %203 
                                       f32_4 %204 = OpLoad %163 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %163 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                Private f32* %209 = OpAccessChain %74 %62 
                                                      OpStore %209 %208 
                                       f32_4 %214 = OpLoad %74 
                              Uniform f32_4* %216 = OpAccessChain %39 %215 
                                       f32_4 %217 = OpLoad %216 
                                      bool_4 %218 = OpFOrdLessThan %214 %217 
                                                      OpStore %213 %218 
                               Private bool* %222 = OpAccessChain %213 %27 
                                        bool %223 = OpLoad %222 
                                         f32 %226 = OpSelect %223 %224 %225 
                                Private f32* %227 = OpAccessChain %220 %27 
                                                      OpStore %227 %226 
                               Private bool* %228 = OpAccessChain %213 %48 
                                        bool %229 = OpLoad %228 
                                         f32 %230 = OpSelect %229 %224 %225 
                                Private f32* %231 = OpAccessChain %220 %48 
                                                      OpStore %231 %230 
                               Private bool* %232 = OpAccessChain %213 %193 
                                        bool %233 = OpLoad %232 
                                         f32 %234 = OpSelect %233 %224 %225 
                                Private f32* %235 = OpAccessChain %220 %193 
                                                      OpStore %235 %234 
                               Private bool* %236 = OpAccessChain %213 %27 
                                        bool %237 = OpLoad %236 
                                         f32 %239 = OpSelect %237 %52 %238 
                                Private f32* %240 = OpAccessChain %74 %27 
                                                      OpStore %240 %239 
                               Private bool* %241 = OpAccessChain %213 %48 
                                        bool %242 = OpLoad %241 
                                         f32 %243 = OpSelect %242 %52 %238 
                                Private f32* %244 = OpAccessChain %74 %48 
                                                      OpStore %244 %243 
                               Private bool* %245 = OpAccessChain %213 %193 
                                        bool %246 = OpLoad %245 
                                         f32 %247 = OpSelect %246 %52 %238 
                                Private f32* %248 = OpAccessChain %74 %193 
                                                      OpStore %248 %247 
                               Private bool* %249 = OpAccessChain %213 %62 
                                        bool %250 = OpLoad %249 
                                         f32 %251 = OpSelect %250 %52 %238 
                                Private f32* %252 = OpAccessChain %74 %62 
                                                      OpStore %252 %251 
                                       f32_3 %253 = OpLoad %220 
                                       f32_4 %254 = OpLoad %74 
                                       f32_3 %255 = OpVectorShuffle %254 %254 1 2 3 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %220 %256 
                                       f32_3 %258 = OpLoad %220 
                                       f32_3 %260 = OpExtInst %1 40 %258 %259 
                                                      OpStore %257 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 1 1 1 
                              Uniform f32_4* %264 = OpAccessChain %39 %263 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %262 %266 
                                       f32_4 %268 = OpLoad %163 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %163 %269 
                              Uniform f32_4* %270 = OpAccessChain %39 %263 %215 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 0 0 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %163 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %163 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %163 %280 
                              Uniform f32_4* %282 = OpAccessChain %39 %263 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 2 2 2 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %163 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFAdd %287 %289 
                                       f32_4 %291 = OpLoad %163 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %163 %292 
                              Uniform f32_4* %294 = OpAccessChain %39 %263 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 3 3 3 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %163 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %163 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %163 %304 
                                       f32_3 %305 = OpLoad %257 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_4 %307 = OpLoad %163 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %163 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %163 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %39 %263 %61 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %314 %317 
                                       f32_4 %319 = OpLoad %312 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %312 %320 
                              Uniform f32_4* %321 = OpAccessChain %39 %263 %41 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %312 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %312 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %312 %331 
                              Uniform f32_4* %332 = OpAccessChain %39 %263 %125 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 2 2 2 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %312 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %312 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %312 %342 
                              Uniform f32_4* %343 = OpAccessChain %39 %263 %144 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_4 %346 = OpLoad %9 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_4 %349 = OpLoad %312 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFAdd %348 %350 
                                       f32_4 %352 = OpLoad %312 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %312 %353 
                                       f32_4 %354 = OpLoad %312 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %74 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 0 0 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %163 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %163 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %163 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 1 1 1 
                              Uniform f32_4* %367 = OpAccessChain %39 %263 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %365 %369 
                                       f32_4 %371 = OpLoad %312 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %312 %372 
                              Uniform f32_4* %374 = OpAccessChain %39 %263 %373 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                                       f32_4 %380 = OpLoad %312 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_3 %382 = OpFAdd %379 %381 
                                       f32_4 %383 = OpLoad %312 
                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
                                                      OpStore %312 %384 
                              Uniform f32_4* %386 = OpAccessChain %39 %263 %385 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 2 2 2 
                                       f32_3 %391 = OpFMul %388 %390 
                                       f32_4 %392 = OpLoad %312 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFAdd %391 %393 
                                       f32_4 %395 = OpLoad %312 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %312 %396 
                              Uniform f32_4* %398 = OpAccessChain %39 %263 %397 
                                       f32_4 %399 = OpLoad %398 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 3 3 3 
                                       f32_3 %403 = OpFMul %400 %402 
                                       f32_4 %404 = OpLoad %312 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpFAdd %403 %405 
                                       f32_4 %407 = OpLoad %312 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 6 3 
                                                      OpStore %312 %408 
                                       f32_4 %409 = OpLoad %312 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_3 %411 = OpLoad %257 
                                       f32_3 %412 = OpVectorShuffle %411 %411 1 1 1 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %163 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFAdd %413 %415 
                                       f32_4 %417 = OpLoad %163 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %163 %418 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 1 1 1 
                              Uniform f32_4* %422 = OpAccessChain %39 %263 %421 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFMul %420 %424 
                                       f32_4 %426 = OpLoad %312 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
                                                      OpStore %312 %427 
                              Uniform f32_4* %429 = OpAccessChain %39 %263 %428 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_4 %432 = OpLoad %9 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 0 0 
                                       f32_3 %434 = OpFMul %431 %433 
                                       f32_4 %435 = OpLoad %312 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpFAdd %434 %436 
                                       f32_4 %438 = OpLoad %312 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %312 %439 
                              Uniform f32_4* %441 = OpAccessChain %39 %263 %440 
                                       f32_4 %442 = OpLoad %441 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_4 %444 = OpLoad %9 
                                       f32_3 %445 = OpVectorShuffle %444 %444 2 2 2 
                                       f32_3 %446 = OpFMul %443 %445 
                                       f32_4 %447 = OpLoad %312 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFAdd %446 %448 
                                       f32_4 %450 = OpLoad %9 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 6 3 
                                                      OpStore %9 %451 
                              Uniform f32_4* %453 = OpAccessChain %39 %263 %452 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %9 
                                       f32_3 %457 = OpVectorShuffle %456 %456 3 3 3 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_4 %459 = OpLoad %9 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %466 = OpLoad %257 
                                       f32_3 %467 = OpVectorShuffle %466 %466 2 2 2 
                                       f32_3 %468 = OpFMul %465 %467 
                                       f32_4 %469 = OpLoad %163 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %468 %470 
                                       f32_4 %472 = OpLoad %9 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %9 %473 
                                       f32_3 %474 = OpLoad %257 
                                       f32_4 %475 = OpLoad %74 
                                       f32_4 %476 = OpVectorShuffle %475 %474 0 4 5 6 
                                                      OpStore %74 %476 
                                       f32_4 %478 = OpLoad %74 
                                         f32 %480 = OpDot %478 %479 
                                                      OpStore %477 %480 
                                         f32 %481 = OpLoad %477 
                                         f32 %482 = OpFNegate %481 
                                Private f32* %483 = OpAccessChain %9 %193 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFAdd %482 %484 
                                                      OpStore %55 %485 
                                         f32 %486 = OpLoad %55 
                                         f32 %487 = OpFAdd %486 %52 
                                                      OpStore %55 %487 
                                       f32_4 %488 = OpLoad %9 
                                       f32_2 %489 = OpVectorShuffle %488 %488 0 1 
                              Uniform f32_4* %490 = OpAccessChain %39 %293 
                                       f32_4 %491 = OpLoad %490 
                                       f32_2 %492 = OpVectorShuffle %491 %491 2 3 
                                       f32_2 %493 = OpFMul %489 %492 
                                       f32_2 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %74 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore %74 %498 
                                       f32_4 %499 = OpLoad %74 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_2 %501 = OpExtInst %1 8 %500 
                                       f32_4 %502 = OpLoad %74 
                                       f32_4 %503 = OpVectorShuffle %502 %501 4 5 2 3 
                                                      OpStore %74 %503 
                                       f32_4 %504 = OpLoad %9 
                                       f32_2 %505 = OpVectorShuffle %504 %504 0 1 
                              Uniform f32_4* %506 = OpAccessChain %39 %293 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFMul %505 %508 
                                       f32_4 %510 = OpLoad %74 
                                       f32_2 %511 = OpVectorShuffle %510 %510 0 1 
                                       f32_2 %512 = OpFNegate %511 
                                       f32_2 %513 = OpFAdd %509 %512 
                                       f32_4 %514 = OpLoad %9 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %9 %515 
                                       f32_4 %518 = OpLoad %9 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_2 %521 = OpExtInst %1 40 %519 %520 
                                                      OpStore %517 %521 
                                       f32_4 %522 = OpLoad %9 
                                       f32_4 %523 = OpVectorShuffle %522 %522 0 0 1 1 
                                       f32_4 %525 = OpFAdd %523 %524 
                                                      OpStore %163 %525 
                                       f32_2 %526 = OpLoad %517 
                                       f32_2 %527 = OpFNegate %526 
                                       f32_2 %528 = OpLoad %517 
                                       f32_2 %529 = OpFMul %527 %528 
                                       f32_4 %530 = OpLoad %163 
                                       f32_2 %531 = OpVectorShuffle %530 %530 1 3 
                                       f32_2 %532 = OpFAdd %529 %531 
                                                      OpStore %517 %532 
                                       f32_2 %533 = OpLoad %517 
                                       f32_2 %535 = OpFAdd %533 %534 
                                                      OpStore %517 %535 
                                       f32_2 %537 = OpLoad %517 
                                       f32_2 %540 = OpFMul %537 %539 
                                       f32_4 %541 = OpLoad %536 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 2 3 
                                                      OpStore %536 %542 
                                       f32_4 %543 = OpLoad %9 
                                       f32_2 %544 = OpVectorShuffle %543 %543 0 1 
                                       f32_2 %545 = OpFNegate %544 
                                       f32_2 %546 = OpFAdd %545 %534 
                                                      OpStore %517 %546 
                                       f32_2 %547 = OpLoad %517 
                                       f32_2 %548 = OpFMul %547 %539 
                                       f32_4 %549 = OpLoad %312 
                                       f32_4 %550 = OpVectorShuffle %549 %548 4 5 2 3 
                                                      OpStore %312 %550 
                                       f32_4 %552 = OpLoad %163 
                                       f32_4 %553 = OpVectorShuffle %552 %552 0 0 2 2 
                                       f32_4 %554 = OpLoad %163 
                                       f32_4 %555 = OpVectorShuffle %554 %554 0 0 2 2 
                                       f32_4 %556 = OpFMul %553 %555 
                                                      OpStore %551 %556 
                                       f32_4 %557 = OpLoad %163 
                                       f32_2 %558 = OpVectorShuffle %557 %557 1 3 
                                       f32_2 %559 = OpFMul %558 %539 
                                       f32_4 %560 = OpLoad %163 
                                       f32_4 %561 = OpVectorShuffle %560 %559 4 5 2 3 
                                                      OpStore %163 %561 
                                       f32_4 %562 = OpLoad %551 
                                       f32_2 %563 = OpVectorShuffle %562 %562 3 1 
                                       f32_2 %566 = OpFMul %563 %565 
                                       f32_4 %567 = OpLoad %312 
                                       f32_4 %568 = OpVectorShuffle %567 %566 0 1 4 5 
                                                      OpStore %312 %568 
                                       f32_4 %570 = OpLoad %551 
                                       f32_2 %571 = OpVectorShuffle %570 %570 0 2 
                                       f32_2 %572 = OpFMul %571 %495 
                                       f32_4 %573 = OpLoad %9 
                                       f32_2 %574 = OpVectorShuffle %573 %573 0 1 
                                       f32_2 %575 = OpFNegate %574 
                                       f32_2 %576 = OpFAdd %572 %575 
                                                      OpStore %569 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_2 %578 = OpVectorShuffle %577 %577 0 1 
                                       f32_2 %579 = OpExtInst %1 37 %578 %520 
                                       f32_4 %580 = OpLoad %9 
                                       f32_4 %581 = OpVectorShuffle %580 %579 4 5 2 3 
                                                      OpStore %9 %581 
                                       f32_4 %582 = OpLoad %9 
                                       f32_2 %583 = OpVectorShuffle %582 %582 0 1 
                                       f32_2 %584 = OpFNegate %583 
                                       f32_4 %585 = OpLoad %9 
                                       f32_2 %586 = OpVectorShuffle %585 %585 0 1 
                                       f32_2 %587 = OpFMul %584 %586 
                                       f32_2 %588 = OpLoad %517 
                                       f32_2 %589 = OpFAdd %587 %588 
                                       f32_4 %590 = OpLoad %9 
                                       f32_4 %591 = OpVectorShuffle %590 %589 4 5 2 3 
                                                      OpStore %9 %591 
                                       f32_4 %592 = OpLoad %9 
                                       f32_2 %593 = OpVectorShuffle %592 %592 0 1 
                                       f32_2 %594 = OpFAdd %593 %534 
                                       f32_4 %595 = OpLoad %9 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 2 3 
                                                      OpStore %9 %596 
                                       f32_4 %597 = OpLoad %9 
                                       f32_2 %598 = OpVectorShuffle %597 %597 0 1 
                                       f32_2 %599 = OpFMul %598 %539 
                                       f32_4 %600 = OpLoad %551 
                                       f32_4 %601 = OpVectorShuffle %600 %599 4 5 2 3 
                                                      OpStore %551 %601 
                                       f32_2 %603 = OpLoad %569 
                                       f32_2 %604 = OpFMul %603 %539 
                                       f32_4 %605 = OpLoad %602 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 2 3 
                                                      OpStore %602 %606 
                                       f32_4 %607 = OpLoad %312 
                                       f32_2 %608 = OpVectorShuffle %607 %607 1 2 
                                       f32_4 %609 = OpLoad %536 
                                       f32_4 %610 = OpVectorShuffle %609 %608 0 1 4 5 
                                                      OpStore %536 %610 
                                Private f32* %611 = OpAccessChain %602 %48 
                                         f32 %612 = OpLoad %611 
                                Private f32* %613 = OpAccessChain %551 %193 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %163 %48 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %551 %62 
                                                      OpStore %616 %615 
                                Private f32* %617 = OpAccessChain %163 %27 
                                         f32 %618 = OpLoad %617 
                                Private f32* %619 = OpAccessChain %602 %62 
                                                      OpStore %619 %618 
                                       f32_4 %620 = OpLoad %536 
                                       f32_3 %621 = OpVectorShuffle %620 %620 2 1 3 
                                       f32_4 %622 = OpLoad %551 
                                       f32_3 %623 = OpVectorShuffle %622 %622 2 1 3 
                                       f32_3 %624 = OpFAdd %621 %623 
                                       f32_4 %625 = OpLoad %9 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 5 2 6 
                                                      OpStore %9 %626 
                                Private f32* %627 = OpAccessChain %551 %27 
                                         f32 %628 = OpLoad %627 
                                Private f32* %629 = OpAccessChain %602 %193 
                                                      OpStore %629 %628 
                                       f32_4 %630 = OpLoad %536 
                                       f32_3 %631 = OpVectorShuffle %630 %630 2 1 3 
                                       f32_4 %632 = OpLoad %9 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 3 
                                       f32_3 %634 = OpFDiv %631 %633 
                                       f32_4 %635 = OpLoad %163 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 6 3 
                                                      OpStore %163 %636 
                                Private f32* %637 = OpAccessChain %536 %27 
                                         f32 %638 = OpLoad %637 
                                Private f32* %639 = OpAccessChain %312 %193 
                                                      OpStore %639 %638 
                                       f32_4 %640 = OpLoad %163 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %646 = OpFAdd %641 %645 
                                       f32_4 %647 = OpLoad %163 
                                       f32_4 %648 = OpVectorShuffle %647 %646 4 5 6 3 
                                                      OpStore %163 %648 
                                       f32_4 %649 = OpLoad %163 
                                       f32_3 %650 = OpVectorShuffle %649 %649 0 1 2 
                              Uniform f32_4* %651 = OpAccessChain %39 %293 
                                       f32_4 %652 = OpLoad %651 
                                       f32_3 %653 = OpVectorShuffle %652 %652 1 1 1 
                                       f32_3 %654 = OpFMul %650 %653 
                                       f32_4 %655 = OpLoad %163 
                                       f32_4 %656 = OpVectorShuffle %655 %654 4 5 6 3 
                                                      OpStore %163 %656 
                                Private f32* %657 = OpAccessChain %163 %27 
                                         f32 %658 = OpLoad %657 
                                Private f32* %659 = OpAccessChain %536 %62 
                                                      OpStore %659 %658 
                                       f32_4 %660 = OpLoad %312 
                                       f32_4 %661 = OpVectorShuffle %660 %660 2 3 0 2 
                                       f32_4 %662 = OpLoad %602 
                                       f32_4 %663 = OpVectorShuffle %662 %662 2 3 0 2 
                                       f32_4 %664 = OpFAdd %661 %663 
                                                      OpStore %551 %664 
                                       f32_4 %665 = OpLoad %312 
                                       f32_3 %666 = OpVectorShuffle %665 %665 0 2 3 
                                       f32_4 %667 = OpLoad %551 
                                       f32_3 %668 = OpVectorShuffle %667 %667 2 3 1 
                                       f32_3 %669 = OpFDiv %666 %668 
                                       f32_4 %670 = OpLoad %312 
                                       f32_4 %671 = OpVectorShuffle %670 %669 4 5 6 3 
                                                      OpStore %312 %671 
                                       f32_4 %672 = OpLoad %312 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 2 
                                       f32_3 %674 = OpFAdd %673 %645 
                                       f32_4 %675 = OpLoad %312 
                                       f32_4 %676 = OpVectorShuffle %675 %674 4 5 6 3 
                                                      OpStore %312 %676 
                                       f32_4 %677 = OpLoad %312 
                                       f32_3 %678 = OpVectorShuffle %677 %677 1 0 2 
                              Uniform f32_4* %679 = OpAccessChain %39 %293 
                                       f32_4 %680 = OpLoad %679 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 0 0 
                                       f32_3 %682 = OpFMul %678 %681 
                                       f32_4 %683 = OpLoad %536 
                                       f32_4 %684 = OpVectorShuffle %683 %682 4 5 6 3 
                                                      OpStore %536 %684 
                                       f32_4 %685 = OpLoad %74 
                                       f32_4 %686 = OpVectorShuffle %685 %685 0 1 0 1 
                              Uniform f32_4* %687 = OpAccessChain %39 %293 
                                       f32_4 %688 = OpLoad %687 
                                       f32_4 %689 = OpVectorShuffle %688 %688 0 1 0 1 
                                       f32_4 %690 = OpFMul %686 %689 
                                       f32_4 %691 = OpLoad %536 
                                       f32_4 %692 = OpVectorShuffle %691 %691 1 3 0 3 
                                       f32_4 %693 = OpFAdd %690 %692 
                                                      OpStore %312 %693 
                                       f32_4 %694 = OpLoad %74 
                                       f32_2 %695 = OpVectorShuffle %694 %694 0 1 
                              Uniform f32_4* %696 = OpAccessChain %39 %293 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 1 
                                       f32_2 %699 = OpFMul %695 %698 
                                       f32_4 %700 = OpLoad %536 
                                       f32_2 %701 = OpVectorShuffle %700 %700 2 3 
                                       f32_2 %702 = OpFAdd %699 %701 
                                                      OpStore %517 %702 
                                       f32_2 %705 = OpLoad %517 
                                         f32 %706 = OpLoad %55 
                                         f32 %707 = OpCompositeExtract %705 0 
                                         f32 %708 = OpCompositeExtract %705 1 
                                       f32_3 %709 = OpCompositeConstruct %707 %708 %706 
                                                      OpStore %704 %709 
                         read_only Texture2D %712 = OpLoad %711 
                                     sampler %714 = OpLoad %713 
                  read_only Texture2DSampled %717 = OpSampledImage %712 %714 
                                       f32_3 %718 = OpLoad %704 
                                         f32 %719 = OpCompositeExtract %718 2 
                                         f32 %720 = OpImageSampleDrefExplicitLod %717 %718 %719 Lod %6 
                                                      OpStore %710 %720 
                                       f32_4 %722 = OpLoad %312 
                                       f32_2 %723 = OpVectorShuffle %722 %722 0 1 
                                         f32 %724 = OpLoad %55 
                                         f32 %725 = OpCompositeExtract %723 0 
                                         f32 %726 = OpCompositeExtract %723 1 
                                       f32_3 %727 = OpCompositeConstruct %725 %726 %724 
                                                      OpStore %721 %727 
                         read_only Texture2D %729 = OpLoad %711 
                                     sampler %730 = OpLoad %713 
                  read_only Texture2DSampled %731 = OpSampledImage %729 %730 
                                       f32_3 %732 = OpLoad %721 
                                         f32 %733 = OpCompositeExtract %732 2 
                                         f32 %734 = OpImageSampleDrefExplicitLod %731 %732 %733 Lod %6 
                                                      OpStore %728 %734 
                                       f32_4 %736 = OpLoad %312 
                                       f32_2 %737 = OpVectorShuffle %736 %736 2 3 
                                         f32 %738 = OpLoad %55 
                                         f32 %739 = OpCompositeExtract %737 0 
                                         f32 %740 = OpCompositeExtract %737 1 
                                       f32_3 %741 = OpCompositeConstruct %739 %740 %738 
                                                      OpStore %735 %741 
                         read_only Texture2D %743 = OpLoad %711 
                                     sampler %744 = OpLoad %713 
                  read_only Texture2DSampled %745 = OpSampledImage %743 %744 
                                       f32_3 %746 = OpLoad %735 
                                         f32 %747 = OpCompositeExtract %746 2 
                                         f32 %748 = OpImageSampleDrefExplicitLod %745 %746 %747 Lod %6 
                                                      OpStore %742 %748 
                                       f32_4 %749 = OpLoad %9 
                                       f32_4 %750 = OpVectorShuffle %749 %749 0 0 0 1 
                                       f32_4 %751 = OpLoad %551 
                                       f32_4 %752 = OpVectorShuffle %751 %751 2 3 1 2 
                                       f32_4 %753 = OpFMul %750 %752 
                                                      OpStore %312 %753 
                                         f32 %754 = OpLoad %742 
                                Private f32* %755 = OpAccessChain %312 %48 
                                         f32 %756 = OpLoad %755 
                                         f32 %757 = OpFMul %754 %756 
                                Private f32* %758 = OpAccessChain %9 %27 
                                                      OpStore %758 %757 
                                Private f32* %759 = OpAccessChain %312 %27 
                                         f32 %760 = OpLoad %759 
                                         f32 %761 = OpLoad %728 
                                         f32 %762 = OpFMul %760 %761 
                                Private f32* %763 = OpAccessChain %9 %27 
                                         f32 %764 = OpLoad %763 
                                         f32 %765 = OpFAdd %762 %764 
                                Private f32* %766 = OpAccessChain %9 %27 
                                                      OpStore %766 %765 
                                Private f32* %767 = OpAccessChain %312 %193 
                                         f32 %768 = OpLoad %767 
                                         f32 %769 = OpLoad %710 
                                         f32 %770 = OpFMul %768 %769 
                                Private f32* %771 = OpAccessChain %9 %27 
                                         f32 %772 = OpLoad %771 
                                         f32 %773 = OpFAdd %770 %772 
                                Private f32* %774 = OpAccessChain %9 %27 
                                                      OpStore %774 %773 
                                Private f32* %775 = OpAccessChain %536 %48 
                                         f32 %776 = OpLoad %775 
                                Private f32* %777 = OpAccessChain %163 %62 
                                                      OpStore %777 %776 
                                       f32_4 %778 = OpLoad %74 
                                       f32_4 %779 = OpVectorShuffle %778 %778 0 1 0 1 
                              Uniform f32_4* %780 = OpAccessChain %39 %293 
                                       f32_4 %781 = OpLoad %780 
                                       f32_4 %782 = OpVectorShuffle %781 %781 0 1 0 1 
                                       f32_4 %783 = OpFMul %779 %782 
                                       f32_4 %784 = OpLoad %163 
                                       f32_4 %785 = OpVectorShuffle %784 %784 3 1 3 2 
                                       f32_4 %786 = OpFAdd %783 %785 
                                                      OpStore %602 %786 
                                       f32_4 %787 = OpLoad %163 
                                       f32_2 %788 = OpVectorShuffle %787 %787 1 2 
                                       f32_4 %789 = OpLoad %536 
                                       f32_4 %790 = OpVectorShuffle %789 %788 0 4 2 5 
                                                      OpStore %536 %790 
                                       f32_4 %792 = OpLoad %602 
                                       f32_2 %793 = OpVectorShuffle %792 %792 0 1 
                                         f32 %794 = OpLoad %55 
                                         f32 %795 = OpCompositeExtract %793 0 
                                         f32 %796 = OpCompositeExtract %793 1 
                                       f32_3 %797 = OpCompositeConstruct %795 %796 %794 
                                                      OpStore %791 %797 
                         read_only Texture2D %798 = OpLoad %711 
                                     sampler %799 = OpLoad %713 
                  read_only Texture2DSampled %800 = OpSampledImage %798 %799 
                                       f32_3 %801 = OpLoad %791 
                                         f32 %802 = OpCompositeExtract %801 2 
                                         f32 %803 = OpImageSampleDrefExplicitLod %800 %801 %802 Lod %6 
                                                      OpStore %710 %803 
                                       f32_4 %805 = OpLoad %602 
                                       f32_2 %806 = OpVectorShuffle %805 %805 2 3 
                                         f32 %807 = OpLoad %55 
                                         f32 %808 = OpCompositeExtract %806 0 
                                         f32 %809 = OpCompositeExtract %806 1 
                                       f32_3 %810 = OpCompositeConstruct %808 %809 %807 
                                                      OpStore %804 %810 
                         read_only Texture2D %811 = OpLoad %711 
                                     sampler %812 = OpLoad %713 
                  read_only Texture2DSampled %813 = OpSampledImage %811 %812 
                                       f32_3 %814 = OpLoad %804 
                                         f32 %815 = OpCompositeExtract %814 2 
                                         f32 %816 = OpImageSampleDrefExplicitLod %813 %814 %815 Lod %6 
                                                      OpStore %728 %816 
                                Private f32* %817 = OpAccessChain %312 %62 
                                         f32 %818 = OpLoad %817 
                                         f32 %819 = OpLoad %710 
                                         f32 %820 = OpFMul %818 %819 
                                Private f32* %821 = OpAccessChain %9 %27 
                                         f32 %822 = OpLoad %821 
                                         f32 %823 = OpFAdd %820 %822 
                                Private f32* %824 = OpAccessChain %9 %27 
                                                      OpStore %824 %823 
                                       f32_4 %825 = OpLoad %74 
                                       f32_4 %826 = OpVectorShuffle %825 %825 0 1 0 1 
                              Uniform f32_4* %827 = OpAccessChain %39 %293 
                                       f32_4 %828 = OpLoad %827 
                                       f32_4 %829 = OpVectorShuffle %828 %828 0 1 0 1 
                                       f32_4 %830 = OpFMul %826 %829 
                                       f32_4 %831 = OpLoad %536 
                                       f32_4 %832 = OpVectorShuffle %831 %831 0 1 2 1 
                                       f32_4 %833 = OpFAdd %830 %832 
                                                      OpStore %163 %833 
                                       f32_4 %834 = OpLoad %74 
                                       f32_4 %835 = OpVectorShuffle %834 %834 0 1 0 1 
                              Uniform f32_4* %836 = OpAccessChain %39 %293 
                                       f32_4 %837 = OpLoad %836 
                                       f32_4 %838 = OpVectorShuffle %837 %837 0 1 0 1 
                                       f32_4 %839 = OpFMul %835 %838 
                                       f32_4 %840 = OpLoad %536 
                                       f32_4 %841 = OpVectorShuffle %840 %840 0 3 2 3 
                                       f32_4 %842 = OpFAdd %839 %841 
                                                      OpStore %536 %842 
                                       f32_4 %844 = OpLoad %163 
                                       f32_2 %845 = OpVectorShuffle %844 %844 0 1 
                                         f32 %846 = OpLoad %55 
                                         f32 %847 = OpCompositeExtract %845 0 
                                         f32 %848 = OpCompositeExtract %845 1 
                                       f32_3 %849 = OpCompositeConstruct %847 %848 %846 
                                                      OpStore %843 %849 
                         read_only Texture2D %851 = OpLoad %711 
                                     sampler %852 = OpLoad %713 
                  read_only Texture2DSampled %853 = OpSampledImage %851 %852 
                                       f32_3 %854 = OpLoad %843 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                                      OpStore %850 %856 
                                       f32_4 %858 = OpLoad %163 
                                       f32_2 %859 = OpVectorShuffle %858 %858 2 3 
                                         f32 %860 = OpLoad %55 
                                         f32 %861 = OpCompositeExtract %859 0 
                                         f32 %862 = OpCompositeExtract %859 1 
                                       f32_3 %863 = OpCompositeConstruct %861 %862 %860 
                                                      OpStore %857 %863 
                         read_only Texture2D %865 = OpLoad %711 
                                     sampler %866 = OpLoad %713 
                  read_only Texture2DSampled %867 = OpSampledImage %865 %866 
                                       f32_3 %868 = OpLoad %857 
                                         f32 %869 = OpCompositeExtract %868 2 
                                         f32 %870 = OpImageSampleDrefExplicitLod %867 %868 %869 Lod %6 
                                                      OpStore %864 %870 
                                       f32_4 %871 = OpLoad %9 
                                       f32_4 %872 = OpVectorShuffle %871 %871 1 1 3 3 
                                       f32_4 %873 = OpLoad %551 
                                       f32_4 %874 = OpFMul %872 %873 
                                                      OpStore %163 %874 
                                Private f32* %875 = OpAccessChain %9 %62 
                                         f32 %876 = OpLoad %875 
                                Private f32* %877 = OpAccessChain %551 %48 
                                         f32 %878 = OpLoad %877 
                                         f32 %879 = OpFMul %876 %878 
                                                      OpStore %31 %879 
                                Private f32* %880 = OpAccessChain %163 %27 
                                         f32 %881 = OpLoad %880 
                                         f32 %882 = OpLoad %850 
                                         f32 %883 = OpFMul %881 %882 
                                Private f32* %884 = OpAccessChain %9 %27 
                                         f32 %885 = OpLoad %884 
                                         f32 %886 = OpFAdd %883 %885 
                                Private f32* %887 = OpAccessChain %9 %27 
                                                      OpStore %887 %886 
                                Private f32* %888 = OpAccessChain %163 %48 
                                         f32 %889 = OpLoad %888 
                                         f32 %890 = OpLoad %864 
                                         f32 %891 = OpFMul %889 %890 
                                Private f32* %892 = OpAccessChain %9 %27 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpFAdd %891 %893 
                                Private f32* %895 = OpAccessChain %9 %27 
                                                      OpStore %895 %894 
                                Private f32* %896 = OpAccessChain %163 %193 
                                         f32 %897 = OpLoad %896 
                                         f32 %898 = OpLoad %728 
                                         f32 %899 = OpFMul %897 %898 
                                Private f32* %900 = OpAccessChain %9 %27 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFAdd %899 %901 
                                Private f32* %903 = OpAccessChain %9 %27 
                                                      OpStore %903 %902 
                                       f32_4 %905 = OpLoad %536 
                                       f32_2 %906 = OpVectorShuffle %905 %905 0 1 
                                         f32 %907 = OpLoad %55 
                                         f32 %908 = OpCompositeExtract %906 0 
                                         f32 %909 = OpCompositeExtract %906 1 
                                       f32_3 %910 = OpCompositeConstruct %908 %909 %907 
                                                      OpStore %904 %910 
                         read_only Texture2D %912 = OpLoad %711 
                                     sampler %913 = OpLoad %713 
                  read_only Texture2DSampled %914 = OpSampledImage %912 %913 
                                       f32_3 %915 = OpLoad %904 
                                         f32 %916 = OpCompositeExtract %915 2 
                                         f32 %917 = OpImageSampleDrefExplicitLod %914 %915 %916 Lod %6 
                                                      OpStore %911 %917 
                                       f32_4 %919 = OpLoad %536 
                                       f32_2 %920 = OpVectorShuffle %919 %919 2 3 
                                         f32 %921 = OpLoad %55 
                                         f32 %922 = OpCompositeExtract %920 0 
                                         f32 %923 = OpCompositeExtract %920 1 
                                       f32_3 %924 = OpCompositeConstruct %922 %923 %921 
                                                      OpStore %918 %924 
                         read_only Texture2D %926 = OpLoad %711 
                                     sampler %927 = OpLoad %713 
                  read_only Texture2DSampled %928 = OpSampledImage %926 %927 
                                       f32_3 %929 = OpLoad %918 
                                         f32 %930 = OpCompositeExtract %929 2 
                                         f32 %931 = OpImageSampleDrefExplicitLod %928 %929 %930 Lod %6 
                                                      OpStore %925 %931 
                                Private f32* %932 = OpAccessChain %163 %62 
                                         f32 %933 = OpLoad %932 
                                         f32 %934 = OpLoad %911 
                                         f32 %935 = OpFMul %933 %934 
                                Private f32* %936 = OpAccessChain %9 %27 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFAdd %935 %937 
                                Private f32* %939 = OpAccessChain %9 %27 
                                                      OpStore %939 %938 
                                         f32 %940 = OpLoad %31 
                                         f32 %941 = OpLoad %925 
                                         f32 %942 = OpFMul %940 %941 
                                Private f32* %943 = OpAccessChain %9 %27 
                                         f32 %944 = OpLoad %943 
                                         f32 %945 = OpFAdd %942 %944 
                                Private f32* %946 = OpAccessChain %9 %27 
                                                      OpStore %946 %945 
                                Uniform f32* %947 = OpAccessChain %39 %281 %27 
                                         f32 %948 = OpLoad %947 
                                         f32 %949 = OpFNegate %948 
                                         f32 %950 = OpFAdd %949 %52 
                                                      OpStore %31 %950 
                                       f32_4 %951 = OpLoad %9 
                                       f32_4 %952 = OpVectorShuffle %951 %951 0 0 0 0 
                                         f32 %953 = OpLoad %31 
                                       f32_4 %954 = OpCompositeConstruct %953 %953 %953 %953 
                                       f32_4 %955 = OpFMul %952 %954 
                              Uniform f32_4* %956 = OpAccessChain %39 %281 
                                       f32_4 %957 = OpLoad %956 
                                       f32_4 %958 = OpVectorShuffle %957 %957 0 0 0 0 
                                       f32_4 %959 = OpFAdd %955 %958 
                                                      OpStore %9 %959 
                                       f32_4 %962 = OpLoad %9 
                                                      OpStore %961 %962 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 964
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %77 %80 %94 %961 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 RelaxedPrecision 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate vs_TEXCOORD3 Location 80 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %711 DescriptorSet 711 
                                                      OpDecorate %711 Binding 711 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %713 DescriptorSet 713 
                                                      OpDecorate %713 Binding 713 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %850 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %852 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %866 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %911 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %913 RelaxedPrecision 
                                                      OpDecorate %925 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %927 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %941 RelaxedPrecision 
                                                      OpDecorate %948 RelaxedPrecision 
                                                      OpDecorate %949 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %957 RelaxedPrecision 
                                                      OpDecorate %958 RelaxedPrecision 
                                                      OpDecorate %961 RelaxedPrecision 
                                                      OpDecorate %961 Location 961 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeArray %7 %32 
                                          u32 %35 = OpConstant 16 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeStruct %7 %7 %33 %34 %7 %36 %7 %7 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          u32 %48 = OpConstant 1 
                                          f32 %52 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %74 = OpVariable Private 
                                              %75 = OpTypeVector %6 3 
                                              %76 = OpTypePointer Input %75 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %111 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 2 
                                         i32 %144 = OpConstant 3 
                              Private f32_4* %163 = OpVariable Private 
                                         u32 %193 = OpConstant 2 
                                             %210 = OpTypeBool 
                                             %211 = OpTypeVector %210 4 
                                             %212 = OpTypePointer Private %211 
                             Private bool_4* %213 = OpVariable Private 
                                         i32 %215 = OpConstant 4 
                                             %219 = OpTypePointer Private %75 
                              Private f32_3* %220 = OpVariable Private 
                                             %221 = OpTypePointer Private %210 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         f32 %225 = OpConstant 3.674022E-40 
                                         f32 %238 = OpConstant 3.674022E-40 
                              Private f32_3* %257 = OpVariable Private 
                                       f32_3 %259 = OpConstantComposite %238 %238 %238 
                                         i32 %263 = OpConstant 5 
                                         i32 %281 = OpConstant 6 
                                         i32 %293 = OpConstant 7 
                              Private f32_4* %312 = OpVariable Private 
                                         i32 %366 = OpConstant 9 
                                         i32 %373 = OpConstant 8 
                                         i32 %385 = OpConstant 10 
                                         i32 %397 = OpConstant 11 
                                         i32 %421 = OpConstant 13 
                                         i32 %428 = OpConstant 12 
                                         i32 %440 = OpConstant 14 
                                         i32 %452 = OpConstant 15 
                                Private f32* %477 = OpVariable Private 
                                       f32_4 %479 = OpConstantComposite %52 %52 %52 %52 
                                         f32 %494 = OpConstant 3.674022E-40 
                                       f32_2 %495 = OpConstantComposite %494 %494 
                                             %516 = OpTypePointer Private %22 
                              Private f32_2* %517 = OpVariable Private 
                                       f32_2 %520 = OpConstantComposite %238 %238 
                                       f32_4 %524 = OpConstantComposite %494 %52 %494 %52 
                                       f32_2 %534 = OpConstantComposite %52 %52 
                              Private f32_4* %536 = OpVariable Private 
                                         f32 %538 = OpConstant 3.674022E-40 
                                       f32_2 %539 = OpConstantComposite %538 %538 
                              Private f32_4* %551 = OpVariable Private 
                                         f32 %564 = OpConstant 3.674022E-40 
                                       f32_2 %565 = OpConstantComposite %564 %564 
                              Private f32_2* %569 = OpVariable Private 
                              Private f32_4* %602 = OpVariable Private 
                                         f32 %642 = OpConstant 3.674022E-40 
                                         f32 %643 = OpConstant 3.674022E-40 
                                         f32 %644 = OpConstant 3.674022E-40 
                                       f32_3 %645 = OpConstantComposite %642 %643 %644 
                                             %703 = OpTypePointer Function %75 
                                Private f32* %710 = OpVariable Private 
        UniformConstant read_only Texture2D* %711 = OpVariable UniformConstant 
                    UniformConstant sampler* %713 = OpVariable UniformConstant 
                                             %715 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %716 = OpTypeSampledImage %715 
                                Private f32* %728 = OpVariable Private 
                                Private f32* %742 = OpVariable Private 
                                Private f32* %850 = OpVariable Private 
                                Private f32* %864 = OpVariable Private 
                                Private f32* %911 = OpVariable Private 
                                Private f32* %925 = OpVariable Private 
                                             %960 = OpTypePointer Output %7 
                               Output f32_4* %961 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %704 = OpVariable Function 
                             Function f32_3* %721 = OpVariable Function 
                             Function f32_3* %735 = OpVariable Function 
                             Function f32_3* %791 = OpVariable Function 
                             Function f32_3* %804 = OpVariable Function 
                             Function f32_3* %843 = OpVariable Function 
                             Function f32_3* %857 = OpVariable Function 
                             Function f32_3* %904 = OpVariable Function 
                             Function f32_3* %918 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %43 = OpAccessChain %39 %41 %27 
                                          f32 %44 = OpLoad %43 
                                 Private f32* %45 = OpAccessChain %9 %27 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Uniform f32* %49 = OpAccessChain %39 %41 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                                      OpStore %31 %51 
                                          f32 %53 = OpLoad %31 
                                          f32 %54 = OpFDiv %52 %53 
                                                      OpStore %31 %54 
                                          f32 %56 = OpLoad %31 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %39 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %55 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %31 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %31 %68 
                                 Private f32* %69 = OpAccessChain %9 %27 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                          f32 %72 = OpFAdd %71 %52 
                                 Private f32* %73 = OpAccessChain %9 %27 
                                                      OpStore %73 %72 
                                        f32_3 %78 = OpLoad vs_TEXCOORD2 
                                        f32_3 %79 = OpFNegate %78 
                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_4 %87 = OpLoad %74 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_3 %90 = OpLoad vs_TEXCOORD2 
                                        f32_3 %91 = OpFAdd %89 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 1 5 6 
                                                      OpStore %9 %93 
                                        f32_3 %95 = OpLoad vs_TEXCOORD1 
                                        f32_3 %96 = OpFNegate %95 
                                          f32 %97 = OpLoad %31 
                                        f32_3 %98 = OpCompositeConstruct %97 %97 %97 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 2 3 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 6 
                                                      OpStore %9 %104 
                                         f32 %105 = OpLoad %31 
                                       f32_3 %106 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD1 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %74 %110 
                              Uniform f32_4* %112 = OpAccessChain %39 %61 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 3 3 3 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 2 3 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %74 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %123 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %39 %125 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %124 %127 
                                                      OpStore %74 %128 
                              Uniform f32_4* %129 = OpAccessChain %39 %125 %41 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %74 %135 
                              Uniform f32_4* %136 = OpAccessChain %39 %125 %125 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %39 %125 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %143 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %39 %144 %41 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                       f32_4 %157 = OpLoad %74 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %74 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %158 %160 
                                Private f32* %162 = OpAccessChain %74 %27 
                                                      OpStore %162 %161 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                              Uniform f32_4* %166 = OpAccessChain %39 %144 %61 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %170 = OpFAdd %165 %169 
                                       f32_4 %171 = OpLoad %163 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %163 %172 
                                       f32_4 %173 = OpLoad %163 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_4 %175 = OpLoad %163 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %174 %176 
                                Private f32* %178 = OpAccessChain %74 %48 
                                                      OpStore %178 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                              Uniform f32_4* %181 = OpAccessChain %39 %144 %125 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFNegate %183 
                                       f32_3 %185 = OpFAdd %180 %184 
                                       f32_4 %186 = OpLoad %163 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %163 %187 
                                       f32_4 %188 = OpLoad %163 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %163 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %189 %191 
                                Private f32* %194 = OpAccessChain %74 %193 
                                                      OpStore %194 %192 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                              Uniform f32_4* %197 = OpAccessChain %39 %144 %144 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %196 %200 
                                       f32_4 %202 = OpLoad %163 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %163 %203 
                                       f32_4 %204 = OpLoad %163 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %163 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                Private f32* %209 = OpAccessChain %74 %62 
                                                      OpStore %209 %208 
                                       f32_4 %214 = OpLoad %74 
                              Uniform f32_4* %216 = OpAccessChain %39 %215 
                                       f32_4 %217 = OpLoad %216 
                                      bool_4 %218 = OpFOrdLessThan %214 %217 
                                                      OpStore %213 %218 
                               Private bool* %222 = OpAccessChain %213 %27 
                                        bool %223 = OpLoad %222 
                                         f32 %226 = OpSelect %223 %224 %225 
                                Private f32* %227 = OpAccessChain %220 %27 
                                                      OpStore %227 %226 
                               Private bool* %228 = OpAccessChain %213 %48 
                                        bool %229 = OpLoad %228 
                                         f32 %230 = OpSelect %229 %224 %225 
                                Private f32* %231 = OpAccessChain %220 %48 
                                                      OpStore %231 %230 
                               Private bool* %232 = OpAccessChain %213 %193 
                                        bool %233 = OpLoad %232 
                                         f32 %234 = OpSelect %233 %224 %225 
                                Private f32* %235 = OpAccessChain %220 %193 
                                                      OpStore %235 %234 
                               Private bool* %236 = OpAccessChain %213 %27 
                                        bool %237 = OpLoad %236 
                                         f32 %239 = OpSelect %237 %52 %238 
                                Private f32* %240 = OpAccessChain %74 %27 
                                                      OpStore %240 %239 
                               Private bool* %241 = OpAccessChain %213 %48 
                                        bool %242 = OpLoad %241 
                                         f32 %243 = OpSelect %242 %52 %238 
                                Private f32* %244 = OpAccessChain %74 %48 
                                                      OpStore %244 %243 
                               Private bool* %245 = OpAccessChain %213 %193 
                                        bool %246 = OpLoad %245 
                                         f32 %247 = OpSelect %246 %52 %238 
                                Private f32* %248 = OpAccessChain %74 %193 
                                                      OpStore %248 %247 
                               Private bool* %249 = OpAccessChain %213 %62 
                                        bool %250 = OpLoad %249 
                                         f32 %251 = OpSelect %250 %52 %238 
                                Private f32* %252 = OpAccessChain %74 %62 
                                                      OpStore %252 %251 
                                       f32_3 %253 = OpLoad %220 
                                       f32_4 %254 = OpLoad %74 
                                       f32_3 %255 = OpVectorShuffle %254 %254 1 2 3 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %220 %256 
                                       f32_3 %258 = OpLoad %220 
                                       f32_3 %260 = OpExtInst %1 40 %258 %259 
                                                      OpStore %257 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 1 1 1 
                              Uniform f32_4* %264 = OpAccessChain %39 %263 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %262 %266 
                                       f32_4 %268 = OpLoad %163 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %163 %269 
                              Uniform f32_4* %270 = OpAccessChain %39 %263 %215 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 0 0 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %163 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %163 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %163 %280 
                              Uniform f32_4* %282 = OpAccessChain %39 %263 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 2 2 2 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %163 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFAdd %287 %289 
                                       f32_4 %291 = OpLoad %163 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %163 %292 
                              Uniform f32_4* %294 = OpAccessChain %39 %263 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 3 3 3 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %163 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %163 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %163 %304 
                                       f32_3 %305 = OpLoad %257 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_4 %307 = OpLoad %163 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %163 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %163 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %39 %263 %61 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %314 %317 
                                       f32_4 %319 = OpLoad %312 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %312 %320 
                              Uniform f32_4* %321 = OpAccessChain %39 %263 %41 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %312 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %312 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %312 %331 
                              Uniform f32_4* %332 = OpAccessChain %39 %263 %125 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 2 2 2 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %312 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %312 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %312 %342 
                              Uniform f32_4* %343 = OpAccessChain %39 %263 %144 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_4 %346 = OpLoad %9 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_4 %349 = OpLoad %312 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFAdd %348 %350 
                                       f32_4 %352 = OpLoad %312 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %312 %353 
                                       f32_4 %354 = OpLoad %312 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %74 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 0 0 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %163 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %163 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %163 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 1 1 1 
                              Uniform f32_4* %367 = OpAccessChain %39 %263 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %365 %369 
                                       f32_4 %371 = OpLoad %312 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %312 %372 
                              Uniform f32_4* %374 = OpAccessChain %39 %263 %373 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_4 %377 = OpLoad %9 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                                       f32_4 %380 = OpLoad %312 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_3 %382 = OpFAdd %379 %381 
                                       f32_4 %383 = OpLoad %312 
                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
                                                      OpStore %312 %384 
                              Uniform f32_4* %386 = OpAccessChain %39 %263 %385 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 2 2 2 
                                       f32_3 %391 = OpFMul %388 %390 
                                       f32_4 %392 = OpLoad %312 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFAdd %391 %393 
                                       f32_4 %395 = OpLoad %312 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %312 %396 
                              Uniform f32_4* %398 = OpAccessChain %39 %263 %397 
                                       f32_4 %399 = OpLoad %398 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 3 3 3 
                                       f32_3 %403 = OpFMul %400 %402 
                                       f32_4 %404 = OpLoad %312 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpFAdd %403 %405 
                                       f32_4 %407 = OpLoad %312 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 6 3 
                                                      OpStore %312 %408 
                                       f32_4 %409 = OpLoad %312 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_3 %411 = OpLoad %257 
                                       f32_3 %412 = OpVectorShuffle %411 %411 1 1 1 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %163 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFAdd %413 %415 
                                       f32_4 %417 = OpLoad %163 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %163 %418 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 1 1 1 
                              Uniform f32_4* %422 = OpAccessChain %39 %263 %421 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFMul %420 %424 
                                       f32_4 %426 = OpLoad %312 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
                                                      OpStore %312 %427 
                              Uniform f32_4* %429 = OpAccessChain %39 %263 %428 
                                       f32_4 %430 = OpLoad %429 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_4 %432 = OpLoad %9 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 0 0 
                                       f32_3 %434 = OpFMul %431 %433 
                                       f32_4 %435 = OpLoad %312 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpFAdd %434 %436 
                                       f32_4 %438 = OpLoad %312 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %312 %439 
                              Uniform f32_4* %441 = OpAccessChain %39 %263 %440 
                                       f32_4 %442 = OpLoad %441 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_4 %444 = OpLoad %9 
                                       f32_3 %445 = OpVectorShuffle %444 %444 2 2 2 
                                       f32_3 %446 = OpFMul %443 %445 
                                       f32_4 %447 = OpLoad %312 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFAdd %446 %448 
                                       f32_4 %450 = OpLoad %9 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 6 3 
                                                      OpStore %9 %451 
                              Uniform f32_4* %453 = OpAccessChain %39 %263 %452 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_4 %456 = OpLoad %9 
                                       f32_3 %457 = OpVectorShuffle %456 %456 3 3 3 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_4 %459 = OpLoad %9 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %9 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %9 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %466 = OpLoad %257 
                                       f32_3 %467 = OpVectorShuffle %466 %466 2 2 2 
                                       f32_3 %468 = OpFMul %465 %467 
                                       f32_4 %469 = OpLoad %163 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFAdd %468 %470 
                                       f32_4 %472 = OpLoad %9 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %9 %473 
                                       f32_3 %474 = OpLoad %257 
                                       f32_4 %475 = OpLoad %74 
                                       f32_4 %476 = OpVectorShuffle %475 %474 0 4 5 6 
                                                      OpStore %74 %476 
                                       f32_4 %478 = OpLoad %74 
                                         f32 %480 = OpDot %478 %479 
                                                      OpStore %477 %480 
                                         f32 %481 = OpLoad %477 
                                         f32 %482 = OpFNegate %481 
                                Private f32* %483 = OpAccessChain %9 %193 
                                         f32 %484 = OpLoad %483 
                                         f32 %485 = OpFAdd %482 %484 
                                                      OpStore %55 %485 
                                         f32 %486 = OpLoad %55 
                                         f32 %487 = OpFAdd %486 %52 
                                                      OpStore %55 %487 
                                       f32_4 %488 = OpLoad %9 
                                       f32_2 %489 = OpVectorShuffle %488 %488 0 1 
                              Uniform f32_4* %490 = OpAccessChain %39 %293 
                                       f32_4 %491 = OpLoad %490 
                                       f32_2 %492 = OpVectorShuffle %491 %491 2 3 
                                       f32_2 %493 = OpFMul %489 %492 
                                       f32_2 %496 = OpFAdd %493 %495 
                                       f32_4 %497 = OpLoad %74 
                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 2 3 
                                                      OpStore %74 %498 
                                       f32_4 %499 = OpLoad %74 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_2 %501 = OpExtInst %1 8 %500 
                                       f32_4 %502 = OpLoad %74 
                                       f32_4 %503 = OpVectorShuffle %502 %501 4 5 2 3 
                                                      OpStore %74 %503 
                                       f32_4 %504 = OpLoad %9 
                                       f32_2 %505 = OpVectorShuffle %504 %504 0 1 
                              Uniform f32_4* %506 = OpAccessChain %39 %293 
                                       f32_4 %507 = OpLoad %506 
                                       f32_2 %508 = OpVectorShuffle %507 %507 2 3 
                                       f32_2 %509 = OpFMul %505 %508 
                                       f32_4 %510 = OpLoad %74 
                                       f32_2 %511 = OpVectorShuffle %510 %510 0 1 
                                       f32_2 %512 = OpFNegate %511 
                                       f32_2 %513 = OpFAdd %509 %512 
                                       f32_4 %514 = OpLoad %9 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 2 3 
                                                      OpStore %9 %515 
                                       f32_4 %518 = OpLoad %9 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_2 %521 = OpExtInst %1 40 %519 %520 
                                                      OpStore %517 %521 
                                       f32_4 %522 = OpLoad %9 
                                       f32_4 %523 = OpVectorShuffle %522 %522 0 0 1 1 
                                       f32_4 %525 = OpFAdd %523 %524 
                                                      OpStore %163 %525 
                                       f32_2 %526 = OpLoad %517 
                                       f32_2 %527 = OpFNegate %526 
                                       f32_2 %528 = OpLoad %517 
                                       f32_2 %529 = OpFMul %527 %528 
                                       f32_4 %530 = OpLoad %163 
                                       f32_2 %531 = OpVectorShuffle %530 %530 1 3 
                                       f32_2 %532 = OpFAdd %529 %531 
                                                      OpStore %517 %532 
                                       f32_2 %533 = OpLoad %517 
                                       f32_2 %535 = OpFAdd %533 %534 
                                                      OpStore %517 %535 
                                       f32_2 %537 = OpLoad %517 
                                       f32_2 %540 = OpFMul %537 %539 
                                       f32_4 %541 = OpLoad %536 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 2 3 
                                                      OpStore %536 %542 
                                       f32_4 %543 = OpLoad %9 
                                       f32_2 %544 = OpVectorShuffle %543 %543 0 1 
                                       f32_2 %545 = OpFNegate %544 
                                       f32_2 %546 = OpFAdd %545 %534 
                                                      OpStore %517 %546 
                                       f32_2 %547 = OpLoad %517 
                                       f32_2 %548 = OpFMul %547 %539 
                                       f32_4 %549 = OpLoad %312 
                                       f32_4 %550 = OpVectorShuffle %549 %548 4 5 2 3 
                                                      OpStore %312 %550 
                                       f32_4 %552 = OpLoad %163 
                                       f32_4 %553 = OpVectorShuffle %552 %552 0 0 2 2 
                                       f32_4 %554 = OpLoad %163 
                                       f32_4 %555 = OpVectorShuffle %554 %554 0 0 2 2 
                                       f32_4 %556 = OpFMul %553 %555 
                                                      OpStore %551 %556 
                                       f32_4 %557 = OpLoad %163 
                                       f32_2 %558 = OpVectorShuffle %557 %557 1 3 
                                       f32_2 %559 = OpFMul %558 %539 
                                       f32_4 %560 = OpLoad %163 
                                       f32_4 %561 = OpVectorShuffle %560 %559 4 5 2 3 
                                                      OpStore %163 %561 
                                       f32_4 %562 = OpLoad %551 
                                       f32_2 %563 = OpVectorShuffle %562 %562 3 1 
                                       f32_2 %566 = OpFMul %563 %565 
                                       f32_4 %567 = OpLoad %312 
                                       f32_4 %568 = OpVectorShuffle %567 %566 0 1 4 5 
                                                      OpStore %312 %568 
                                       f32_4 %570 = OpLoad %551 
                                       f32_2 %571 = OpVectorShuffle %570 %570 0 2 
                                       f32_2 %572 = OpFMul %571 %495 
                                       f32_4 %573 = OpLoad %9 
                                       f32_2 %574 = OpVectorShuffle %573 %573 0 1 
                                       f32_2 %575 = OpFNegate %574 
                                       f32_2 %576 = OpFAdd %572 %575 
                                                      OpStore %569 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_2 %578 = OpVectorShuffle %577 %577 0 1 
                                       f32_2 %579 = OpExtInst %1 37 %578 %520 
                                       f32_4 %580 = OpLoad %9 
                                       f32_4 %581 = OpVectorShuffle %580 %579 4 5 2 3 
                                                      OpStore %9 %581 
                                       f32_4 %582 = OpLoad %9 
                                       f32_2 %583 = OpVectorShuffle %582 %582 0 1 
                                       f32_2 %584 = OpFNegate %583 
                                       f32_4 %585 = OpLoad %9 
                                       f32_2 %586 = OpVectorShuffle %585 %585 0 1 
                                       f32_2 %587 = OpFMul %584 %586 
                                       f32_2 %588 = OpLoad %517 
                                       f32_2 %589 = OpFAdd %587 %588 
                                       f32_4 %590 = OpLoad %9 
                                       f32_4 %591 = OpVectorShuffle %590 %589 4 5 2 3 
                                                      OpStore %9 %591 
                                       f32_4 %592 = OpLoad %9 
                                       f32_2 %593 = OpVectorShuffle %592 %592 0 1 
                                       f32_2 %594 = OpFAdd %593 %534 
                                       f32_4 %595 = OpLoad %9 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 2 3 
                                                      OpStore %9 %596 
                                       f32_4 %597 = OpLoad %9 
                                       f32_2 %598 = OpVectorShuffle %597 %597 0 1 
                                       f32_2 %599 = OpFMul %598 %539 
                                       f32_4 %600 = OpLoad %551 
                                       f32_4 %601 = OpVectorShuffle %600 %599 4 5 2 3 
                                                      OpStore %551 %601 
                                       f32_2 %603 = OpLoad %569 
                                       f32_2 %604 = OpFMul %603 %539 
                                       f32_4 %605 = OpLoad %602 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 2 3 
                                                      OpStore %602 %606 
                                       f32_4 %607 = OpLoad %312 
                                       f32_2 %608 = OpVectorShuffle %607 %607 1 2 
                                       f32_4 %609 = OpLoad %536 
                                       f32_4 %610 = OpVectorShuffle %609 %608 0 1 4 5 
                                                      OpStore %536 %610 
                                Private f32* %611 = OpAccessChain %602 %48 
                                         f32 %612 = OpLoad %611 
                                Private f32* %613 = OpAccessChain %551 %193 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %163 %48 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %551 %62 
                                                      OpStore %616 %615 
                                Private f32* %617 = OpAccessChain %163 %27 
                                         f32 %618 = OpLoad %617 
                                Private f32* %619 = OpAccessChain %602 %62 
                                                      OpStore %619 %618 
                                       f32_4 %620 = OpLoad %536 
                                       f32_3 %621 = OpVectorShuffle %620 %620 2 1 3 
                                       f32_4 %622 = OpLoad %551 
                                       f32_3 %623 = OpVectorShuffle %622 %622 2 1 3 
                                       f32_3 %624 = OpFAdd %621 %623 
                                       f32_4 %625 = OpLoad %9 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 5 2 6 
                                                      OpStore %9 %626 
                                Private f32* %627 = OpAccessChain %551 %27 
                                         f32 %628 = OpLoad %627 
                                Private f32* %629 = OpAccessChain %602 %193 
                                                      OpStore %629 %628 
                                       f32_4 %630 = OpLoad %536 
                                       f32_3 %631 = OpVectorShuffle %630 %630 2 1 3 
                                       f32_4 %632 = OpLoad %9 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 3 
                                       f32_3 %634 = OpFDiv %631 %633 
                                       f32_4 %635 = OpLoad %163 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 6 3 
                                                      OpStore %163 %636 
                                Private f32* %637 = OpAccessChain %536 %27 
                                         f32 %638 = OpLoad %637 
                                Private f32* %639 = OpAccessChain %312 %193 
                                                      OpStore %639 %638 
                                       f32_4 %640 = OpLoad %163 
                                       f32_3 %641 = OpVectorShuffle %640 %640 0 1 2 
                                       f32_3 %646 = OpFAdd %641 %645 
                                       f32_4 %647 = OpLoad %163 
                                       f32_4 %648 = OpVectorShuffle %647 %646 4 5 6 3 
                                                      OpStore %163 %648 
                                       f32_4 %649 = OpLoad %163 
                                       f32_3 %650 = OpVectorShuffle %649 %649 0 1 2 
                              Uniform f32_4* %651 = OpAccessChain %39 %293 
                                       f32_4 %652 = OpLoad %651 
                                       f32_3 %653 = OpVectorShuffle %652 %652 1 1 1 
                                       f32_3 %654 = OpFMul %650 %653 
                                       f32_4 %655 = OpLoad %163 
                                       f32_4 %656 = OpVectorShuffle %655 %654 4 5 6 3 
                                                      OpStore %163 %656 
                                Private f32* %657 = OpAccessChain %163 %27 
                                         f32 %658 = OpLoad %657 
                                Private f32* %659 = OpAccessChain %536 %62 
                                                      OpStore %659 %658 
                                       f32_4 %660 = OpLoad %312 
                                       f32_4 %661 = OpVectorShuffle %660 %660 2 3 0 2 
                                       f32_4 %662 = OpLoad %602 
                                       f32_4 %663 = OpVectorShuffle %662 %662 2 3 0 2 
                                       f32_4 %664 = OpFAdd %661 %663 
                                                      OpStore %551 %664 
                                       f32_4 %665 = OpLoad %312 
                                       f32_3 %666 = OpVectorShuffle %665 %665 0 2 3 
                                       f32_4 %667 = OpLoad %551 
                                       f32_3 %668 = OpVectorShuffle %667 %667 2 3 1 
                                       f32_3 %669 = OpFDiv %666 %668 
                                       f32_4 %670 = OpLoad %312 
                                       f32_4 %671 = OpVectorShuffle %670 %669 4 5 6 3 
                                                      OpStore %312 %671 
                                       f32_4 %672 = OpLoad %312 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 2 
                                       f32_3 %674 = OpFAdd %673 %645 
                                       f32_4 %675 = OpLoad %312 
                                       f32_4 %676 = OpVectorShuffle %675 %674 4 5 6 3 
                                                      OpStore %312 %676 
                                       f32_4 %677 = OpLoad %312 
                                       f32_3 %678 = OpVectorShuffle %677 %677 1 0 2 
                              Uniform f32_4* %679 = OpAccessChain %39 %293 
                                       f32_4 %680 = OpLoad %679 
                                       f32_3 %681 = OpVectorShuffle %680 %680 0 0 0 
                                       f32_3 %682 = OpFMul %678 %681 
                                       f32_4 %683 = OpLoad %536 
                                       f32_4 %684 = OpVectorShuffle %683 %682 4 5 6 3 
                                                      OpStore %536 %684 
                                       f32_4 %685 = OpLoad %74 
                                       f32_4 %686 = OpVectorShuffle %685 %685 0 1 0 1 
                              Uniform f32_4* %687 = OpAccessChain %39 %293 
                                       f32_4 %688 = OpLoad %687 
                                       f32_4 %689 = OpVectorShuffle %688 %688 0 1 0 1 
                                       f32_4 %690 = OpFMul %686 %689 
                                       f32_4 %691 = OpLoad %536 
                                       f32_4 %692 = OpVectorShuffle %691 %691 1 3 0 3 
                                       f32_4 %693 = OpFAdd %690 %692 
                                                      OpStore %312 %693 
                                       f32_4 %694 = OpLoad %74 
                                       f32_2 %695 = OpVectorShuffle %694 %694 0 1 
                              Uniform f32_4* %696 = OpAccessChain %39 %293 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 0 1 
                                       f32_2 %699 = OpFMul %695 %698 
                                       f32_4 %700 = OpLoad %536 
                                       f32_2 %701 = OpVectorShuffle %700 %700 2 3 
                                       f32_2 %702 = OpFAdd %699 %701 
                                                      OpStore %517 %702 
                                       f32_2 %705 = OpLoad %517 
                                         f32 %706 = OpLoad %55 
                                         f32 %707 = OpCompositeExtract %705 0 
                                         f32 %708 = OpCompositeExtract %705 1 
                                       f32_3 %709 = OpCompositeConstruct %707 %708 %706 
                                                      OpStore %704 %709 
                         read_only Texture2D %712 = OpLoad %711 
                                     sampler %714 = OpLoad %713 
                  read_only Texture2DSampled %717 = OpSampledImage %712 %714 
                                       f32_3 %718 = OpLoad %704 
                                         f32 %719 = OpCompositeExtract %718 2 
                                         f32 %720 = OpImageSampleDrefExplicitLod %717 %718 %719 Lod %6 
                                                      OpStore %710 %720 
                                       f32_4 %722 = OpLoad %312 
                                       f32_2 %723 = OpVectorShuffle %722 %722 0 1 
                                         f32 %724 = OpLoad %55 
                                         f32 %725 = OpCompositeExtract %723 0 
                                         f32 %726 = OpCompositeExtract %723 1 
                                       f32_3 %727 = OpCompositeConstruct %725 %726 %724 
                                                      OpStore %721 %727 
                         read_only Texture2D %729 = OpLoad %711 
                                     sampler %730 = OpLoad %713 
                  read_only Texture2DSampled %731 = OpSampledImage %729 %730 
                                       f32_3 %732 = OpLoad %721 
                                         f32 %733 = OpCompositeExtract %732 2 
                                         f32 %734 = OpImageSampleDrefExplicitLod %731 %732 %733 Lod %6 
                                                      OpStore %728 %734 
                                       f32_4 %736 = OpLoad %312 
                                       f32_2 %737 = OpVectorShuffle %736 %736 2 3 
                                         f32 %738 = OpLoad %55 
                                         f32 %739 = OpCompositeExtract %737 0 
                                         f32 %740 = OpCompositeExtract %737 1 
                                       f32_3 %741 = OpCompositeConstruct %739 %740 %738 
                                                      OpStore %735 %741 
                         read_only Texture2D %743 = OpLoad %711 
                                     sampler %744 = OpLoad %713 
                  read_only Texture2DSampled %745 = OpSampledImage %743 %744 
                                       f32_3 %746 = OpLoad %735 
                                         f32 %747 = OpCompositeExtract %746 2 
                                         f32 %748 = OpImageSampleDrefExplicitLod %745 %746 %747 Lod %6 
                                                      OpStore %742 %748 
                                       f32_4 %749 = OpLoad %9 
                                       f32_4 %750 = OpVectorShuffle %749 %749 0 0 0 1 
                                       f32_4 %751 = OpLoad %551 
                                       f32_4 %752 = OpVectorShuffle %751 %751 2 3 1 2 
                                       f32_4 %753 = OpFMul %750 %752 
                                                      OpStore %312 %753 
                                         f32 %754 = OpLoad %742 
                                Private f32* %755 = OpAccessChain %312 %48 
                                         f32 %756 = OpLoad %755 
                                         f32 %757 = OpFMul %754 %756 
                                Private f32* %758 = OpAccessChain %9 %27 
                                                      OpStore %758 %757 
                                Private f32* %759 = OpAccessChain %312 %27 
                                         f32 %760 = OpLoad %759 
                                         f32 %761 = OpLoad %728 
                                         f32 %762 = OpFMul %760 %761 
                                Private f32* %763 = OpAccessChain %9 %27 
                                         f32 %764 = OpLoad %763 
                                         f32 %765 = OpFAdd %762 %764 
                                Private f32* %766 = OpAccessChain %9 %27 
                                                      OpStore %766 %765 
                                Private f32* %767 = OpAccessChain %312 %193 
                                         f32 %768 = OpLoad %767 
                                         f32 %769 = OpLoad %710 
                                         f32 %770 = OpFMul %768 %769 
                                Private f32* %771 = OpAccessChain %9 %27 
                                         f32 %772 = OpLoad %771 
                                         f32 %773 = OpFAdd %770 %772 
                                Private f32* %774 = OpAccessChain %9 %27 
                                                      OpStore %774 %773 
                                Private f32* %775 = OpAccessChain %536 %48 
                                         f32 %776 = OpLoad %775 
                                Private f32* %777 = OpAccessChain %163 %62 
                                                      OpStore %777 %776 
                                       f32_4 %778 = OpLoad %74 
                                       f32_4 %779 = OpVectorShuffle %778 %778 0 1 0 1 
                              Uniform f32_4* %780 = OpAccessChain %39 %293 
                                       f32_4 %781 = OpLoad %780 
                                       f32_4 %782 = OpVectorShuffle %781 %781 0 1 0 1 
                                       f32_4 %783 = OpFMul %779 %782 
                                       f32_4 %784 = OpLoad %163 
                                       f32_4 %785 = OpVectorShuffle %784 %784 3 1 3 2 
                                       f32_4 %786 = OpFAdd %783 %785 
                                                      OpStore %602 %786 
                                       f32_4 %787 = OpLoad %163 
                                       f32_2 %788 = OpVectorShuffle %787 %787 1 2 
                                       f32_4 %789 = OpLoad %536 
                                       f32_4 %790 = OpVectorShuffle %789 %788 0 4 2 5 
                                                      OpStore %536 %790 
                                       f32_4 %792 = OpLoad %602 
                                       f32_2 %793 = OpVectorShuffle %792 %792 0 1 
                                         f32 %794 = OpLoad %55 
                                         f32 %795 = OpCompositeExtract %793 0 
                                         f32 %796 = OpCompositeExtract %793 1 
                                       f32_3 %797 = OpCompositeConstruct %795 %796 %794 
                                                      OpStore %791 %797 
                         read_only Texture2D %798 = OpLoad %711 
                                     sampler %799 = OpLoad %713 
                  read_only Texture2DSampled %800 = OpSampledImage %798 %799 
                                       f32_3 %801 = OpLoad %791 
                                         f32 %802 = OpCompositeExtract %801 2 
                                         f32 %803 = OpImageSampleDrefExplicitLod %800 %801 %802 Lod %6 
                                                      OpStore %710 %803 
                                       f32_4 %805 = OpLoad %602 
                                       f32_2 %806 = OpVectorShuffle %805 %805 2 3 
                                         f32 %807 = OpLoad %55 
                                         f32 %808 = OpCompositeExtract %806 0 
                                         f32 %809 = OpCompositeExtract %806 1 
                                       f32_3 %810 = OpCompositeConstruct %808 %809 %807 
                                                      OpStore %804 %810 
                         read_only Texture2D %811 = OpLoad %711 
                                     sampler %812 = OpLoad %713 
                  read_only Texture2DSampled %813 = OpSampledImage %811 %812 
                                       f32_3 %814 = OpLoad %804 
                                         f32 %815 = OpCompositeExtract %814 2 
                                         f32 %816 = OpImageSampleDrefExplicitLod %813 %814 %815 Lod %6 
                                                      OpStore %728 %816 
                                Private f32* %817 = OpAccessChain %312 %62 
                                         f32 %818 = OpLoad %817 
                                         f32 %819 = OpLoad %710 
                                         f32 %820 = OpFMul %818 %819 
                                Private f32* %821 = OpAccessChain %9 %27 
                                         f32 %822 = OpLoad %821 
                                         f32 %823 = OpFAdd %820 %822 
                                Private f32* %824 = OpAccessChain %9 %27 
                                                      OpStore %824 %823 
                                       f32_4 %825 = OpLoad %74 
                                       f32_4 %826 = OpVectorShuffle %825 %825 0 1 0 1 
                              Uniform f32_4* %827 = OpAccessChain %39 %293 
                                       f32_4 %828 = OpLoad %827 
                                       f32_4 %829 = OpVectorShuffle %828 %828 0 1 0 1 
                                       f32_4 %830 = OpFMul %826 %829 
                                       f32_4 %831 = OpLoad %536 
                                       f32_4 %832 = OpVectorShuffle %831 %831 0 1 2 1 
                                       f32_4 %833 = OpFAdd %830 %832 
                                                      OpStore %163 %833 
                                       f32_4 %834 = OpLoad %74 
                                       f32_4 %835 = OpVectorShuffle %834 %834 0 1 0 1 
                              Uniform f32_4* %836 = OpAccessChain %39 %293 
                                       f32_4 %837 = OpLoad %836 
                                       f32_4 %838 = OpVectorShuffle %837 %837 0 1 0 1 
                                       f32_4 %839 = OpFMul %835 %838 
                                       f32_4 %840 = OpLoad %536 
                                       f32_4 %841 = OpVectorShuffle %840 %840 0 3 2 3 
                                       f32_4 %842 = OpFAdd %839 %841 
                                                      OpStore %536 %842 
                                       f32_4 %844 = OpLoad %163 
                                       f32_2 %845 = OpVectorShuffle %844 %844 0 1 
                                         f32 %846 = OpLoad %55 
                                         f32 %847 = OpCompositeExtract %845 0 
                                         f32 %848 = OpCompositeExtract %845 1 
                                       f32_3 %849 = OpCompositeConstruct %847 %848 %846 
                                                      OpStore %843 %849 
                         read_only Texture2D %851 = OpLoad %711 
                                     sampler %852 = OpLoad %713 
                  read_only Texture2DSampled %853 = OpSampledImage %851 %852 
                                       f32_3 %854 = OpLoad %843 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                                      OpStore %850 %856 
                                       f32_4 %858 = OpLoad %163 
                                       f32_2 %859 = OpVectorShuffle %858 %858 2 3 
                                         f32 %860 = OpLoad %55 
                                         f32 %861 = OpCompositeExtract %859 0 
                                         f32 %862 = OpCompositeExtract %859 1 
                                       f32_3 %863 = OpCompositeConstruct %861 %862 %860 
                                                      OpStore %857 %863 
                         read_only Texture2D %865 = OpLoad %711 
                                     sampler %866 = OpLoad %713 
                  read_only Texture2DSampled %867 = OpSampledImage %865 %866 
                                       f32_3 %868 = OpLoad %857 
                                         f32 %869 = OpCompositeExtract %868 2 
                                         f32 %870 = OpImageSampleDrefExplicitLod %867 %868 %869 Lod %6 
                                                      OpStore %864 %870 
                                       f32_4 %871 = OpLoad %9 
                                       f32_4 %872 = OpVectorShuffle %871 %871 1 1 3 3 
                                       f32_4 %873 = OpLoad %551 
                                       f32_4 %874 = OpFMul %872 %873 
                                                      OpStore %163 %874 
                                Private f32* %875 = OpAccessChain %9 %62 
                                         f32 %876 = OpLoad %875 
                                Private f32* %877 = OpAccessChain %551 %48 
                                         f32 %878 = OpLoad %877 
                                         f32 %879 = OpFMul %876 %878 
                                                      OpStore %31 %879 
                                Private f32* %880 = OpAccessChain %163 %27 
                                         f32 %881 = OpLoad %880 
                                         f32 %882 = OpLoad %850 
                                         f32 %883 = OpFMul %881 %882 
                                Private f32* %884 = OpAccessChain %9 %27 
                                         f32 %885 = OpLoad %884 
                                         f32 %886 = OpFAdd %883 %885 
                                Private f32* %887 = OpAccessChain %9 %27 
                                                      OpStore %887 %886 
                                Private f32* %888 = OpAccessChain %163 %48 
                                         f32 %889 = OpLoad %888 
                                         f32 %890 = OpLoad %864 
                                         f32 %891 = OpFMul %889 %890 
                                Private f32* %892 = OpAccessChain %9 %27 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpFAdd %891 %893 
                                Private f32* %895 = OpAccessChain %9 %27 
                                                      OpStore %895 %894 
                                Private f32* %896 = OpAccessChain %163 %193 
                                         f32 %897 = OpLoad %896 
                                         f32 %898 = OpLoad %728 
                                         f32 %899 = OpFMul %897 %898 
                                Private f32* %900 = OpAccessChain %9 %27 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFAdd %899 %901 
                                Private f32* %903 = OpAccessChain %9 %27 
                                                      OpStore %903 %902 
                                       f32_4 %905 = OpLoad %536 
                                       f32_2 %906 = OpVectorShuffle %905 %905 0 1 
                                         f32 %907 = OpLoad %55 
                                         f32 %908 = OpCompositeExtract %906 0 
                                         f32 %909 = OpCompositeExtract %906 1 
                                       f32_3 %910 = OpCompositeConstruct %908 %909 %907 
                                                      OpStore %904 %910 
                         read_only Texture2D %912 = OpLoad %711 
                                     sampler %913 = OpLoad %713 
                  read_only Texture2DSampled %914 = OpSampledImage %912 %913 
                                       f32_3 %915 = OpLoad %904 
                                         f32 %916 = OpCompositeExtract %915 2 
                                         f32 %917 = OpImageSampleDrefExplicitLod %914 %915 %916 Lod %6 
                                                      OpStore %911 %917 
                                       f32_4 %919 = OpLoad %536 
                                       f32_2 %920 = OpVectorShuffle %919 %919 2 3 
                                         f32 %921 = OpLoad %55 
                                         f32 %922 = OpCompositeExtract %920 0 
                                         f32 %923 = OpCompositeExtract %920 1 
                                       f32_3 %924 = OpCompositeConstruct %922 %923 %921 
                                                      OpStore %918 %924 
                         read_only Texture2D %926 = OpLoad %711 
                                     sampler %927 = OpLoad %713 
                  read_only Texture2DSampled %928 = OpSampledImage %926 %927 
                                       f32_3 %929 = OpLoad %918 
                                         f32 %930 = OpCompositeExtract %929 2 
                                         f32 %931 = OpImageSampleDrefExplicitLod %928 %929 %930 Lod %6 
                                                      OpStore %925 %931 
                                Private f32* %932 = OpAccessChain %163 %62 
                                         f32 %933 = OpLoad %932 
                                         f32 %934 = OpLoad %911 
                                         f32 %935 = OpFMul %933 %934 
                                Private f32* %936 = OpAccessChain %9 %27 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFAdd %935 %937 
                                Private f32* %939 = OpAccessChain %9 %27 
                                                      OpStore %939 %938 
                                         f32 %940 = OpLoad %31 
                                         f32 %941 = OpLoad %925 
                                         f32 %942 = OpFMul %940 %941 
                                Private f32* %943 = OpAccessChain %9 %27 
                                         f32 %944 = OpLoad %943 
                                         f32 %945 = OpFAdd %942 %944 
                                Private f32* %946 = OpAccessChain %9 %27 
                                                      OpStore %946 %945 
                                Uniform f32* %947 = OpAccessChain %39 %281 %27 
                                         f32 %948 = OpLoad %947 
                                         f32 %949 = OpFNegate %948 
                                         f32 %950 = OpFAdd %949 %52 
                                                      OpStore %31 %950 
                                       f32_4 %951 = OpLoad %9 
                                       f32_4 %952 = OpVectorShuffle %951 %951 0 0 0 0 
                                         f32 %953 = OpLoad %31 
                                       f32_4 %954 = OpCompositeConstruct %953 %953 %953 %953 
                                       f32_4 %955 = OpFMul %952 %954 
                              Uniform f32_4* %956 = OpAccessChain %39 %281 
                                       f32_4 %957 = OpLoad %956 
                                       f32_4 %958 = OpVectorShuffle %957 %957 0 0 0 0 
                                       f32_4 %959 = OpFAdd %955 %958 
                                                      OpStore %9 %959 
                                       f32_4 %962 = OpLoad %9 
                                                      OpStore %961 %962 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 673
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %670 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 DescriptorSet 413 
                                                      OpDecorate %413 Binding 413 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %670 Location 670 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                         i32 %190 = OpConstant 5 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_2 %196 = OpConstantComposite %195 %195 
                                             %217 = OpTypePointer Private %22 
                              Private f32_2* %218 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_2 %222 = OpConstantComposite %221 %221 
                              Private f32_4* %224 = OpVariable Private 
                                       f32_2 %228 = OpConstantComposite %51 %51 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_2 %242 = OpConstantComposite %241 %241 
                              Private f32_4* %248 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                       f32_4 %259 = OpConstantComposite %195 %51 %195 %51 
                              Private f32_4* %270 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_2 %296 = OpConstantComposite %295 %295 
                                         u32 %307 = OpConstant 2 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %341 %342 %343 
                                             %402 = OpTypePointer Function %74 
                                Private f32* %410 = OpVariable Private 
        UniformConstant read_only Texture2D* %411 = OpVariable UniformConstant 
                    UniformConstant sampler* %413 = OpVariable UniformConstant 
                                             %415 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %416 = OpTypeSampledImage %415 
                                Private f32* %429 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                Private f32* %555 = OpVariable Private 
                                Private f32* %570 = OpVariable Private 
                                Private f32* %618 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         i32 %655 = OpConstant 4 
                                             %669 = OpTypePointer Output %7 
                               Output f32_4* %670 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %403 = OpVariable Function 
                             Function f32_3* %421 = OpVariable Function 
                             Function f32_3* %436 = OpVariable Function 
                             Function f32_3* %493 = OpVariable Function 
                             Function f32_3* %507 = OpVariable Function 
                             Function f32_3* %547 = OpVariable Function 
                             Function f32_3* %562 = OpVariable Function 
                             Function f32_3* %610 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %9 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                              Uniform f32_4* %191 = OpAccessChain %38 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 2 3 
                                       f32_2 %194 = OpFMul %189 %193 
                                       f32_2 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %73 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %73 %199 
                                       f32_4 %200 = OpLoad %73 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpExtInst %1 8 %201 
                                       f32_4 %203 = OpLoad %73 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
                                                      OpStore %73 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %38 %190 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %73 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFNegate %212 
                                       f32_2 %214 = OpFAdd %210 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %9 %216 
                                       f32_4 %219 = OpLoad %9 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_2 %223 = OpExtInst %1 37 %220 %222 
                                                      OpStore %218 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFNegate %226 
                                       f32_2 %229 = OpFAdd %227 %228 
                                       f32_4 %230 = OpLoad %224 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %224 %231 
                                       f32_2 %232 = OpLoad %218 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %218 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %224 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %218 %238 
                                       f32_4 %239 = OpLoad %224 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %224 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %224 %245 
                                       f32_2 %246 = OpLoad %218 
                                       f32_2 %247 = OpFAdd %246 %228 
                                                      OpStore %218 %247 
                                       f32_2 %249 = OpLoad %218 
                                       f32_2 %250 = OpFMul %249 %242 
                                       f32_4 %251 = OpLoad %248 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %248 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpExtInst %1 40 %254 %222 
                                                      OpStore %218 %255 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 0 0 1 1 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %256 %260 
                                       f32_2 %261 = OpLoad %218 
                                       f32_2 %262 = OpFNegate %261 
                                       f32_2 %263 = OpLoad %218 
                                       f32_2 %264 = OpFMul %262 %263 
                                       f32_4 %265 = OpLoad %256 
                                       f32_2 %266 = OpVectorShuffle %265 %265 1 3 
                                       f32_2 %267 = OpFAdd %264 %266 
                                                      OpStore %218 %267 
                                       f32_2 %268 = OpLoad %218 
                                       f32_2 %269 = OpFAdd %268 %228 
                                                      OpStore %218 %269 
                                       f32_2 %271 = OpLoad %218 
                                       f32_2 %272 = OpFMul %271 %242 
                                       f32_4 %273 = OpLoad %270 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %270 %274 
                                       f32_4 %276 = OpLoad %256 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %275 %280 
                                       f32_4 %281 = OpLoad %256 
                                       f32_2 %282 = OpVectorShuffle %281 %281 1 3 
                                       f32_2 %283 = OpFMul %282 %242 
                                                      OpStore %218 %283 
                                       f32_4 %284 = OpLoad %275 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 2 
                                       f32_2 %286 = OpFMul %285 %196 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpFNegate %288 
                                       f32_2 %290 = OpFAdd %286 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 3 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %275 
                                       f32_2 %294 = OpVectorShuffle %293 %293 3 1 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %224 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %224 %299 
                                       f32_4 %300 = OpLoad %9 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFMul %301 %242 
                                       f32_4 %303 = OpLoad %256 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %256 %304 
                                Private f32* %305 = OpAccessChain %256 %47 
                                         f32 %306 = OpLoad %305 
                                Private f32* %308 = OpAccessChain %248 %307 
                                                      OpStore %308 %306 
                                Private f32* %309 = OpAccessChain %218 %47 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %248 %61 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %218 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %256 %61 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %224 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 2 
                                       f32_4 %317 = OpLoad %270 
                                       f32_4 %318 = OpVectorShuffle %317 %316 0 1 4 5 
                                                      OpStore %270 %318 
                                       f32_4 %319 = OpLoad %248 
                                       f32_3 %320 = OpVectorShuffle %319 %319 2 1 3 
                                       f32_4 %321 = OpLoad %270 
                                       f32_3 %322 = OpVectorShuffle %321 %321 2 1 3 
                                       f32_3 %323 = OpFAdd %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 2 6 
                                                      OpStore %9 %325 
                                Private f32* %326 = OpAccessChain %248 %27 
                                         f32 %327 = OpLoad %326 
                                Private f32* %328 = OpAccessChain %256 %307 
                                                      OpStore %328 %327 
                                       f32_4 %329 = OpLoad %270 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 1 3 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
                                       f32_3 %333 = OpFDiv %330 %332 
                                       f32_4 %334 = OpLoad %248 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %248 %335 
                                Private f32* %336 = OpAccessChain %270 %27 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %224 %307 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %248 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %345 = OpFAdd %340 %344 
                                       f32_4 %346 = OpLoad %248 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %248 %347 
                                       f32_4 %348 = OpLoad %248 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %38 %190 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 1 1 1 
                                       f32_3 %353 = OpFMul %349 %352 
                                       f32_4 %354 = OpLoad %248 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %248 %355 
                                Private f32* %356 = OpAccessChain %248 %27 
                                         f32 %357 = OpLoad %356 
                                Private f32* %358 = OpAccessChain %270 %61 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %224 
                                       f32_4 %360 = OpVectorShuffle %359 %359 2 3 0 2 
                                       f32_4 %361 = OpLoad %256 
                                       f32_4 %362 = OpVectorShuffle %361 %361 2 3 0 2 
                                       f32_4 %363 = OpFAdd %360 %362 
                                                      OpStore %256 %363 
                                       f32_4 %364 = OpLoad %224 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 2 3 
                                       f32_4 %366 = OpLoad %256 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 3 1 
                                       f32_3 %368 = OpFDiv %365 %367 
                                       f32_4 %369 = OpLoad %224 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %224 %370 
                                       f32_4 %371 = OpLoad %224 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %372 %344 
                                       f32_4 %374 = OpLoad %224 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %224 %375 
                                       f32_4 %376 = OpLoad %224 
                                       f32_3 %377 = OpVectorShuffle %376 %376 1 0 2 
                              Uniform f32_4* %378 = OpAccessChain %38 %190 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_3 %381 = OpFMul %377 %380 
                                       f32_4 %382 = OpLoad %270 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %270 %383 
                                       f32_4 %384 = OpLoad %73 
                                       f32_4 %385 = OpVectorShuffle %384 %384 0 1 0 1 
                              Uniform f32_4* %386 = OpAccessChain %38 %190 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpVectorShuffle %387 %387 0 1 0 1 
                                       f32_4 %389 = OpFMul %385 %388 
                                       f32_4 %390 = OpLoad %270 
                                       f32_4 %391 = OpVectorShuffle %390 %390 1 3 0 3 
                                       f32_4 %392 = OpFAdd %389 %391 
                                                      OpStore %224 %392 
                                       f32_4 %393 = OpLoad %73 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                              Uniform f32_4* %395 = OpAccessChain %38 %190 
                                       f32_4 %396 = OpLoad %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %270 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                       f32_2 %401 = OpFAdd %398 %400 
                                                      OpStore %218 %401 
                                       f32_2 %404 = OpLoad %218 
                                Private f32* %405 = OpAccessChain %9 %307 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpCompositeExtract %404 0 
                                         f32 %408 = OpCompositeExtract %404 1 
                                       f32_3 %409 = OpCompositeConstruct %407 %408 %406 
                                                      OpStore %403 %409 
                         read_only Texture2D %412 = OpLoad %411 
                                     sampler %414 = OpLoad %413 
                  read_only Texture2DSampled %417 = OpSampledImage %412 %414 
                                       f32_3 %418 = OpLoad %403 
                                         f32 %419 = OpCompositeExtract %418 2 
                                         f32 %420 = OpImageSampleDrefExplicitLod %417 %418 %419 Lod %6 
                                                      OpStore %410 %420 
                                       f32_4 %422 = OpLoad %224 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                Private f32* %424 = OpAccessChain %9 %307 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpCompositeExtract %423 0 
                                         f32 %427 = OpCompositeExtract %423 1 
                                       f32_3 %428 = OpCompositeConstruct %426 %427 %425 
                                                      OpStore %421 %428 
                         read_only Texture2D %430 = OpLoad %411 
                                     sampler %431 = OpLoad %413 
                  read_only Texture2DSampled %432 = OpSampledImage %430 %431 
                                       f32_3 %433 = OpLoad %421 
                                         f32 %434 = OpCompositeExtract %433 2 
                                         f32 %435 = OpImageSampleDrefExplicitLod %432 %433 %434 Lod %6 
                                                      OpStore %429 %435 
                                       f32_4 %437 = OpLoad %224 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                Private f32* %439 = OpAccessChain %9 %307 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpCompositeExtract %438 0 
                                         f32 %442 = OpCompositeExtract %438 1 
                                       f32_3 %443 = OpCompositeConstruct %441 %442 %440 
                                                      OpStore %436 %443 
                         read_only Texture2D %445 = OpLoad %411 
                                     sampler %446 = OpLoad %413 
                  read_only Texture2DSampled %447 = OpSampledImage %445 %446 
                                       f32_3 %448 = OpLoad %436 
                                         f32 %449 = OpCompositeExtract %448 2 
                                         f32 %450 = OpImageSampleDrefExplicitLod %447 %448 %449 Lod %6 
                                                      OpStore %444 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 1 
                                       f32_4 %453 = OpLoad %256 
                                       f32_4 %454 = OpVectorShuffle %453 %453 2 3 1 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %275 %455 
                                         f32 %456 = OpLoad %444 
                                Private f32* %457 = OpAccessChain %275 %47 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %9 %27 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %275 %27 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %429 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %27 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %464 %466 
                                Private f32* %468 = OpAccessChain %9 %27 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %275 %307 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %410 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %9 %27 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFAdd %472 %474 
                                Private f32* %476 = OpAccessChain %9 %27 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %270 %47 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %248 %61 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %73 
                                       f32_4 %481 = OpVectorShuffle %480 %480 0 1 0 1 
                              Uniform f32_4* %482 = OpAccessChain %38 %190 
                                       f32_4 %483 = OpLoad %482 
                                       f32_4 %484 = OpVectorShuffle %483 %483 0 1 0 1 
                                       f32_4 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %248 
                                       f32_4 %487 = OpVectorShuffle %486 %486 3 1 3 2 
                                       f32_4 %488 = OpFAdd %485 %487 
                                                      OpStore %224 %488 
                                       f32_4 %489 = OpLoad %248 
                                       f32_2 %490 = OpVectorShuffle %489 %489 1 2 
                                       f32_4 %491 = OpLoad %270 
                                       f32_4 %492 = OpVectorShuffle %491 %490 0 4 2 5 
                                                      OpStore %270 %492 
                                       f32_4 %494 = OpLoad %224 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                Private f32* %496 = OpAccessChain %9 %307 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpCompositeExtract %495 0 
                                         f32 %499 = OpCompositeExtract %495 1 
                                       f32_3 %500 = OpCompositeConstruct %498 %499 %497 
                                                      OpStore %493 %500 
                         read_only Texture2D %501 = OpLoad %411 
                                     sampler %502 = OpLoad %413 
                  read_only Texture2DSampled %503 = OpSampledImage %501 %502 
                                       f32_3 %504 = OpLoad %493 
                                         f32 %505 = OpCompositeExtract %504 2 
                                         f32 %506 = OpImageSampleDrefExplicitLod %503 %504 %505 Lod %6 
                                                      OpStore %410 %506 
                                       f32_4 %508 = OpLoad %224 
                                       f32_2 %509 = OpVectorShuffle %508 %508 2 3 
                                Private f32* %510 = OpAccessChain %9 %307 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpCompositeExtract %509 0 
                                         f32 %513 = OpCompositeExtract %509 1 
                                       f32_3 %514 = OpCompositeConstruct %512 %513 %511 
                                                      OpStore %507 %514 
                         read_only Texture2D %515 = OpLoad %411 
                                     sampler %516 = OpLoad %413 
                  read_only Texture2DSampled %517 = OpSampledImage %515 %516 
                                       f32_3 %518 = OpLoad %507 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %429 %520 
                                Private f32* %521 = OpAccessChain %275 %61 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %410 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %9 %27 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %27 
                                                      OpStore %528 %527 
                                       f32_4 %529 = OpLoad %73 
                                       f32_4 %530 = OpVectorShuffle %529 %529 0 1 0 1 
                              Uniform f32_4* %531 = OpAccessChain %38 %190 
                                       f32_4 %532 = OpLoad %531 
                                       f32_4 %533 = OpVectorShuffle %532 %532 0 1 0 1 
                                       f32_4 %534 = OpFMul %530 %533 
                                       f32_4 %535 = OpLoad %270 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 1 2 1 
                                       f32_4 %537 = OpFAdd %534 %536 
                                                      OpStore %224 %537 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %538 0 1 0 1 
                              Uniform f32_4* %540 = OpAccessChain %38 %190 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                                       f32_4 %543 = OpFMul %539 %542 
                                       f32_4 %544 = OpLoad %270 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 3 2 3 
                                       f32_4 %546 = OpFAdd %543 %545 
                                                      OpStore %248 %546 
                                       f32_4 %548 = OpLoad %224 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                Private f32* %550 = OpAccessChain %9 %307 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpCompositeExtract %549 0 
                                         f32 %553 = OpCompositeExtract %549 1 
                                       f32_3 %554 = OpCompositeConstruct %552 %553 %551 
                                                      OpStore %547 %554 
                         read_only Texture2D %556 = OpLoad %411 
                                     sampler %557 = OpLoad %413 
                  read_only Texture2DSampled %558 = OpSampledImage %556 %557 
                                       f32_3 %559 = OpLoad %547 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                                      OpStore %555 %561 
                                       f32_4 %563 = OpLoad %224 
                                       f32_2 %564 = OpVectorShuffle %563 %563 2 3 
                                Private f32* %565 = OpAccessChain %9 %307 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpCompositeExtract %564 0 
                                         f32 %568 = OpCompositeExtract %564 1 
                                       f32_3 %569 = OpCompositeConstruct %567 %568 %566 
                                                      OpStore %562 %569 
                         read_only Texture2D %571 = OpLoad %411 
                                     sampler %572 = OpLoad %413 
                  read_only Texture2DSampled %573 = OpSampledImage %571 %572 
                                       f32_3 %574 = OpLoad %562 
                                         f32 %575 = OpCompositeExtract %574 2 
                                         f32 %576 = OpImageSampleDrefExplicitLod %573 %574 %575 Lod %6 
                                                      OpStore %570 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_4 %578 = OpVectorShuffle %577 %577 1 1 3 3 
                                       f32_4 %579 = OpLoad %256 
                                       f32_4 %580 = OpFMul %578 %579 
                                                      OpStore %224 %580 
                                Private f32* %581 = OpAccessChain %9 %61 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %256 %47 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %31 %585 
                                Private f32* %586 = OpAccessChain %224 %27 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpLoad %555 
                                         f32 %589 = OpFMul %587 %588 
                                Private f32* %590 = OpAccessChain %9 %27 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFAdd %589 %591 
                                Private f32* %593 = OpAccessChain %9 %27 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %224 %47 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %570 
                                         f32 %597 = OpFMul %595 %596 
                                Private f32* %598 = OpAccessChain %9 %27 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                Private f32* %601 = OpAccessChain %9 %27 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %224 %307 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpLoad %429 
                                         f32 %605 = OpFMul %603 %604 
                                Private f32* %606 = OpAccessChain %9 %27 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpFAdd %605 %607 
                                Private f32* %609 = OpAccessChain %9 %27 
                                                      OpStore %609 %608 
                                       f32_4 %611 = OpLoad %248 
                                       f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                Private f32* %613 = OpAccessChain %9 %307 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpCompositeExtract %612 0 
                                         f32 %616 = OpCompositeExtract %612 1 
                                       f32_3 %617 = OpCompositeConstruct %615 %616 %614 
                                                      OpStore %610 %617 
                         read_only Texture2D %619 = OpLoad %411 
                                     sampler %620 = OpLoad %413 
                  read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                       f32_3 %622 = OpLoad %610 
                                         f32 %623 = OpCompositeExtract %622 2 
                                         f32 %624 = OpImageSampleDrefExplicitLod %621 %622 %623 Lod %6 
                                                      OpStore %618 %624 
                                       f32_4 %626 = OpLoad %248 
                                       f32_2 %627 = OpVectorShuffle %626 %626 2 3 
                                Private f32* %628 = OpAccessChain %9 %307 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpCompositeExtract %627 0 
                                         f32 %631 = OpCompositeExtract %627 1 
                                       f32_3 %632 = OpCompositeConstruct %630 %631 %629 
                                                      OpStore %625 %632 
                         read_only Texture2D %634 = OpLoad %411 
                                     sampler %635 = OpLoad %413 
                  read_only Texture2DSampled %636 = OpSampledImage %634 %635 
                                       f32_3 %637 = OpLoad %625 
                                         f32 %638 = OpCompositeExtract %637 2 
                                         f32 %639 = OpImageSampleDrefExplicitLod %636 %637 %638 Lod %6 
                                                      OpStore %633 %639 
                                Private f32* %640 = OpAccessChain %224 %61 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpLoad %618 
                                         f32 %643 = OpFMul %641 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                Private f32* %647 = OpAccessChain %9 %27 
                                                      OpStore %647 %646 
                                         f32 %648 = OpLoad %31 
                                         f32 %649 = OpLoad %633 
                                         f32 %650 = OpFMul %648 %649 
                                Private f32* %651 = OpAccessChain %9 %27 
                                         f32 %652 = OpLoad %651 
                                         f32 %653 = OpFAdd %650 %652 
                                Private f32* %654 = OpAccessChain %9 %27 
                                                      OpStore %654 %653 
                                Uniform f32* %656 = OpAccessChain %38 %655 %27 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFNegate %657 
                                         f32 %659 = OpFAdd %658 %51 
                                                      OpStore %31 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 0 
                                         f32 %662 = OpLoad %31 
                                       f32_4 %663 = OpCompositeConstruct %662 %662 %662 %662 
                                       f32_4 %664 = OpFMul %661 %663 
                              Uniform f32_4* %665 = OpAccessChain %38 %655 
                                       f32_4 %666 = OpLoad %665 
                                       f32_4 %667 = OpVectorShuffle %666 %666 0 0 0 0 
                                       f32_4 %668 = OpFAdd %664 %667 
                                                      OpStore %9 %668 
                                       f32_4 %671 = OpLoad %9 
                                                      OpStore %670 %671 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 673
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %670 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 DescriptorSet 413 
                                                      OpDecorate %413 Binding 413 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %670 Location 670 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                         i32 %190 = OpConstant 5 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_2 %196 = OpConstantComposite %195 %195 
                                             %217 = OpTypePointer Private %22 
                              Private f32_2* %218 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_2 %222 = OpConstantComposite %221 %221 
                              Private f32_4* %224 = OpVariable Private 
                                       f32_2 %228 = OpConstantComposite %51 %51 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_2 %242 = OpConstantComposite %241 %241 
                              Private f32_4* %248 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                       f32_4 %259 = OpConstantComposite %195 %51 %195 %51 
                              Private f32_4* %270 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_2 %296 = OpConstantComposite %295 %295 
                                         u32 %307 = OpConstant 2 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %341 %342 %343 
                                             %402 = OpTypePointer Function %74 
                                Private f32* %410 = OpVariable Private 
        UniformConstant read_only Texture2D* %411 = OpVariable UniformConstant 
                    UniformConstant sampler* %413 = OpVariable UniformConstant 
                                             %415 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %416 = OpTypeSampledImage %415 
                                Private f32* %429 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                Private f32* %555 = OpVariable Private 
                                Private f32* %570 = OpVariable Private 
                                Private f32* %618 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         i32 %655 = OpConstant 4 
                                             %669 = OpTypePointer Output %7 
                               Output f32_4* %670 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %403 = OpVariable Function 
                             Function f32_3* %421 = OpVariable Function 
                             Function f32_3* %436 = OpVariable Function 
                             Function f32_3* %493 = OpVariable Function 
                             Function f32_3* %507 = OpVariable Function 
                             Function f32_3* %547 = OpVariable Function 
                             Function f32_3* %562 = OpVariable Function 
                             Function f32_3* %610 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %9 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                              Uniform f32_4* %191 = OpAccessChain %38 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 2 3 
                                       f32_2 %194 = OpFMul %189 %193 
                                       f32_2 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %73 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %73 %199 
                                       f32_4 %200 = OpLoad %73 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpExtInst %1 8 %201 
                                       f32_4 %203 = OpLoad %73 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
                                                      OpStore %73 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %38 %190 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %73 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFNegate %212 
                                       f32_2 %214 = OpFAdd %210 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %9 %216 
                                       f32_4 %219 = OpLoad %9 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_2 %223 = OpExtInst %1 37 %220 %222 
                                                      OpStore %218 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFNegate %226 
                                       f32_2 %229 = OpFAdd %227 %228 
                                       f32_4 %230 = OpLoad %224 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %224 %231 
                                       f32_2 %232 = OpLoad %218 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %218 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %224 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %218 %238 
                                       f32_4 %239 = OpLoad %224 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %224 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %224 %245 
                                       f32_2 %246 = OpLoad %218 
                                       f32_2 %247 = OpFAdd %246 %228 
                                                      OpStore %218 %247 
                                       f32_2 %249 = OpLoad %218 
                                       f32_2 %250 = OpFMul %249 %242 
                                       f32_4 %251 = OpLoad %248 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %248 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpExtInst %1 40 %254 %222 
                                                      OpStore %218 %255 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 0 0 1 1 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %256 %260 
                                       f32_2 %261 = OpLoad %218 
                                       f32_2 %262 = OpFNegate %261 
                                       f32_2 %263 = OpLoad %218 
                                       f32_2 %264 = OpFMul %262 %263 
                                       f32_4 %265 = OpLoad %256 
                                       f32_2 %266 = OpVectorShuffle %265 %265 1 3 
                                       f32_2 %267 = OpFAdd %264 %266 
                                                      OpStore %218 %267 
                                       f32_2 %268 = OpLoad %218 
                                       f32_2 %269 = OpFAdd %268 %228 
                                                      OpStore %218 %269 
                                       f32_2 %271 = OpLoad %218 
                                       f32_2 %272 = OpFMul %271 %242 
                                       f32_4 %273 = OpLoad %270 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %270 %274 
                                       f32_4 %276 = OpLoad %256 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %275 %280 
                                       f32_4 %281 = OpLoad %256 
                                       f32_2 %282 = OpVectorShuffle %281 %281 1 3 
                                       f32_2 %283 = OpFMul %282 %242 
                                                      OpStore %218 %283 
                                       f32_4 %284 = OpLoad %275 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 2 
                                       f32_2 %286 = OpFMul %285 %196 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpFNegate %288 
                                       f32_2 %290 = OpFAdd %286 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 3 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %275 
                                       f32_2 %294 = OpVectorShuffle %293 %293 3 1 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %224 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %224 %299 
                                       f32_4 %300 = OpLoad %9 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFMul %301 %242 
                                       f32_4 %303 = OpLoad %256 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %256 %304 
                                Private f32* %305 = OpAccessChain %256 %47 
                                         f32 %306 = OpLoad %305 
                                Private f32* %308 = OpAccessChain %248 %307 
                                                      OpStore %308 %306 
                                Private f32* %309 = OpAccessChain %218 %47 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %248 %61 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %218 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %256 %61 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %224 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 2 
                                       f32_4 %317 = OpLoad %270 
                                       f32_4 %318 = OpVectorShuffle %317 %316 0 1 4 5 
                                                      OpStore %270 %318 
                                       f32_4 %319 = OpLoad %248 
                                       f32_3 %320 = OpVectorShuffle %319 %319 2 1 3 
                                       f32_4 %321 = OpLoad %270 
                                       f32_3 %322 = OpVectorShuffle %321 %321 2 1 3 
                                       f32_3 %323 = OpFAdd %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 2 6 
                                                      OpStore %9 %325 
                                Private f32* %326 = OpAccessChain %248 %27 
                                         f32 %327 = OpLoad %326 
                                Private f32* %328 = OpAccessChain %256 %307 
                                                      OpStore %328 %327 
                                       f32_4 %329 = OpLoad %270 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 1 3 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
                                       f32_3 %333 = OpFDiv %330 %332 
                                       f32_4 %334 = OpLoad %248 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %248 %335 
                                Private f32* %336 = OpAccessChain %270 %27 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %224 %307 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %248 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %345 = OpFAdd %340 %344 
                                       f32_4 %346 = OpLoad %248 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %248 %347 
                                       f32_4 %348 = OpLoad %248 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %38 %190 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 1 1 1 
                                       f32_3 %353 = OpFMul %349 %352 
                                       f32_4 %354 = OpLoad %248 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %248 %355 
                                Private f32* %356 = OpAccessChain %248 %27 
                                         f32 %357 = OpLoad %356 
                                Private f32* %358 = OpAccessChain %270 %61 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %224 
                                       f32_4 %360 = OpVectorShuffle %359 %359 2 3 0 2 
                                       f32_4 %361 = OpLoad %256 
                                       f32_4 %362 = OpVectorShuffle %361 %361 2 3 0 2 
                                       f32_4 %363 = OpFAdd %360 %362 
                                                      OpStore %256 %363 
                                       f32_4 %364 = OpLoad %224 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 2 3 
                                       f32_4 %366 = OpLoad %256 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 3 1 
                                       f32_3 %368 = OpFDiv %365 %367 
                                       f32_4 %369 = OpLoad %224 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %224 %370 
                                       f32_4 %371 = OpLoad %224 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %372 %344 
                                       f32_4 %374 = OpLoad %224 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %224 %375 
                                       f32_4 %376 = OpLoad %224 
                                       f32_3 %377 = OpVectorShuffle %376 %376 1 0 2 
                              Uniform f32_4* %378 = OpAccessChain %38 %190 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_3 %381 = OpFMul %377 %380 
                                       f32_4 %382 = OpLoad %270 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %270 %383 
                                       f32_4 %384 = OpLoad %73 
                                       f32_4 %385 = OpVectorShuffle %384 %384 0 1 0 1 
                              Uniform f32_4* %386 = OpAccessChain %38 %190 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpVectorShuffle %387 %387 0 1 0 1 
                                       f32_4 %389 = OpFMul %385 %388 
                                       f32_4 %390 = OpLoad %270 
                                       f32_4 %391 = OpVectorShuffle %390 %390 1 3 0 3 
                                       f32_4 %392 = OpFAdd %389 %391 
                                                      OpStore %224 %392 
                                       f32_4 %393 = OpLoad %73 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                              Uniform f32_4* %395 = OpAccessChain %38 %190 
                                       f32_4 %396 = OpLoad %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %270 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                       f32_2 %401 = OpFAdd %398 %400 
                                                      OpStore %218 %401 
                                       f32_2 %404 = OpLoad %218 
                                Private f32* %405 = OpAccessChain %9 %307 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpCompositeExtract %404 0 
                                         f32 %408 = OpCompositeExtract %404 1 
                                       f32_3 %409 = OpCompositeConstruct %407 %408 %406 
                                                      OpStore %403 %409 
                         read_only Texture2D %412 = OpLoad %411 
                                     sampler %414 = OpLoad %413 
                  read_only Texture2DSampled %417 = OpSampledImage %412 %414 
                                       f32_3 %418 = OpLoad %403 
                                         f32 %419 = OpCompositeExtract %418 2 
                                         f32 %420 = OpImageSampleDrefExplicitLod %417 %418 %419 Lod %6 
                                                      OpStore %410 %420 
                                       f32_4 %422 = OpLoad %224 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                Private f32* %424 = OpAccessChain %9 %307 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpCompositeExtract %423 0 
                                         f32 %427 = OpCompositeExtract %423 1 
                                       f32_3 %428 = OpCompositeConstruct %426 %427 %425 
                                                      OpStore %421 %428 
                         read_only Texture2D %430 = OpLoad %411 
                                     sampler %431 = OpLoad %413 
                  read_only Texture2DSampled %432 = OpSampledImage %430 %431 
                                       f32_3 %433 = OpLoad %421 
                                         f32 %434 = OpCompositeExtract %433 2 
                                         f32 %435 = OpImageSampleDrefExplicitLod %432 %433 %434 Lod %6 
                                                      OpStore %429 %435 
                                       f32_4 %437 = OpLoad %224 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                Private f32* %439 = OpAccessChain %9 %307 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpCompositeExtract %438 0 
                                         f32 %442 = OpCompositeExtract %438 1 
                                       f32_3 %443 = OpCompositeConstruct %441 %442 %440 
                                                      OpStore %436 %443 
                         read_only Texture2D %445 = OpLoad %411 
                                     sampler %446 = OpLoad %413 
                  read_only Texture2DSampled %447 = OpSampledImage %445 %446 
                                       f32_3 %448 = OpLoad %436 
                                         f32 %449 = OpCompositeExtract %448 2 
                                         f32 %450 = OpImageSampleDrefExplicitLod %447 %448 %449 Lod %6 
                                                      OpStore %444 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 1 
                                       f32_4 %453 = OpLoad %256 
                                       f32_4 %454 = OpVectorShuffle %453 %453 2 3 1 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %275 %455 
                                         f32 %456 = OpLoad %444 
                                Private f32* %457 = OpAccessChain %275 %47 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %9 %27 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %275 %27 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %429 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %27 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %464 %466 
                                Private f32* %468 = OpAccessChain %9 %27 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %275 %307 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %410 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %9 %27 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFAdd %472 %474 
                                Private f32* %476 = OpAccessChain %9 %27 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %270 %47 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %248 %61 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %73 
                                       f32_4 %481 = OpVectorShuffle %480 %480 0 1 0 1 
                              Uniform f32_4* %482 = OpAccessChain %38 %190 
                                       f32_4 %483 = OpLoad %482 
                                       f32_4 %484 = OpVectorShuffle %483 %483 0 1 0 1 
                                       f32_4 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %248 
                                       f32_4 %487 = OpVectorShuffle %486 %486 3 1 3 2 
                                       f32_4 %488 = OpFAdd %485 %487 
                                                      OpStore %224 %488 
                                       f32_4 %489 = OpLoad %248 
                                       f32_2 %490 = OpVectorShuffle %489 %489 1 2 
                                       f32_4 %491 = OpLoad %270 
                                       f32_4 %492 = OpVectorShuffle %491 %490 0 4 2 5 
                                                      OpStore %270 %492 
                                       f32_4 %494 = OpLoad %224 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                Private f32* %496 = OpAccessChain %9 %307 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpCompositeExtract %495 0 
                                         f32 %499 = OpCompositeExtract %495 1 
                                       f32_3 %500 = OpCompositeConstruct %498 %499 %497 
                                                      OpStore %493 %500 
                         read_only Texture2D %501 = OpLoad %411 
                                     sampler %502 = OpLoad %413 
                  read_only Texture2DSampled %503 = OpSampledImage %501 %502 
                                       f32_3 %504 = OpLoad %493 
                                         f32 %505 = OpCompositeExtract %504 2 
                                         f32 %506 = OpImageSampleDrefExplicitLod %503 %504 %505 Lod %6 
                                                      OpStore %410 %506 
                                       f32_4 %508 = OpLoad %224 
                                       f32_2 %509 = OpVectorShuffle %508 %508 2 3 
                                Private f32* %510 = OpAccessChain %9 %307 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpCompositeExtract %509 0 
                                         f32 %513 = OpCompositeExtract %509 1 
                                       f32_3 %514 = OpCompositeConstruct %512 %513 %511 
                                                      OpStore %507 %514 
                         read_only Texture2D %515 = OpLoad %411 
                                     sampler %516 = OpLoad %413 
                  read_only Texture2DSampled %517 = OpSampledImage %515 %516 
                                       f32_3 %518 = OpLoad %507 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %429 %520 
                                Private f32* %521 = OpAccessChain %275 %61 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %410 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %9 %27 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %27 
                                                      OpStore %528 %527 
                                       f32_4 %529 = OpLoad %73 
                                       f32_4 %530 = OpVectorShuffle %529 %529 0 1 0 1 
                              Uniform f32_4* %531 = OpAccessChain %38 %190 
                                       f32_4 %532 = OpLoad %531 
                                       f32_4 %533 = OpVectorShuffle %532 %532 0 1 0 1 
                                       f32_4 %534 = OpFMul %530 %533 
                                       f32_4 %535 = OpLoad %270 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 1 2 1 
                                       f32_4 %537 = OpFAdd %534 %536 
                                                      OpStore %224 %537 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %538 0 1 0 1 
                              Uniform f32_4* %540 = OpAccessChain %38 %190 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                                       f32_4 %543 = OpFMul %539 %542 
                                       f32_4 %544 = OpLoad %270 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 3 2 3 
                                       f32_4 %546 = OpFAdd %543 %545 
                                                      OpStore %248 %546 
                                       f32_4 %548 = OpLoad %224 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                Private f32* %550 = OpAccessChain %9 %307 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpCompositeExtract %549 0 
                                         f32 %553 = OpCompositeExtract %549 1 
                                       f32_3 %554 = OpCompositeConstruct %552 %553 %551 
                                                      OpStore %547 %554 
                         read_only Texture2D %556 = OpLoad %411 
                                     sampler %557 = OpLoad %413 
                  read_only Texture2DSampled %558 = OpSampledImage %556 %557 
                                       f32_3 %559 = OpLoad %547 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                                      OpStore %555 %561 
                                       f32_4 %563 = OpLoad %224 
                                       f32_2 %564 = OpVectorShuffle %563 %563 2 3 
                                Private f32* %565 = OpAccessChain %9 %307 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpCompositeExtract %564 0 
                                         f32 %568 = OpCompositeExtract %564 1 
                                       f32_3 %569 = OpCompositeConstruct %567 %568 %566 
                                                      OpStore %562 %569 
                         read_only Texture2D %571 = OpLoad %411 
                                     sampler %572 = OpLoad %413 
                  read_only Texture2DSampled %573 = OpSampledImage %571 %572 
                                       f32_3 %574 = OpLoad %562 
                                         f32 %575 = OpCompositeExtract %574 2 
                                         f32 %576 = OpImageSampleDrefExplicitLod %573 %574 %575 Lod %6 
                                                      OpStore %570 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_4 %578 = OpVectorShuffle %577 %577 1 1 3 3 
                                       f32_4 %579 = OpLoad %256 
                                       f32_4 %580 = OpFMul %578 %579 
                                                      OpStore %224 %580 
                                Private f32* %581 = OpAccessChain %9 %61 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %256 %47 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %31 %585 
                                Private f32* %586 = OpAccessChain %224 %27 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpLoad %555 
                                         f32 %589 = OpFMul %587 %588 
                                Private f32* %590 = OpAccessChain %9 %27 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFAdd %589 %591 
                                Private f32* %593 = OpAccessChain %9 %27 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %224 %47 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %570 
                                         f32 %597 = OpFMul %595 %596 
                                Private f32* %598 = OpAccessChain %9 %27 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                Private f32* %601 = OpAccessChain %9 %27 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %224 %307 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpLoad %429 
                                         f32 %605 = OpFMul %603 %604 
                                Private f32* %606 = OpAccessChain %9 %27 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpFAdd %605 %607 
                                Private f32* %609 = OpAccessChain %9 %27 
                                                      OpStore %609 %608 
                                       f32_4 %611 = OpLoad %248 
                                       f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                Private f32* %613 = OpAccessChain %9 %307 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpCompositeExtract %612 0 
                                         f32 %616 = OpCompositeExtract %612 1 
                                       f32_3 %617 = OpCompositeConstruct %615 %616 %614 
                                                      OpStore %610 %617 
                         read_only Texture2D %619 = OpLoad %411 
                                     sampler %620 = OpLoad %413 
                  read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                       f32_3 %622 = OpLoad %610 
                                         f32 %623 = OpCompositeExtract %622 2 
                                         f32 %624 = OpImageSampleDrefExplicitLod %621 %622 %623 Lod %6 
                                                      OpStore %618 %624 
                                       f32_4 %626 = OpLoad %248 
                                       f32_2 %627 = OpVectorShuffle %626 %626 2 3 
                                Private f32* %628 = OpAccessChain %9 %307 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpCompositeExtract %627 0 
                                         f32 %631 = OpCompositeExtract %627 1 
                                       f32_3 %632 = OpCompositeConstruct %630 %631 %629 
                                                      OpStore %625 %632 
                         read_only Texture2D %634 = OpLoad %411 
                                     sampler %635 = OpLoad %413 
                  read_only Texture2DSampled %636 = OpSampledImage %634 %635 
                                       f32_3 %637 = OpLoad %625 
                                         f32 %638 = OpCompositeExtract %637 2 
                                         f32 %639 = OpImageSampleDrefExplicitLod %636 %637 %638 Lod %6 
                                                      OpStore %633 %639 
                                Private f32* %640 = OpAccessChain %224 %61 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpLoad %618 
                                         f32 %643 = OpFMul %641 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                Private f32* %647 = OpAccessChain %9 %27 
                                                      OpStore %647 %646 
                                         f32 %648 = OpLoad %31 
                                         f32 %649 = OpLoad %633 
                                         f32 %650 = OpFMul %648 %649 
                                Private f32* %651 = OpAccessChain %9 %27 
                                         f32 %652 = OpLoad %651 
                                         f32 %653 = OpFAdd %650 %652 
                                Private f32* %654 = OpAccessChain %9 %27 
                                                      OpStore %654 %653 
                                Uniform f32* %656 = OpAccessChain %38 %655 %27 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFNegate %657 
                                         f32 %659 = OpFAdd %658 %51 
                                                      OpStore %31 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 0 
                                         f32 %662 = OpLoad %31 
                                       f32_4 %663 = OpCompositeConstruct %662 %662 %662 %662 
                                       f32_4 %664 = OpFMul %661 %663 
                              Uniform f32_4* %665 = OpAccessChain %38 %655 
                                       f32_4 %666 = OpLoad %665 
                                       f32_4 %667 = OpVectorShuffle %666 %666 0 0 0 0 
                                       f32_4 %668 = OpFAdd %664 %667 
                                                      OpStore %9 %668 
                                       f32_4 %671 = OpLoad %9 
                                                      OpStore %670 %671 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 673
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %670 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 DescriptorSet 413 
                                                      OpDecorate %413 Binding 413 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %670 Location 670 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                         i32 %190 = OpConstant 5 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_2 %196 = OpConstantComposite %195 %195 
                                             %217 = OpTypePointer Private %22 
                              Private f32_2* %218 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_2 %222 = OpConstantComposite %221 %221 
                              Private f32_4* %224 = OpVariable Private 
                                       f32_2 %228 = OpConstantComposite %51 %51 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_2 %242 = OpConstantComposite %241 %241 
                              Private f32_4* %248 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                       f32_4 %259 = OpConstantComposite %195 %51 %195 %51 
                              Private f32_4* %270 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_2 %296 = OpConstantComposite %295 %295 
                                         u32 %307 = OpConstant 2 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %341 %342 %343 
                                             %402 = OpTypePointer Function %74 
                                Private f32* %410 = OpVariable Private 
        UniformConstant read_only Texture2D* %411 = OpVariable UniformConstant 
                    UniformConstant sampler* %413 = OpVariable UniformConstant 
                                             %415 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %416 = OpTypeSampledImage %415 
                                Private f32* %429 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                Private f32* %555 = OpVariable Private 
                                Private f32* %570 = OpVariable Private 
                                Private f32* %618 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         i32 %655 = OpConstant 4 
                                             %669 = OpTypePointer Output %7 
                               Output f32_4* %670 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %403 = OpVariable Function 
                             Function f32_3* %421 = OpVariable Function 
                             Function f32_3* %436 = OpVariable Function 
                             Function f32_3* %493 = OpVariable Function 
                             Function f32_3* %507 = OpVariable Function 
                             Function f32_3* %547 = OpVariable Function 
                             Function f32_3* %562 = OpVariable Function 
                             Function f32_3* %610 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %9 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                              Uniform f32_4* %191 = OpAccessChain %38 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 2 3 
                                       f32_2 %194 = OpFMul %189 %193 
                                       f32_2 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %73 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %73 %199 
                                       f32_4 %200 = OpLoad %73 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpExtInst %1 8 %201 
                                       f32_4 %203 = OpLoad %73 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
                                                      OpStore %73 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %38 %190 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %73 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFNegate %212 
                                       f32_2 %214 = OpFAdd %210 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %9 %216 
                                       f32_4 %219 = OpLoad %9 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_2 %223 = OpExtInst %1 37 %220 %222 
                                                      OpStore %218 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFNegate %226 
                                       f32_2 %229 = OpFAdd %227 %228 
                                       f32_4 %230 = OpLoad %224 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %224 %231 
                                       f32_2 %232 = OpLoad %218 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %218 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %224 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %218 %238 
                                       f32_4 %239 = OpLoad %224 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %224 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %224 %245 
                                       f32_2 %246 = OpLoad %218 
                                       f32_2 %247 = OpFAdd %246 %228 
                                                      OpStore %218 %247 
                                       f32_2 %249 = OpLoad %218 
                                       f32_2 %250 = OpFMul %249 %242 
                                       f32_4 %251 = OpLoad %248 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %248 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpExtInst %1 40 %254 %222 
                                                      OpStore %218 %255 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 0 0 1 1 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %256 %260 
                                       f32_2 %261 = OpLoad %218 
                                       f32_2 %262 = OpFNegate %261 
                                       f32_2 %263 = OpLoad %218 
                                       f32_2 %264 = OpFMul %262 %263 
                                       f32_4 %265 = OpLoad %256 
                                       f32_2 %266 = OpVectorShuffle %265 %265 1 3 
                                       f32_2 %267 = OpFAdd %264 %266 
                                                      OpStore %218 %267 
                                       f32_2 %268 = OpLoad %218 
                                       f32_2 %269 = OpFAdd %268 %228 
                                                      OpStore %218 %269 
                                       f32_2 %271 = OpLoad %218 
                                       f32_2 %272 = OpFMul %271 %242 
                                       f32_4 %273 = OpLoad %270 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %270 %274 
                                       f32_4 %276 = OpLoad %256 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %275 %280 
                                       f32_4 %281 = OpLoad %256 
                                       f32_2 %282 = OpVectorShuffle %281 %281 1 3 
                                       f32_2 %283 = OpFMul %282 %242 
                                                      OpStore %218 %283 
                                       f32_4 %284 = OpLoad %275 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 2 
                                       f32_2 %286 = OpFMul %285 %196 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpFNegate %288 
                                       f32_2 %290 = OpFAdd %286 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 3 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %275 
                                       f32_2 %294 = OpVectorShuffle %293 %293 3 1 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %224 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %224 %299 
                                       f32_4 %300 = OpLoad %9 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFMul %301 %242 
                                       f32_4 %303 = OpLoad %256 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %256 %304 
                                Private f32* %305 = OpAccessChain %256 %47 
                                         f32 %306 = OpLoad %305 
                                Private f32* %308 = OpAccessChain %248 %307 
                                                      OpStore %308 %306 
                                Private f32* %309 = OpAccessChain %218 %47 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %248 %61 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %218 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %256 %61 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %224 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 2 
                                       f32_4 %317 = OpLoad %270 
                                       f32_4 %318 = OpVectorShuffle %317 %316 0 1 4 5 
                                                      OpStore %270 %318 
                                       f32_4 %319 = OpLoad %248 
                                       f32_3 %320 = OpVectorShuffle %319 %319 2 1 3 
                                       f32_4 %321 = OpLoad %270 
                                       f32_3 %322 = OpVectorShuffle %321 %321 2 1 3 
                                       f32_3 %323 = OpFAdd %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 2 6 
                                                      OpStore %9 %325 
                                Private f32* %326 = OpAccessChain %248 %27 
                                         f32 %327 = OpLoad %326 
                                Private f32* %328 = OpAccessChain %256 %307 
                                                      OpStore %328 %327 
                                       f32_4 %329 = OpLoad %270 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 1 3 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
                                       f32_3 %333 = OpFDiv %330 %332 
                                       f32_4 %334 = OpLoad %248 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %248 %335 
                                Private f32* %336 = OpAccessChain %270 %27 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %224 %307 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %248 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %345 = OpFAdd %340 %344 
                                       f32_4 %346 = OpLoad %248 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %248 %347 
                                       f32_4 %348 = OpLoad %248 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %38 %190 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 1 1 1 
                                       f32_3 %353 = OpFMul %349 %352 
                                       f32_4 %354 = OpLoad %248 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %248 %355 
                                Private f32* %356 = OpAccessChain %248 %27 
                                         f32 %357 = OpLoad %356 
                                Private f32* %358 = OpAccessChain %270 %61 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %224 
                                       f32_4 %360 = OpVectorShuffle %359 %359 2 3 0 2 
                                       f32_4 %361 = OpLoad %256 
                                       f32_4 %362 = OpVectorShuffle %361 %361 2 3 0 2 
                                       f32_4 %363 = OpFAdd %360 %362 
                                                      OpStore %256 %363 
                                       f32_4 %364 = OpLoad %224 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 2 3 
                                       f32_4 %366 = OpLoad %256 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 3 1 
                                       f32_3 %368 = OpFDiv %365 %367 
                                       f32_4 %369 = OpLoad %224 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %224 %370 
                                       f32_4 %371 = OpLoad %224 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %372 %344 
                                       f32_4 %374 = OpLoad %224 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %224 %375 
                                       f32_4 %376 = OpLoad %224 
                                       f32_3 %377 = OpVectorShuffle %376 %376 1 0 2 
                              Uniform f32_4* %378 = OpAccessChain %38 %190 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_3 %381 = OpFMul %377 %380 
                                       f32_4 %382 = OpLoad %270 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %270 %383 
                                       f32_4 %384 = OpLoad %73 
                                       f32_4 %385 = OpVectorShuffle %384 %384 0 1 0 1 
                              Uniform f32_4* %386 = OpAccessChain %38 %190 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpVectorShuffle %387 %387 0 1 0 1 
                                       f32_4 %389 = OpFMul %385 %388 
                                       f32_4 %390 = OpLoad %270 
                                       f32_4 %391 = OpVectorShuffle %390 %390 1 3 0 3 
                                       f32_4 %392 = OpFAdd %389 %391 
                                                      OpStore %224 %392 
                                       f32_4 %393 = OpLoad %73 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                              Uniform f32_4* %395 = OpAccessChain %38 %190 
                                       f32_4 %396 = OpLoad %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %270 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                       f32_2 %401 = OpFAdd %398 %400 
                                                      OpStore %218 %401 
                                       f32_2 %404 = OpLoad %218 
                                Private f32* %405 = OpAccessChain %9 %307 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpCompositeExtract %404 0 
                                         f32 %408 = OpCompositeExtract %404 1 
                                       f32_3 %409 = OpCompositeConstruct %407 %408 %406 
                                                      OpStore %403 %409 
                         read_only Texture2D %412 = OpLoad %411 
                                     sampler %414 = OpLoad %413 
                  read_only Texture2DSampled %417 = OpSampledImage %412 %414 
                                       f32_3 %418 = OpLoad %403 
                                         f32 %419 = OpCompositeExtract %418 2 
                                         f32 %420 = OpImageSampleDrefExplicitLod %417 %418 %419 Lod %6 
                                                      OpStore %410 %420 
                                       f32_4 %422 = OpLoad %224 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                Private f32* %424 = OpAccessChain %9 %307 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpCompositeExtract %423 0 
                                         f32 %427 = OpCompositeExtract %423 1 
                                       f32_3 %428 = OpCompositeConstruct %426 %427 %425 
                                                      OpStore %421 %428 
                         read_only Texture2D %430 = OpLoad %411 
                                     sampler %431 = OpLoad %413 
                  read_only Texture2DSampled %432 = OpSampledImage %430 %431 
                                       f32_3 %433 = OpLoad %421 
                                         f32 %434 = OpCompositeExtract %433 2 
                                         f32 %435 = OpImageSampleDrefExplicitLod %432 %433 %434 Lod %6 
                                                      OpStore %429 %435 
                                       f32_4 %437 = OpLoad %224 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                Private f32* %439 = OpAccessChain %9 %307 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpCompositeExtract %438 0 
                                         f32 %442 = OpCompositeExtract %438 1 
                                       f32_3 %443 = OpCompositeConstruct %441 %442 %440 
                                                      OpStore %436 %443 
                         read_only Texture2D %445 = OpLoad %411 
                                     sampler %446 = OpLoad %413 
                  read_only Texture2DSampled %447 = OpSampledImage %445 %446 
                                       f32_3 %448 = OpLoad %436 
                                         f32 %449 = OpCompositeExtract %448 2 
                                         f32 %450 = OpImageSampleDrefExplicitLod %447 %448 %449 Lod %6 
                                                      OpStore %444 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 1 
                                       f32_4 %453 = OpLoad %256 
                                       f32_4 %454 = OpVectorShuffle %453 %453 2 3 1 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %275 %455 
                                         f32 %456 = OpLoad %444 
                                Private f32* %457 = OpAccessChain %275 %47 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %9 %27 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %275 %27 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %429 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %27 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %464 %466 
                                Private f32* %468 = OpAccessChain %9 %27 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %275 %307 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %410 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %9 %27 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFAdd %472 %474 
                                Private f32* %476 = OpAccessChain %9 %27 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %270 %47 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %248 %61 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %73 
                                       f32_4 %481 = OpVectorShuffle %480 %480 0 1 0 1 
                              Uniform f32_4* %482 = OpAccessChain %38 %190 
                                       f32_4 %483 = OpLoad %482 
                                       f32_4 %484 = OpVectorShuffle %483 %483 0 1 0 1 
                                       f32_4 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %248 
                                       f32_4 %487 = OpVectorShuffle %486 %486 3 1 3 2 
                                       f32_4 %488 = OpFAdd %485 %487 
                                                      OpStore %224 %488 
                                       f32_4 %489 = OpLoad %248 
                                       f32_2 %490 = OpVectorShuffle %489 %489 1 2 
                                       f32_4 %491 = OpLoad %270 
                                       f32_4 %492 = OpVectorShuffle %491 %490 0 4 2 5 
                                                      OpStore %270 %492 
                                       f32_4 %494 = OpLoad %224 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                Private f32* %496 = OpAccessChain %9 %307 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpCompositeExtract %495 0 
                                         f32 %499 = OpCompositeExtract %495 1 
                                       f32_3 %500 = OpCompositeConstruct %498 %499 %497 
                                                      OpStore %493 %500 
                         read_only Texture2D %501 = OpLoad %411 
                                     sampler %502 = OpLoad %413 
                  read_only Texture2DSampled %503 = OpSampledImage %501 %502 
                                       f32_3 %504 = OpLoad %493 
                                         f32 %505 = OpCompositeExtract %504 2 
                                         f32 %506 = OpImageSampleDrefExplicitLod %503 %504 %505 Lod %6 
                                                      OpStore %410 %506 
                                       f32_4 %508 = OpLoad %224 
                                       f32_2 %509 = OpVectorShuffle %508 %508 2 3 
                                Private f32* %510 = OpAccessChain %9 %307 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpCompositeExtract %509 0 
                                         f32 %513 = OpCompositeExtract %509 1 
                                       f32_3 %514 = OpCompositeConstruct %512 %513 %511 
                                                      OpStore %507 %514 
                         read_only Texture2D %515 = OpLoad %411 
                                     sampler %516 = OpLoad %413 
                  read_only Texture2DSampled %517 = OpSampledImage %515 %516 
                                       f32_3 %518 = OpLoad %507 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %429 %520 
                                Private f32* %521 = OpAccessChain %275 %61 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %410 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %9 %27 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %27 
                                                      OpStore %528 %527 
                                       f32_4 %529 = OpLoad %73 
                                       f32_4 %530 = OpVectorShuffle %529 %529 0 1 0 1 
                              Uniform f32_4* %531 = OpAccessChain %38 %190 
                                       f32_4 %532 = OpLoad %531 
                                       f32_4 %533 = OpVectorShuffle %532 %532 0 1 0 1 
                                       f32_4 %534 = OpFMul %530 %533 
                                       f32_4 %535 = OpLoad %270 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 1 2 1 
                                       f32_4 %537 = OpFAdd %534 %536 
                                                      OpStore %224 %537 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %538 0 1 0 1 
                              Uniform f32_4* %540 = OpAccessChain %38 %190 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                                       f32_4 %543 = OpFMul %539 %542 
                                       f32_4 %544 = OpLoad %270 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 3 2 3 
                                       f32_4 %546 = OpFAdd %543 %545 
                                                      OpStore %248 %546 
                                       f32_4 %548 = OpLoad %224 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                Private f32* %550 = OpAccessChain %9 %307 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpCompositeExtract %549 0 
                                         f32 %553 = OpCompositeExtract %549 1 
                                       f32_3 %554 = OpCompositeConstruct %552 %553 %551 
                                                      OpStore %547 %554 
                         read_only Texture2D %556 = OpLoad %411 
                                     sampler %557 = OpLoad %413 
                  read_only Texture2DSampled %558 = OpSampledImage %556 %557 
                                       f32_3 %559 = OpLoad %547 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                                      OpStore %555 %561 
                                       f32_4 %563 = OpLoad %224 
                                       f32_2 %564 = OpVectorShuffle %563 %563 2 3 
                                Private f32* %565 = OpAccessChain %9 %307 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpCompositeExtract %564 0 
                                         f32 %568 = OpCompositeExtract %564 1 
                                       f32_3 %569 = OpCompositeConstruct %567 %568 %566 
                                                      OpStore %562 %569 
                         read_only Texture2D %571 = OpLoad %411 
                                     sampler %572 = OpLoad %413 
                  read_only Texture2DSampled %573 = OpSampledImage %571 %572 
                                       f32_3 %574 = OpLoad %562 
                                         f32 %575 = OpCompositeExtract %574 2 
                                         f32 %576 = OpImageSampleDrefExplicitLod %573 %574 %575 Lod %6 
                                                      OpStore %570 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_4 %578 = OpVectorShuffle %577 %577 1 1 3 3 
                                       f32_4 %579 = OpLoad %256 
                                       f32_4 %580 = OpFMul %578 %579 
                                                      OpStore %224 %580 
                                Private f32* %581 = OpAccessChain %9 %61 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %256 %47 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %31 %585 
                                Private f32* %586 = OpAccessChain %224 %27 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpLoad %555 
                                         f32 %589 = OpFMul %587 %588 
                                Private f32* %590 = OpAccessChain %9 %27 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFAdd %589 %591 
                                Private f32* %593 = OpAccessChain %9 %27 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %224 %47 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %570 
                                         f32 %597 = OpFMul %595 %596 
                                Private f32* %598 = OpAccessChain %9 %27 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                Private f32* %601 = OpAccessChain %9 %27 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %224 %307 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpLoad %429 
                                         f32 %605 = OpFMul %603 %604 
                                Private f32* %606 = OpAccessChain %9 %27 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpFAdd %605 %607 
                                Private f32* %609 = OpAccessChain %9 %27 
                                                      OpStore %609 %608 
                                       f32_4 %611 = OpLoad %248 
                                       f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                Private f32* %613 = OpAccessChain %9 %307 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpCompositeExtract %612 0 
                                         f32 %616 = OpCompositeExtract %612 1 
                                       f32_3 %617 = OpCompositeConstruct %615 %616 %614 
                                                      OpStore %610 %617 
                         read_only Texture2D %619 = OpLoad %411 
                                     sampler %620 = OpLoad %413 
                  read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                       f32_3 %622 = OpLoad %610 
                                         f32 %623 = OpCompositeExtract %622 2 
                                         f32 %624 = OpImageSampleDrefExplicitLod %621 %622 %623 Lod %6 
                                                      OpStore %618 %624 
                                       f32_4 %626 = OpLoad %248 
                                       f32_2 %627 = OpVectorShuffle %626 %626 2 3 
                                Private f32* %628 = OpAccessChain %9 %307 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpCompositeExtract %627 0 
                                         f32 %631 = OpCompositeExtract %627 1 
                                       f32_3 %632 = OpCompositeConstruct %630 %631 %629 
                                                      OpStore %625 %632 
                         read_only Texture2D %634 = OpLoad %411 
                                     sampler %635 = OpLoad %413 
                  read_only Texture2DSampled %636 = OpSampledImage %634 %635 
                                       f32_3 %637 = OpLoad %625 
                                         f32 %638 = OpCompositeExtract %637 2 
                                         f32 %639 = OpImageSampleDrefExplicitLod %636 %637 %638 Lod %6 
                                                      OpStore %633 %639 
                                Private f32* %640 = OpAccessChain %224 %61 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpLoad %618 
                                         f32 %643 = OpFMul %641 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                Private f32* %647 = OpAccessChain %9 %27 
                                                      OpStore %647 %646 
                                         f32 %648 = OpLoad %31 
                                         f32 %649 = OpLoad %633 
                                         f32 %650 = OpFMul %648 %649 
                                Private f32* %651 = OpAccessChain %9 %27 
                                         f32 %652 = OpLoad %651 
                                         f32 %653 = OpFAdd %650 %652 
                                Private f32* %654 = OpAccessChain %9 %27 
                                                      OpStore %654 %653 
                                Uniform f32* %656 = OpAccessChain %38 %655 %27 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFNegate %657 
                                         f32 %659 = OpFAdd %658 %51 
                                                      OpStore %31 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 0 
                                         f32 %662 = OpLoad %31 
                                       f32_4 %663 = OpCompositeConstruct %662 %662 %662 %662 
                                       f32_4 %664 = OpFMul %661 %663 
                              Uniform f32_4* %665 = OpAccessChain %38 %655 
                                       f32_4 %666 = OpLoad %665 
                                       f32_4 %667 = OpVectorShuffle %666 %666 0 0 0 0 
                                       f32_4 %668 = OpFAdd %664 %667 
                                                      OpStore %9 %668 
                                       f32_4 %671 = OpLoad %9 
                                                      OpStore %670 %671 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat14;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat7 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat7 = float(1.0) / u_xlat7;
    u_xlat14 = (-u_xlat7) + u_xlat0.x;
    u_xlat7 = unity_OrthoParams.w * u_xlat14 + u_xlat7;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat7) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat7) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 673
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %670 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 DescriptorSet 413 
                                                      OpDecorate %413 Binding 413 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %670 Location 670 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                         i32 %190 = OpConstant 5 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_2 %196 = OpConstantComposite %195 %195 
                                             %217 = OpTypePointer Private %22 
                              Private f32_2* %218 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_2 %222 = OpConstantComposite %221 %221 
                              Private f32_4* %224 = OpVariable Private 
                                       f32_2 %228 = OpConstantComposite %51 %51 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_2 %242 = OpConstantComposite %241 %241 
                              Private f32_4* %248 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                       f32_4 %259 = OpConstantComposite %195 %51 %195 %51 
                              Private f32_4* %270 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_2 %296 = OpConstantComposite %295 %295 
                                         u32 %307 = OpConstant 2 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %341 %342 %343 
                                             %402 = OpTypePointer Function %74 
                                Private f32* %410 = OpVariable Private 
        UniformConstant read_only Texture2D* %411 = OpVariable UniformConstant 
                    UniformConstant sampler* %413 = OpVariable UniformConstant 
                                             %415 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %416 = OpTypeSampledImage %415 
                                Private f32* %429 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                Private f32* %555 = OpVariable Private 
                                Private f32* %570 = OpVariable Private 
                                Private f32* %618 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         i32 %655 = OpConstant 4 
                                             %669 = OpTypePointer Output %7 
                               Output f32_4* %670 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %403 = OpVariable Function 
                             Function f32_3* %421 = OpVariable Function 
                             Function f32_3* %436 = OpVariable Function 
                             Function f32_3* %493 = OpVariable Function 
                             Function f32_3* %507 = OpVariable Function 
                             Function f32_3* %547 = OpVariable Function 
                             Function f32_3* %562 = OpVariable Function 
                             Function f32_3* %610 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %9 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                              Uniform f32_4* %191 = OpAccessChain %38 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 2 3 
                                       f32_2 %194 = OpFMul %189 %193 
                                       f32_2 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %73 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %73 %199 
                                       f32_4 %200 = OpLoad %73 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpExtInst %1 8 %201 
                                       f32_4 %203 = OpLoad %73 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
                                                      OpStore %73 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %38 %190 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %73 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFNegate %212 
                                       f32_2 %214 = OpFAdd %210 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %9 %216 
                                       f32_4 %219 = OpLoad %9 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_2 %223 = OpExtInst %1 37 %220 %222 
                                                      OpStore %218 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFNegate %226 
                                       f32_2 %229 = OpFAdd %227 %228 
                                       f32_4 %230 = OpLoad %224 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %224 %231 
                                       f32_2 %232 = OpLoad %218 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %218 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %224 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %218 %238 
                                       f32_4 %239 = OpLoad %224 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %224 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %224 %245 
                                       f32_2 %246 = OpLoad %218 
                                       f32_2 %247 = OpFAdd %246 %228 
                                                      OpStore %218 %247 
                                       f32_2 %249 = OpLoad %218 
                                       f32_2 %250 = OpFMul %249 %242 
                                       f32_4 %251 = OpLoad %248 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %248 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpExtInst %1 40 %254 %222 
                                                      OpStore %218 %255 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 0 0 1 1 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %256 %260 
                                       f32_2 %261 = OpLoad %218 
                                       f32_2 %262 = OpFNegate %261 
                                       f32_2 %263 = OpLoad %218 
                                       f32_2 %264 = OpFMul %262 %263 
                                       f32_4 %265 = OpLoad %256 
                                       f32_2 %266 = OpVectorShuffle %265 %265 1 3 
                                       f32_2 %267 = OpFAdd %264 %266 
                                                      OpStore %218 %267 
                                       f32_2 %268 = OpLoad %218 
                                       f32_2 %269 = OpFAdd %268 %228 
                                                      OpStore %218 %269 
                                       f32_2 %271 = OpLoad %218 
                                       f32_2 %272 = OpFMul %271 %242 
                                       f32_4 %273 = OpLoad %270 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %270 %274 
                                       f32_4 %276 = OpLoad %256 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %275 %280 
                                       f32_4 %281 = OpLoad %256 
                                       f32_2 %282 = OpVectorShuffle %281 %281 1 3 
                                       f32_2 %283 = OpFMul %282 %242 
                                                      OpStore %218 %283 
                                       f32_4 %284 = OpLoad %275 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 2 
                                       f32_2 %286 = OpFMul %285 %196 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpFNegate %288 
                                       f32_2 %290 = OpFAdd %286 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 3 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %275 
                                       f32_2 %294 = OpVectorShuffle %293 %293 3 1 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %224 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %224 %299 
                                       f32_4 %300 = OpLoad %9 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFMul %301 %242 
                                       f32_4 %303 = OpLoad %256 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %256 %304 
                                Private f32* %305 = OpAccessChain %256 %47 
                                         f32 %306 = OpLoad %305 
                                Private f32* %308 = OpAccessChain %248 %307 
                                                      OpStore %308 %306 
                                Private f32* %309 = OpAccessChain %218 %47 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %248 %61 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %218 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %256 %61 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %224 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 2 
                                       f32_4 %317 = OpLoad %270 
                                       f32_4 %318 = OpVectorShuffle %317 %316 0 1 4 5 
                                                      OpStore %270 %318 
                                       f32_4 %319 = OpLoad %248 
                                       f32_3 %320 = OpVectorShuffle %319 %319 2 1 3 
                                       f32_4 %321 = OpLoad %270 
                                       f32_3 %322 = OpVectorShuffle %321 %321 2 1 3 
                                       f32_3 %323 = OpFAdd %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 2 6 
                                                      OpStore %9 %325 
                                Private f32* %326 = OpAccessChain %248 %27 
                                         f32 %327 = OpLoad %326 
                                Private f32* %328 = OpAccessChain %256 %307 
                                                      OpStore %328 %327 
                                       f32_4 %329 = OpLoad %270 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 1 3 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
                                       f32_3 %333 = OpFDiv %330 %332 
                                       f32_4 %334 = OpLoad %248 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %248 %335 
                                Private f32* %336 = OpAccessChain %270 %27 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %224 %307 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %248 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %345 = OpFAdd %340 %344 
                                       f32_4 %346 = OpLoad %248 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %248 %347 
                                       f32_4 %348 = OpLoad %248 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %38 %190 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 1 1 1 
                                       f32_3 %353 = OpFMul %349 %352 
                                       f32_4 %354 = OpLoad %248 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %248 %355 
                                Private f32* %356 = OpAccessChain %248 %27 
                                         f32 %357 = OpLoad %356 
                                Private f32* %358 = OpAccessChain %270 %61 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %224 
                                       f32_4 %360 = OpVectorShuffle %359 %359 2 3 0 2 
                                       f32_4 %361 = OpLoad %256 
                                       f32_4 %362 = OpVectorShuffle %361 %361 2 3 0 2 
                                       f32_4 %363 = OpFAdd %360 %362 
                                                      OpStore %256 %363 
                                       f32_4 %364 = OpLoad %224 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 2 3 
                                       f32_4 %366 = OpLoad %256 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 3 1 
                                       f32_3 %368 = OpFDiv %365 %367 
                                       f32_4 %369 = OpLoad %224 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %224 %370 
                                       f32_4 %371 = OpLoad %224 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %372 %344 
                                       f32_4 %374 = OpLoad %224 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %224 %375 
                                       f32_4 %376 = OpLoad %224 
                                       f32_3 %377 = OpVectorShuffle %376 %376 1 0 2 
                              Uniform f32_4* %378 = OpAccessChain %38 %190 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_3 %381 = OpFMul %377 %380 
                                       f32_4 %382 = OpLoad %270 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %270 %383 
                                       f32_4 %384 = OpLoad %73 
                                       f32_4 %385 = OpVectorShuffle %384 %384 0 1 0 1 
                              Uniform f32_4* %386 = OpAccessChain %38 %190 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpVectorShuffle %387 %387 0 1 0 1 
                                       f32_4 %389 = OpFMul %385 %388 
                                       f32_4 %390 = OpLoad %270 
                                       f32_4 %391 = OpVectorShuffle %390 %390 1 3 0 3 
                                       f32_4 %392 = OpFAdd %389 %391 
                                                      OpStore %224 %392 
                                       f32_4 %393 = OpLoad %73 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                              Uniform f32_4* %395 = OpAccessChain %38 %190 
                                       f32_4 %396 = OpLoad %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %270 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                       f32_2 %401 = OpFAdd %398 %400 
                                                      OpStore %218 %401 
                                       f32_2 %404 = OpLoad %218 
                                Private f32* %405 = OpAccessChain %9 %307 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpCompositeExtract %404 0 
                                         f32 %408 = OpCompositeExtract %404 1 
                                       f32_3 %409 = OpCompositeConstruct %407 %408 %406 
                                                      OpStore %403 %409 
                         read_only Texture2D %412 = OpLoad %411 
                                     sampler %414 = OpLoad %413 
                  read_only Texture2DSampled %417 = OpSampledImage %412 %414 
                                       f32_3 %418 = OpLoad %403 
                                         f32 %419 = OpCompositeExtract %418 2 
                                         f32 %420 = OpImageSampleDrefExplicitLod %417 %418 %419 Lod %6 
                                                      OpStore %410 %420 
                                       f32_4 %422 = OpLoad %224 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                Private f32* %424 = OpAccessChain %9 %307 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpCompositeExtract %423 0 
                                         f32 %427 = OpCompositeExtract %423 1 
                                       f32_3 %428 = OpCompositeConstruct %426 %427 %425 
                                                      OpStore %421 %428 
                         read_only Texture2D %430 = OpLoad %411 
                                     sampler %431 = OpLoad %413 
                  read_only Texture2DSampled %432 = OpSampledImage %430 %431 
                                       f32_3 %433 = OpLoad %421 
                                         f32 %434 = OpCompositeExtract %433 2 
                                         f32 %435 = OpImageSampleDrefExplicitLod %432 %433 %434 Lod %6 
                                                      OpStore %429 %435 
                                       f32_4 %437 = OpLoad %224 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                Private f32* %439 = OpAccessChain %9 %307 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpCompositeExtract %438 0 
                                         f32 %442 = OpCompositeExtract %438 1 
                                       f32_3 %443 = OpCompositeConstruct %441 %442 %440 
                                                      OpStore %436 %443 
                         read_only Texture2D %445 = OpLoad %411 
                                     sampler %446 = OpLoad %413 
                  read_only Texture2DSampled %447 = OpSampledImage %445 %446 
                                       f32_3 %448 = OpLoad %436 
                                         f32 %449 = OpCompositeExtract %448 2 
                                         f32 %450 = OpImageSampleDrefExplicitLod %447 %448 %449 Lod %6 
                                                      OpStore %444 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 1 
                                       f32_4 %453 = OpLoad %256 
                                       f32_4 %454 = OpVectorShuffle %453 %453 2 3 1 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %275 %455 
                                         f32 %456 = OpLoad %444 
                                Private f32* %457 = OpAccessChain %275 %47 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %9 %27 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %275 %27 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %429 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %27 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %464 %466 
                                Private f32* %468 = OpAccessChain %9 %27 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %275 %307 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %410 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %9 %27 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFAdd %472 %474 
                                Private f32* %476 = OpAccessChain %9 %27 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %270 %47 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %248 %61 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %73 
                                       f32_4 %481 = OpVectorShuffle %480 %480 0 1 0 1 
                              Uniform f32_4* %482 = OpAccessChain %38 %190 
                                       f32_4 %483 = OpLoad %482 
                                       f32_4 %484 = OpVectorShuffle %483 %483 0 1 0 1 
                                       f32_4 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %248 
                                       f32_4 %487 = OpVectorShuffle %486 %486 3 1 3 2 
                                       f32_4 %488 = OpFAdd %485 %487 
                                                      OpStore %224 %488 
                                       f32_4 %489 = OpLoad %248 
                                       f32_2 %490 = OpVectorShuffle %489 %489 1 2 
                                       f32_4 %491 = OpLoad %270 
                                       f32_4 %492 = OpVectorShuffle %491 %490 0 4 2 5 
                                                      OpStore %270 %492 
                                       f32_4 %494 = OpLoad %224 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                Private f32* %496 = OpAccessChain %9 %307 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpCompositeExtract %495 0 
                                         f32 %499 = OpCompositeExtract %495 1 
                                       f32_3 %500 = OpCompositeConstruct %498 %499 %497 
                                                      OpStore %493 %500 
                         read_only Texture2D %501 = OpLoad %411 
                                     sampler %502 = OpLoad %413 
                  read_only Texture2DSampled %503 = OpSampledImage %501 %502 
                                       f32_3 %504 = OpLoad %493 
                                         f32 %505 = OpCompositeExtract %504 2 
                                         f32 %506 = OpImageSampleDrefExplicitLod %503 %504 %505 Lod %6 
                                                      OpStore %410 %506 
                                       f32_4 %508 = OpLoad %224 
                                       f32_2 %509 = OpVectorShuffle %508 %508 2 3 
                                Private f32* %510 = OpAccessChain %9 %307 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpCompositeExtract %509 0 
                                         f32 %513 = OpCompositeExtract %509 1 
                                       f32_3 %514 = OpCompositeConstruct %512 %513 %511 
                                                      OpStore %507 %514 
                         read_only Texture2D %515 = OpLoad %411 
                                     sampler %516 = OpLoad %413 
                  read_only Texture2DSampled %517 = OpSampledImage %515 %516 
                                       f32_3 %518 = OpLoad %507 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %429 %520 
                                Private f32* %521 = OpAccessChain %275 %61 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %410 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %9 %27 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %27 
                                                      OpStore %528 %527 
                                       f32_4 %529 = OpLoad %73 
                                       f32_4 %530 = OpVectorShuffle %529 %529 0 1 0 1 
                              Uniform f32_4* %531 = OpAccessChain %38 %190 
                                       f32_4 %532 = OpLoad %531 
                                       f32_4 %533 = OpVectorShuffle %532 %532 0 1 0 1 
                                       f32_4 %534 = OpFMul %530 %533 
                                       f32_4 %535 = OpLoad %270 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 1 2 1 
                                       f32_4 %537 = OpFAdd %534 %536 
                                                      OpStore %224 %537 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %538 0 1 0 1 
                              Uniform f32_4* %540 = OpAccessChain %38 %190 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                                       f32_4 %543 = OpFMul %539 %542 
                                       f32_4 %544 = OpLoad %270 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 3 2 3 
                                       f32_4 %546 = OpFAdd %543 %545 
                                                      OpStore %248 %546 
                                       f32_4 %548 = OpLoad %224 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                Private f32* %550 = OpAccessChain %9 %307 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpCompositeExtract %549 0 
                                         f32 %553 = OpCompositeExtract %549 1 
                                       f32_3 %554 = OpCompositeConstruct %552 %553 %551 
                                                      OpStore %547 %554 
                         read_only Texture2D %556 = OpLoad %411 
                                     sampler %557 = OpLoad %413 
                  read_only Texture2DSampled %558 = OpSampledImage %556 %557 
                                       f32_3 %559 = OpLoad %547 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                                      OpStore %555 %561 
                                       f32_4 %563 = OpLoad %224 
                                       f32_2 %564 = OpVectorShuffle %563 %563 2 3 
                                Private f32* %565 = OpAccessChain %9 %307 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpCompositeExtract %564 0 
                                         f32 %568 = OpCompositeExtract %564 1 
                                       f32_3 %569 = OpCompositeConstruct %567 %568 %566 
                                                      OpStore %562 %569 
                         read_only Texture2D %571 = OpLoad %411 
                                     sampler %572 = OpLoad %413 
                  read_only Texture2DSampled %573 = OpSampledImage %571 %572 
                                       f32_3 %574 = OpLoad %562 
                                         f32 %575 = OpCompositeExtract %574 2 
                                         f32 %576 = OpImageSampleDrefExplicitLod %573 %574 %575 Lod %6 
                                                      OpStore %570 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_4 %578 = OpVectorShuffle %577 %577 1 1 3 3 
                                       f32_4 %579 = OpLoad %256 
                                       f32_4 %580 = OpFMul %578 %579 
                                                      OpStore %224 %580 
                                Private f32* %581 = OpAccessChain %9 %61 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %256 %47 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %31 %585 
                                Private f32* %586 = OpAccessChain %224 %27 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpLoad %555 
                                         f32 %589 = OpFMul %587 %588 
                                Private f32* %590 = OpAccessChain %9 %27 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFAdd %589 %591 
                                Private f32* %593 = OpAccessChain %9 %27 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %224 %47 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %570 
                                         f32 %597 = OpFMul %595 %596 
                                Private f32* %598 = OpAccessChain %9 %27 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                Private f32* %601 = OpAccessChain %9 %27 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %224 %307 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpLoad %429 
                                         f32 %605 = OpFMul %603 %604 
                                Private f32* %606 = OpAccessChain %9 %27 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpFAdd %605 %607 
                                Private f32* %609 = OpAccessChain %9 %27 
                                                      OpStore %609 %608 
                                       f32_4 %611 = OpLoad %248 
                                       f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                Private f32* %613 = OpAccessChain %9 %307 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpCompositeExtract %612 0 
                                         f32 %616 = OpCompositeExtract %612 1 
                                       f32_3 %617 = OpCompositeConstruct %615 %616 %614 
                                                      OpStore %610 %617 
                         read_only Texture2D %619 = OpLoad %411 
                                     sampler %620 = OpLoad %413 
                  read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                       f32_3 %622 = OpLoad %610 
                                         f32 %623 = OpCompositeExtract %622 2 
                                         f32 %624 = OpImageSampleDrefExplicitLod %621 %622 %623 Lod %6 
                                                      OpStore %618 %624 
                                       f32_4 %626 = OpLoad %248 
                                       f32_2 %627 = OpVectorShuffle %626 %626 2 3 
                                Private f32* %628 = OpAccessChain %9 %307 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpCompositeExtract %627 0 
                                         f32 %631 = OpCompositeExtract %627 1 
                                       f32_3 %632 = OpCompositeConstruct %630 %631 %629 
                                                      OpStore %625 %632 
                         read_only Texture2D %634 = OpLoad %411 
                                     sampler %635 = OpLoad %413 
                  read_only Texture2DSampled %636 = OpSampledImage %634 %635 
                                       f32_3 %637 = OpLoad %625 
                                         f32 %638 = OpCompositeExtract %637 2 
                                         f32 %639 = OpImageSampleDrefExplicitLod %636 %637 %638 Lod %6 
                                                      OpStore %633 %639 
                                Private f32* %640 = OpAccessChain %224 %61 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpLoad %618 
                                         f32 %643 = OpFMul %641 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                Private f32* %647 = OpAccessChain %9 %27 
                                                      OpStore %647 %646 
                                         f32 %648 = OpLoad %31 
                                         f32 %649 = OpLoad %633 
                                         f32 %650 = OpFMul %648 %649 
                                Private f32* %651 = OpAccessChain %9 %27 
                                         f32 %652 = OpLoad %651 
                                         f32 %653 = OpFAdd %650 %652 
                                Private f32* %654 = OpAccessChain %9 %27 
                                                      OpStore %654 %653 
                                Uniform f32* %656 = OpAccessChain %38 %655 %27 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFNegate %657 
                                         f32 %659 = OpFAdd %658 %51 
                                                      OpStore %31 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 0 
                                         f32 %662 = OpLoad %31 
                                       f32_4 %663 = OpCompositeConstruct %662 %662 %662 %662 
                                       f32_4 %664 = OpFMul %661 %663 
                              Uniform f32_4* %665 = OpAccessChain %38 %655 
                                       f32_4 %666 = OpLoad %665 
                                       f32_4 %667 = OpVectorShuffle %666 %666 0 0 0 0 
                                       f32_4 %668 = OpFAdd %664 %667 
                                                      OpStore %9 %668 
                                       f32_4 %671 = OpLoad %9 
                                                      OpStore %670 %671 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 673
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %670 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 DescriptorSet 413 
                                                      OpDecorate %413 Binding 413 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %670 Location 670 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                         i32 %190 = OpConstant 5 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_2 %196 = OpConstantComposite %195 %195 
                                             %217 = OpTypePointer Private %22 
                              Private f32_2* %218 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_2 %222 = OpConstantComposite %221 %221 
                              Private f32_4* %224 = OpVariable Private 
                                       f32_2 %228 = OpConstantComposite %51 %51 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_2 %242 = OpConstantComposite %241 %241 
                              Private f32_4* %248 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                       f32_4 %259 = OpConstantComposite %195 %51 %195 %51 
                              Private f32_4* %270 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_2 %296 = OpConstantComposite %295 %295 
                                         u32 %307 = OpConstant 2 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %341 %342 %343 
                                             %402 = OpTypePointer Function %74 
                                Private f32* %410 = OpVariable Private 
        UniformConstant read_only Texture2D* %411 = OpVariable UniformConstant 
                    UniformConstant sampler* %413 = OpVariable UniformConstant 
                                             %415 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %416 = OpTypeSampledImage %415 
                                Private f32* %429 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                Private f32* %555 = OpVariable Private 
                                Private f32* %570 = OpVariable Private 
                                Private f32* %618 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         i32 %655 = OpConstant 4 
                                             %669 = OpTypePointer Output %7 
                               Output f32_4* %670 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %403 = OpVariable Function 
                             Function f32_3* %421 = OpVariable Function 
                             Function f32_3* %436 = OpVariable Function 
                             Function f32_3* %493 = OpVariable Function 
                             Function f32_3* %507 = OpVariable Function 
                             Function f32_3* %547 = OpVariable Function 
                             Function f32_3* %562 = OpVariable Function 
                             Function f32_3* %610 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %9 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                              Uniform f32_4* %191 = OpAccessChain %38 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 2 3 
                                       f32_2 %194 = OpFMul %189 %193 
                                       f32_2 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %73 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %73 %199 
                                       f32_4 %200 = OpLoad %73 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpExtInst %1 8 %201 
                                       f32_4 %203 = OpLoad %73 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
                                                      OpStore %73 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %38 %190 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %73 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFNegate %212 
                                       f32_2 %214 = OpFAdd %210 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %9 %216 
                                       f32_4 %219 = OpLoad %9 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_2 %223 = OpExtInst %1 37 %220 %222 
                                                      OpStore %218 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFNegate %226 
                                       f32_2 %229 = OpFAdd %227 %228 
                                       f32_4 %230 = OpLoad %224 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %224 %231 
                                       f32_2 %232 = OpLoad %218 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %218 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %224 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %218 %238 
                                       f32_4 %239 = OpLoad %224 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %224 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %224 %245 
                                       f32_2 %246 = OpLoad %218 
                                       f32_2 %247 = OpFAdd %246 %228 
                                                      OpStore %218 %247 
                                       f32_2 %249 = OpLoad %218 
                                       f32_2 %250 = OpFMul %249 %242 
                                       f32_4 %251 = OpLoad %248 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %248 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpExtInst %1 40 %254 %222 
                                                      OpStore %218 %255 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 0 0 1 1 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %256 %260 
                                       f32_2 %261 = OpLoad %218 
                                       f32_2 %262 = OpFNegate %261 
                                       f32_2 %263 = OpLoad %218 
                                       f32_2 %264 = OpFMul %262 %263 
                                       f32_4 %265 = OpLoad %256 
                                       f32_2 %266 = OpVectorShuffle %265 %265 1 3 
                                       f32_2 %267 = OpFAdd %264 %266 
                                                      OpStore %218 %267 
                                       f32_2 %268 = OpLoad %218 
                                       f32_2 %269 = OpFAdd %268 %228 
                                                      OpStore %218 %269 
                                       f32_2 %271 = OpLoad %218 
                                       f32_2 %272 = OpFMul %271 %242 
                                       f32_4 %273 = OpLoad %270 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %270 %274 
                                       f32_4 %276 = OpLoad %256 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %275 %280 
                                       f32_4 %281 = OpLoad %256 
                                       f32_2 %282 = OpVectorShuffle %281 %281 1 3 
                                       f32_2 %283 = OpFMul %282 %242 
                                                      OpStore %218 %283 
                                       f32_4 %284 = OpLoad %275 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 2 
                                       f32_2 %286 = OpFMul %285 %196 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpFNegate %288 
                                       f32_2 %290 = OpFAdd %286 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 3 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %275 
                                       f32_2 %294 = OpVectorShuffle %293 %293 3 1 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %224 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %224 %299 
                                       f32_4 %300 = OpLoad %9 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFMul %301 %242 
                                       f32_4 %303 = OpLoad %256 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %256 %304 
                                Private f32* %305 = OpAccessChain %256 %47 
                                         f32 %306 = OpLoad %305 
                                Private f32* %308 = OpAccessChain %248 %307 
                                                      OpStore %308 %306 
                                Private f32* %309 = OpAccessChain %218 %47 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %248 %61 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %218 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %256 %61 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %224 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 2 
                                       f32_4 %317 = OpLoad %270 
                                       f32_4 %318 = OpVectorShuffle %317 %316 0 1 4 5 
                                                      OpStore %270 %318 
                                       f32_4 %319 = OpLoad %248 
                                       f32_3 %320 = OpVectorShuffle %319 %319 2 1 3 
                                       f32_4 %321 = OpLoad %270 
                                       f32_3 %322 = OpVectorShuffle %321 %321 2 1 3 
                                       f32_3 %323 = OpFAdd %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 2 6 
                                                      OpStore %9 %325 
                                Private f32* %326 = OpAccessChain %248 %27 
                                         f32 %327 = OpLoad %326 
                                Private f32* %328 = OpAccessChain %256 %307 
                                                      OpStore %328 %327 
                                       f32_4 %329 = OpLoad %270 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 1 3 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
                                       f32_3 %333 = OpFDiv %330 %332 
                                       f32_4 %334 = OpLoad %248 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %248 %335 
                                Private f32* %336 = OpAccessChain %270 %27 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %224 %307 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %248 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %345 = OpFAdd %340 %344 
                                       f32_4 %346 = OpLoad %248 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %248 %347 
                                       f32_4 %348 = OpLoad %248 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %38 %190 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 1 1 1 
                                       f32_3 %353 = OpFMul %349 %352 
                                       f32_4 %354 = OpLoad %248 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %248 %355 
                                Private f32* %356 = OpAccessChain %248 %27 
                                         f32 %357 = OpLoad %356 
                                Private f32* %358 = OpAccessChain %270 %61 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %224 
                                       f32_4 %360 = OpVectorShuffle %359 %359 2 3 0 2 
                                       f32_4 %361 = OpLoad %256 
                                       f32_4 %362 = OpVectorShuffle %361 %361 2 3 0 2 
                                       f32_4 %363 = OpFAdd %360 %362 
                                                      OpStore %256 %363 
                                       f32_4 %364 = OpLoad %224 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 2 3 
                                       f32_4 %366 = OpLoad %256 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 3 1 
                                       f32_3 %368 = OpFDiv %365 %367 
                                       f32_4 %369 = OpLoad %224 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %224 %370 
                                       f32_4 %371 = OpLoad %224 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %372 %344 
                                       f32_4 %374 = OpLoad %224 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %224 %375 
                                       f32_4 %376 = OpLoad %224 
                                       f32_3 %377 = OpVectorShuffle %376 %376 1 0 2 
                              Uniform f32_4* %378 = OpAccessChain %38 %190 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_3 %381 = OpFMul %377 %380 
                                       f32_4 %382 = OpLoad %270 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %270 %383 
                                       f32_4 %384 = OpLoad %73 
                                       f32_4 %385 = OpVectorShuffle %384 %384 0 1 0 1 
                              Uniform f32_4* %386 = OpAccessChain %38 %190 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpVectorShuffle %387 %387 0 1 0 1 
                                       f32_4 %389 = OpFMul %385 %388 
                                       f32_4 %390 = OpLoad %270 
                                       f32_4 %391 = OpVectorShuffle %390 %390 1 3 0 3 
                                       f32_4 %392 = OpFAdd %389 %391 
                                                      OpStore %224 %392 
                                       f32_4 %393 = OpLoad %73 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                              Uniform f32_4* %395 = OpAccessChain %38 %190 
                                       f32_4 %396 = OpLoad %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %270 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                       f32_2 %401 = OpFAdd %398 %400 
                                                      OpStore %218 %401 
                                       f32_2 %404 = OpLoad %218 
                                Private f32* %405 = OpAccessChain %9 %307 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpCompositeExtract %404 0 
                                         f32 %408 = OpCompositeExtract %404 1 
                                       f32_3 %409 = OpCompositeConstruct %407 %408 %406 
                                                      OpStore %403 %409 
                         read_only Texture2D %412 = OpLoad %411 
                                     sampler %414 = OpLoad %413 
                  read_only Texture2DSampled %417 = OpSampledImage %412 %414 
                                       f32_3 %418 = OpLoad %403 
                                         f32 %419 = OpCompositeExtract %418 2 
                                         f32 %420 = OpImageSampleDrefExplicitLod %417 %418 %419 Lod %6 
                                                      OpStore %410 %420 
                                       f32_4 %422 = OpLoad %224 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                Private f32* %424 = OpAccessChain %9 %307 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpCompositeExtract %423 0 
                                         f32 %427 = OpCompositeExtract %423 1 
                                       f32_3 %428 = OpCompositeConstruct %426 %427 %425 
                                                      OpStore %421 %428 
                         read_only Texture2D %430 = OpLoad %411 
                                     sampler %431 = OpLoad %413 
                  read_only Texture2DSampled %432 = OpSampledImage %430 %431 
                                       f32_3 %433 = OpLoad %421 
                                         f32 %434 = OpCompositeExtract %433 2 
                                         f32 %435 = OpImageSampleDrefExplicitLod %432 %433 %434 Lod %6 
                                                      OpStore %429 %435 
                                       f32_4 %437 = OpLoad %224 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                Private f32* %439 = OpAccessChain %9 %307 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpCompositeExtract %438 0 
                                         f32 %442 = OpCompositeExtract %438 1 
                                       f32_3 %443 = OpCompositeConstruct %441 %442 %440 
                                                      OpStore %436 %443 
                         read_only Texture2D %445 = OpLoad %411 
                                     sampler %446 = OpLoad %413 
                  read_only Texture2DSampled %447 = OpSampledImage %445 %446 
                                       f32_3 %448 = OpLoad %436 
                                         f32 %449 = OpCompositeExtract %448 2 
                                         f32 %450 = OpImageSampleDrefExplicitLod %447 %448 %449 Lod %6 
                                                      OpStore %444 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 1 
                                       f32_4 %453 = OpLoad %256 
                                       f32_4 %454 = OpVectorShuffle %453 %453 2 3 1 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %275 %455 
                                         f32 %456 = OpLoad %444 
                                Private f32* %457 = OpAccessChain %275 %47 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %9 %27 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %275 %27 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %429 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %27 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %464 %466 
                                Private f32* %468 = OpAccessChain %9 %27 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %275 %307 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %410 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %9 %27 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFAdd %472 %474 
                                Private f32* %476 = OpAccessChain %9 %27 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %270 %47 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %248 %61 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %73 
                                       f32_4 %481 = OpVectorShuffle %480 %480 0 1 0 1 
                              Uniform f32_4* %482 = OpAccessChain %38 %190 
                                       f32_4 %483 = OpLoad %482 
                                       f32_4 %484 = OpVectorShuffle %483 %483 0 1 0 1 
                                       f32_4 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %248 
                                       f32_4 %487 = OpVectorShuffle %486 %486 3 1 3 2 
                                       f32_4 %488 = OpFAdd %485 %487 
                                                      OpStore %224 %488 
                                       f32_4 %489 = OpLoad %248 
                                       f32_2 %490 = OpVectorShuffle %489 %489 1 2 
                                       f32_4 %491 = OpLoad %270 
                                       f32_4 %492 = OpVectorShuffle %491 %490 0 4 2 5 
                                                      OpStore %270 %492 
                                       f32_4 %494 = OpLoad %224 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                Private f32* %496 = OpAccessChain %9 %307 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpCompositeExtract %495 0 
                                         f32 %499 = OpCompositeExtract %495 1 
                                       f32_3 %500 = OpCompositeConstruct %498 %499 %497 
                                                      OpStore %493 %500 
                         read_only Texture2D %501 = OpLoad %411 
                                     sampler %502 = OpLoad %413 
                  read_only Texture2DSampled %503 = OpSampledImage %501 %502 
                                       f32_3 %504 = OpLoad %493 
                                         f32 %505 = OpCompositeExtract %504 2 
                                         f32 %506 = OpImageSampleDrefExplicitLod %503 %504 %505 Lod %6 
                                                      OpStore %410 %506 
                                       f32_4 %508 = OpLoad %224 
                                       f32_2 %509 = OpVectorShuffle %508 %508 2 3 
                                Private f32* %510 = OpAccessChain %9 %307 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpCompositeExtract %509 0 
                                         f32 %513 = OpCompositeExtract %509 1 
                                       f32_3 %514 = OpCompositeConstruct %512 %513 %511 
                                                      OpStore %507 %514 
                         read_only Texture2D %515 = OpLoad %411 
                                     sampler %516 = OpLoad %413 
                  read_only Texture2DSampled %517 = OpSampledImage %515 %516 
                                       f32_3 %518 = OpLoad %507 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %429 %520 
                                Private f32* %521 = OpAccessChain %275 %61 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %410 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %9 %27 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %27 
                                                      OpStore %528 %527 
                                       f32_4 %529 = OpLoad %73 
                                       f32_4 %530 = OpVectorShuffle %529 %529 0 1 0 1 
                              Uniform f32_4* %531 = OpAccessChain %38 %190 
                                       f32_4 %532 = OpLoad %531 
                                       f32_4 %533 = OpVectorShuffle %532 %532 0 1 0 1 
                                       f32_4 %534 = OpFMul %530 %533 
                                       f32_4 %535 = OpLoad %270 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 1 2 1 
                                       f32_4 %537 = OpFAdd %534 %536 
                                                      OpStore %224 %537 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %538 0 1 0 1 
                              Uniform f32_4* %540 = OpAccessChain %38 %190 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                                       f32_4 %543 = OpFMul %539 %542 
                                       f32_4 %544 = OpLoad %270 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 3 2 3 
                                       f32_4 %546 = OpFAdd %543 %545 
                                                      OpStore %248 %546 
                                       f32_4 %548 = OpLoad %224 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                Private f32* %550 = OpAccessChain %9 %307 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpCompositeExtract %549 0 
                                         f32 %553 = OpCompositeExtract %549 1 
                                       f32_3 %554 = OpCompositeConstruct %552 %553 %551 
                                                      OpStore %547 %554 
                         read_only Texture2D %556 = OpLoad %411 
                                     sampler %557 = OpLoad %413 
                  read_only Texture2DSampled %558 = OpSampledImage %556 %557 
                                       f32_3 %559 = OpLoad %547 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                                      OpStore %555 %561 
                                       f32_4 %563 = OpLoad %224 
                                       f32_2 %564 = OpVectorShuffle %563 %563 2 3 
                                Private f32* %565 = OpAccessChain %9 %307 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpCompositeExtract %564 0 
                                         f32 %568 = OpCompositeExtract %564 1 
                                       f32_3 %569 = OpCompositeConstruct %567 %568 %566 
                                                      OpStore %562 %569 
                         read_only Texture2D %571 = OpLoad %411 
                                     sampler %572 = OpLoad %413 
                  read_only Texture2DSampled %573 = OpSampledImage %571 %572 
                                       f32_3 %574 = OpLoad %562 
                                         f32 %575 = OpCompositeExtract %574 2 
                                         f32 %576 = OpImageSampleDrefExplicitLod %573 %574 %575 Lod %6 
                                                      OpStore %570 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_4 %578 = OpVectorShuffle %577 %577 1 1 3 3 
                                       f32_4 %579 = OpLoad %256 
                                       f32_4 %580 = OpFMul %578 %579 
                                                      OpStore %224 %580 
                                Private f32* %581 = OpAccessChain %9 %61 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %256 %47 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %31 %585 
                                Private f32* %586 = OpAccessChain %224 %27 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpLoad %555 
                                         f32 %589 = OpFMul %587 %588 
                                Private f32* %590 = OpAccessChain %9 %27 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFAdd %589 %591 
                                Private f32* %593 = OpAccessChain %9 %27 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %224 %47 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %570 
                                         f32 %597 = OpFMul %595 %596 
                                Private f32* %598 = OpAccessChain %9 %27 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                Private f32* %601 = OpAccessChain %9 %27 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %224 %307 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpLoad %429 
                                         f32 %605 = OpFMul %603 %604 
                                Private f32* %606 = OpAccessChain %9 %27 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpFAdd %605 %607 
                                Private f32* %609 = OpAccessChain %9 %27 
                                                      OpStore %609 %608 
                                       f32_4 %611 = OpLoad %248 
                                       f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                Private f32* %613 = OpAccessChain %9 %307 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpCompositeExtract %612 0 
                                         f32 %616 = OpCompositeExtract %612 1 
                                       f32_3 %617 = OpCompositeConstruct %615 %616 %614 
                                                      OpStore %610 %617 
                         read_only Texture2D %619 = OpLoad %411 
                                     sampler %620 = OpLoad %413 
                  read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                       f32_3 %622 = OpLoad %610 
                                         f32 %623 = OpCompositeExtract %622 2 
                                         f32 %624 = OpImageSampleDrefExplicitLod %621 %622 %623 Lod %6 
                                                      OpStore %618 %624 
                                       f32_4 %626 = OpLoad %248 
                                       f32_2 %627 = OpVectorShuffle %626 %626 2 3 
                                Private f32* %628 = OpAccessChain %9 %307 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpCompositeExtract %627 0 
                                         f32 %631 = OpCompositeExtract %627 1 
                                       f32_3 %632 = OpCompositeConstruct %630 %631 %629 
                                                      OpStore %625 %632 
                         read_only Texture2D %634 = OpLoad %411 
                                     sampler %635 = OpLoad %413 
                  read_only Texture2DSampled %636 = OpSampledImage %634 %635 
                                       f32_3 %637 = OpLoad %625 
                                         f32 %638 = OpCompositeExtract %637 2 
                                         f32 %639 = OpImageSampleDrefExplicitLod %636 %637 %638 Lod %6 
                                                      OpStore %633 %639 
                                Private f32* %640 = OpAccessChain %224 %61 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpLoad %618 
                                         f32 %643 = OpFMul %641 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                Private f32* %647 = OpAccessChain %9 %27 
                                                      OpStore %647 %646 
                                         f32 %648 = OpLoad %31 
                                         f32 %649 = OpLoad %633 
                                         f32 %650 = OpFMul %648 %649 
                                Private f32* %651 = OpAccessChain %9 %27 
                                         f32 %652 = OpLoad %651 
                                         f32 %653 = OpFAdd %650 %652 
                                Private f32* %654 = OpAccessChain %9 %27 
                                                      OpStore %654 %653 
                                Uniform f32* %656 = OpAccessChain %38 %655 %27 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFNegate %657 
                                         f32 %659 = OpFAdd %658 %51 
                                                      OpStore %31 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 0 
                                         f32 %662 = OpLoad %31 
                                       f32_4 %663 = OpCompositeConstruct %662 %662 %662 %662 
                                       f32_4 %664 = OpFMul %661 %663 
                              Uniform f32_4* %665 = OpAccessChain %38 %655 
                                       f32_4 %666 = OpLoad %665 
                                       f32_4 %667 = OpVectorShuffle %666 %666 0 0 0 0 
                                       f32_4 %668 = OpFAdd %664 %667 
                                                      OpStore %9 %668 
                                       f32_4 %671 = OpLoad %9 
                                                      OpStore %670 %671 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 673
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %670 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 RelaxedPrecision 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 DescriptorSet 413 
                                                      OpDecorate %413 Binding 413 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %670 Location 670 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                         i32 %190 = OpConstant 5 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_2 %196 = OpConstantComposite %195 %195 
                                             %217 = OpTypePointer Private %22 
                              Private f32_2* %218 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_2 %222 = OpConstantComposite %221 %221 
                              Private f32_4* %224 = OpVariable Private 
                                       f32_2 %228 = OpConstantComposite %51 %51 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_2 %242 = OpConstantComposite %241 %241 
                              Private f32_4* %248 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                       f32_4 %259 = OpConstantComposite %195 %51 %195 %51 
                              Private f32_4* %270 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_2 %296 = OpConstantComposite %295 %295 
                                         u32 %307 = OpConstant 2 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %341 %342 %343 
                                             %402 = OpTypePointer Function %74 
                                Private f32* %410 = OpVariable Private 
        UniformConstant read_only Texture2D* %411 = OpVariable UniformConstant 
                    UniformConstant sampler* %413 = OpVariable UniformConstant 
                                             %415 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %416 = OpTypeSampledImage %415 
                                Private f32* %429 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                Private f32* %555 = OpVariable Private 
                                Private f32* %570 = OpVariable Private 
                                Private f32* %618 = OpVariable Private 
                                Private f32* %633 = OpVariable Private 
                                         i32 %655 = OpConstant 4 
                                             %669 = OpTypePointer Output %7 
                               Output f32_4* %670 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %403 = OpVariable Function 
                             Function f32_3* %421 = OpVariable Function 
                             Function f32_3* %436 = OpVariable Function 
                             Function f32_3* %493 = OpVariable Function 
                             Function f32_3* %507 = OpVariable Function 
                             Function f32_3* %547 = OpVariable Function 
                             Function f32_3* %562 = OpVariable Function 
                             Function f32_3* %610 = OpVariable Function 
                             Function f32_3* %625 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %9 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                              Uniform f32_4* %191 = OpAccessChain %38 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 2 3 
                                       f32_2 %194 = OpFMul %189 %193 
                                       f32_2 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %73 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 3 
                                                      OpStore %73 %199 
                                       f32_4 %200 = OpLoad %73 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpExtInst %1 8 %201 
                                       f32_4 %203 = OpLoad %73 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
                                                      OpStore %73 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %38 %190 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %73 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFNegate %212 
                                       f32_2 %214 = OpFAdd %210 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %9 %216 
                                       f32_4 %219 = OpLoad %9 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_2 %223 = OpExtInst %1 37 %220 %222 
                                                      OpStore %218 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_2 %227 = OpFNegate %226 
                                       f32_2 %229 = OpFAdd %227 %228 
                                       f32_4 %230 = OpLoad %224 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %224 %231 
                                       f32_2 %232 = OpLoad %218 
                                       f32_2 %233 = OpFNegate %232 
                                       f32_2 %234 = OpLoad %218 
                                       f32_2 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %224 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFAdd %235 %237 
                                                      OpStore %218 %238 
                                       f32_4 %239 = OpLoad %224 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %224 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %224 %245 
                                       f32_2 %246 = OpLoad %218 
                                       f32_2 %247 = OpFAdd %246 %228 
                                                      OpStore %218 %247 
                                       f32_2 %249 = OpLoad %218 
                                       f32_2 %250 = OpFMul %249 %242 
                                       f32_4 %251 = OpLoad %248 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %248 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpExtInst %1 40 %254 %222 
                                                      OpStore %218 %255 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 0 0 1 1 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %256 %260 
                                       f32_2 %261 = OpLoad %218 
                                       f32_2 %262 = OpFNegate %261 
                                       f32_2 %263 = OpLoad %218 
                                       f32_2 %264 = OpFMul %262 %263 
                                       f32_4 %265 = OpLoad %256 
                                       f32_2 %266 = OpVectorShuffle %265 %265 1 3 
                                       f32_2 %267 = OpFAdd %264 %266 
                                                      OpStore %218 %267 
                                       f32_2 %268 = OpLoad %218 
                                       f32_2 %269 = OpFAdd %268 %228 
                                                      OpStore %218 %269 
                                       f32_2 %271 = OpLoad %218 
                                       f32_2 %272 = OpFMul %271 %242 
                                       f32_4 %273 = OpLoad %270 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 2 3 
                                                      OpStore %270 %274 
                                       f32_4 %276 = OpLoad %256 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %275 %280 
                                       f32_4 %281 = OpLoad %256 
                                       f32_2 %282 = OpVectorShuffle %281 %281 1 3 
                                       f32_2 %283 = OpFMul %282 %242 
                                                      OpStore %218 %283 
                                       f32_4 %284 = OpLoad %275 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 2 
                                       f32_2 %286 = OpFMul %285 %196 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_2 %289 = OpFNegate %288 
                                       f32_2 %290 = OpFAdd %286 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 3 
                                                      OpStore %9 %292 
                                       f32_4 %293 = OpLoad %275 
                                       f32_2 %294 = OpVectorShuffle %293 %293 3 1 
                                       f32_2 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %224 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %224 %299 
                                       f32_4 %300 = OpLoad %9 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFMul %301 %242 
                                       f32_4 %303 = OpLoad %256 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %256 %304 
                                Private f32* %305 = OpAccessChain %256 %47 
                                         f32 %306 = OpLoad %305 
                                Private f32* %308 = OpAccessChain %248 %307 
                                                      OpStore %308 %306 
                                Private f32* %309 = OpAccessChain %218 %47 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %248 %61 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %218 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %256 %61 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %224 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 2 
                                       f32_4 %317 = OpLoad %270 
                                       f32_4 %318 = OpVectorShuffle %317 %316 0 1 4 5 
                                                      OpStore %270 %318 
                                       f32_4 %319 = OpLoad %248 
                                       f32_3 %320 = OpVectorShuffle %319 %319 2 1 3 
                                       f32_4 %321 = OpLoad %270 
                                       f32_3 %322 = OpVectorShuffle %321 %321 2 1 3 
                                       f32_3 %323 = OpFAdd %320 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 2 6 
                                                      OpStore %9 %325 
                                Private f32* %326 = OpAccessChain %248 %27 
                                         f32 %327 = OpLoad %326 
                                Private f32* %328 = OpAccessChain %256 %307 
                                                      OpStore %328 %327 
                                       f32_4 %329 = OpLoad %270 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 1 3 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 3 
                                       f32_3 %333 = OpFDiv %330 %332 
                                       f32_4 %334 = OpLoad %248 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %248 %335 
                                Private f32* %336 = OpAccessChain %270 %27 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %224 %307 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %248 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %345 = OpFAdd %340 %344 
                                       f32_4 %346 = OpLoad %248 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %248 %347 
                                       f32_4 %348 = OpLoad %248 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %38 %190 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 1 1 1 
                                       f32_3 %353 = OpFMul %349 %352 
                                       f32_4 %354 = OpLoad %248 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %248 %355 
                                Private f32* %356 = OpAccessChain %248 %27 
                                         f32 %357 = OpLoad %356 
                                Private f32* %358 = OpAccessChain %270 %61 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %224 
                                       f32_4 %360 = OpVectorShuffle %359 %359 2 3 0 2 
                                       f32_4 %361 = OpLoad %256 
                                       f32_4 %362 = OpVectorShuffle %361 %361 2 3 0 2 
                                       f32_4 %363 = OpFAdd %360 %362 
                                                      OpStore %256 %363 
                                       f32_4 %364 = OpLoad %224 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 2 3 
                                       f32_4 %366 = OpLoad %256 
                                       f32_3 %367 = OpVectorShuffle %366 %366 2 3 1 
                                       f32_3 %368 = OpFDiv %365 %367 
                                       f32_4 %369 = OpLoad %224 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %224 %370 
                                       f32_4 %371 = OpLoad %224 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %372 %344 
                                       f32_4 %374 = OpLoad %224 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %224 %375 
                                       f32_4 %376 = OpLoad %224 
                                       f32_3 %377 = OpVectorShuffle %376 %376 1 0 2 
                              Uniform f32_4* %378 = OpAccessChain %38 %190 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                                       f32_3 %381 = OpFMul %377 %380 
                                       f32_4 %382 = OpLoad %270 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %270 %383 
                                       f32_4 %384 = OpLoad %73 
                                       f32_4 %385 = OpVectorShuffle %384 %384 0 1 0 1 
                              Uniform f32_4* %386 = OpAccessChain %38 %190 
                                       f32_4 %387 = OpLoad %386 
                                       f32_4 %388 = OpVectorShuffle %387 %387 0 1 0 1 
                                       f32_4 %389 = OpFMul %385 %388 
                                       f32_4 %390 = OpLoad %270 
                                       f32_4 %391 = OpVectorShuffle %390 %390 1 3 0 3 
                                       f32_4 %392 = OpFAdd %389 %391 
                                                      OpStore %224 %392 
                                       f32_4 %393 = OpLoad %73 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                              Uniform f32_4* %395 = OpAccessChain %38 %190 
                                       f32_4 %396 = OpLoad %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %270 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                       f32_2 %401 = OpFAdd %398 %400 
                                                      OpStore %218 %401 
                                       f32_2 %404 = OpLoad %218 
                                Private f32* %405 = OpAccessChain %9 %307 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpCompositeExtract %404 0 
                                         f32 %408 = OpCompositeExtract %404 1 
                                       f32_3 %409 = OpCompositeConstruct %407 %408 %406 
                                                      OpStore %403 %409 
                         read_only Texture2D %412 = OpLoad %411 
                                     sampler %414 = OpLoad %413 
                  read_only Texture2DSampled %417 = OpSampledImage %412 %414 
                                       f32_3 %418 = OpLoad %403 
                                         f32 %419 = OpCompositeExtract %418 2 
                                         f32 %420 = OpImageSampleDrefExplicitLod %417 %418 %419 Lod %6 
                                                      OpStore %410 %420 
                                       f32_4 %422 = OpLoad %224 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                Private f32* %424 = OpAccessChain %9 %307 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpCompositeExtract %423 0 
                                         f32 %427 = OpCompositeExtract %423 1 
                                       f32_3 %428 = OpCompositeConstruct %426 %427 %425 
                                                      OpStore %421 %428 
                         read_only Texture2D %430 = OpLoad %411 
                                     sampler %431 = OpLoad %413 
                  read_only Texture2DSampled %432 = OpSampledImage %430 %431 
                                       f32_3 %433 = OpLoad %421 
                                         f32 %434 = OpCompositeExtract %433 2 
                                         f32 %435 = OpImageSampleDrefExplicitLod %432 %433 %434 Lod %6 
                                                      OpStore %429 %435 
                                       f32_4 %437 = OpLoad %224 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                Private f32* %439 = OpAccessChain %9 %307 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpCompositeExtract %438 0 
                                         f32 %442 = OpCompositeExtract %438 1 
                                       f32_3 %443 = OpCompositeConstruct %441 %442 %440 
                                                      OpStore %436 %443 
                         read_only Texture2D %445 = OpLoad %411 
                                     sampler %446 = OpLoad %413 
                  read_only Texture2DSampled %447 = OpSampledImage %445 %446 
                                       f32_3 %448 = OpLoad %436 
                                         f32 %449 = OpCompositeExtract %448 2 
                                         f32 %450 = OpImageSampleDrefExplicitLod %447 %448 %449 Lod %6 
                                                      OpStore %444 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 0 1 
                                       f32_4 %453 = OpLoad %256 
                                       f32_4 %454 = OpVectorShuffle %453 %453 2 3 1 2 
                                       f32_4 %455 = OpFMul %452 %454 
                                                      OpStore %275 %455 
                                         f32 %456 = OpLoad %444 
                                Private f32* %457 = OpAccessChain %275 %47 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %9 %27 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %275 %27 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %429 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %27 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %464 %466 
                                Private f32* %468 = OpAccessChain %9 %27 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %275 %307 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %410 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %9 %27 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFAdd %472 %474 
                                Private f32* %476 = OpAccessChain %9 %27 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %270 %47 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %248 %61 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %73 
                                       f32_4 %481 = OpVectorShuffle %480 %480 0 1 0 1 
                              Uniform f32_4* %482 = OpAccessChain %38 %190 
                                       f32_4 %483 = OpLoad %482 
                                       f32_4 %484 = OpVectorShuffle %483 %483 0 1 0 1 
                                       f32_4 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %248 
                                       f32_4 %487 = OpVectorShuffle %486 %486 3 1 3 2 
                                       f32_4 %488 = OpFAdd %485 %487 
                                                      OpStore %224 %488 
                                       f32_4 %489 = OpLoad %248 
                                       f32_2 %490 = OpVectorShuffle %489 %489 1 2 
                                       f32_4 %491 = OpLoad %270 
                                       f32_4 %492 = OpVectorShuffle %491 %490 0 4 2 5 
                                                      OpStore %270 %492 
                                       f32_4 %494 = OpLoad %224 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                Private f32* %496 = OpAccessChain %9 %307 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpCompositeExtract %495 0 
                                         f32 %499 = OpCompositeExtract %495 1 
                                       f32_3 %500 = OpCompositeConstruct %498 %499 %497 
                                                      OpStore %493 %500 
                         read_only Texture2D %501 = OpLoad %411 
                                     sampler %502 = OpLoad %413 
                  read_only Texture2DSampled %503 = OpSampledImage %501 %502 
                                       f32_3 %504 = OpLoad %493 
                                         f32 %505 = OpCompositeExtract %504 2 
                                         f32 %506 = OpImageSampleDrefExplicitLod %503 %504 %505 Lod %6 
                                                      OpStore %410 %506 
                                       f32_4 %508 = OpLoad %224 
                                       f32_2 %509 = OpVectorShuffle %508 %508 2 3 
                                Private f32* %510 = OpAccessChain %9 %307 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpCompositeExtract %509 0 
                                         f32 %513 = OpCompositeExtract %509 1 
                                       f32_3 %514 = OpCompositeConstruct %512 %513 %511 
                                                      OpStore %507 %514 
                         read_only Texture2D %515 = OpLoad %411 
                                     sampler %516 = OpLoad %413 
                  read_only Texture2DSampled %517 = OpSampledImage %515 %516 
                                       f32_3 %518 = OpLoad %507 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %429 %520 
                                Private f32* %521 = OpAccessChain %275 %61 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %410 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %9 %27 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %27 
                                                      OpStore %528 %527 
                                       f32_4 %529 = OpLoad %73 
                                       f32_4 %530 = OpVectorShuffle %529 %529 0 1 0 1 
                              Uniform f32_4* %531 = OpAccessChain %38 %190 
                                       f32_4 %532 = OpLoad %531 
                                       f32_4 %533 = OpVectorShuffle %532 %532 0 1 0 1 
                                       f32_4 %534 = OpFMul %530 %533 
                                       f32_4 %535 = OpLoad %270 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 1 2 1 
                                       f32_4 %537 = OpFAdd %534 %536 
                                                      OpStore %224 %537 
                                       f32_4 %538 = OpLoad %73 
                                       f32_4 %539 = OpVectorShuffle %538 %538 0 1 0 1 
                              Uniform f32_4* %540 = OpAccessChain %38 %190 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                                       f32_4 %543 = OpFMul %539 %542 
                                       f32_4 %544 = OpLoad %270 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 3 2 3 
                                       f32_4 %546 = OpFAdd %543 %545 
                                                      OpStore %248 %546 
                                       f32_4 %548 = OpLoad %224 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                Private f32* %550 = OpAccessChain %9 %307 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpCompositeExtract %549 0 
                                         f32 %553 = OpCompositeExtract %549 1 
                                       f32_3 %554 = OpCompositeConstruct %552 %553 %551 
                                                      OpStore %547 %554 
                         read_only Texture2D %556 = OpLoad %411 
                                     sampler %557 = OpLoad %413 
                  read_only Texture2DSampled %558 = OpSampledImage %556 %557 
                                       f32_3 %559 = OpLoad %547 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                                      OpStore %555 %561 
                                       f32_4 %563 = OpLoad %224 
                                       f32_2 %564 = OpVectorShuffle %563 %563 2 3 
                                Private f32* %565 = OpAccessChain %9 %307 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpCompositeExtract %564 0 
                                         f32 %568 = OpCompositeExtract %564 1 
                                       f32_3 %569 = OpCompositeConstruct %567 %568 %566 
                                                      OpStore %562 %569 
                         read_only Texture2D %571 = OpLoad %411 
                                     sampler %572 = OpLoad %413 
                  read_only Texture2DSampled %573 = OpSampledImage %571 %572 
                                       f32_3 %574 = OpLoad %562 
                                         f32 %575 = OpCompositeExtract %574 2 
                                         f32 %576 = OpImageSampleDrefExplicitLod %573 %574 %575 Lod %6 
                                                      OpStore %570 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_4 %578 = OpVectorShuffle %577 %577 1 1 3 3 
                                       f32_4 %579 = OpLoad %256 
                                       f32_4 %580 = OpFMul %578 %579 
                                                      OpStore %224 %580 
                                Private f32* %581 = OpAccessChain %9 %61 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %256 %47 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %31 %585 
                                Private f32* %586 = OpAccessChain %224 %27 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpLoad %555 
                                         f32 %589 = OpFMul %587 %588 
                                Private f32* %590 = OpAccessChain %9 %27 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFAdd %589 %591 
                                Private f32* %593 = OpAccessChain %9 %27 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %224 %47 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %570 
                                         f32 %597 = OpFMul %595 %596 
                                Private f32* %598 = OpAccessChain %9 %27 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                Private f32* %601 = OpAccessChain %9 %27 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %224 %307 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpLoad %429 
                                         f32 %605 = OpFMul %603 %604 
                                Private f32* %606 = OpAccessChain %9 %27 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpFAdd %605 %607 
                                Private f32* %609 = OpAccessChain %9 %27 
                                                      OpStore %609 %608 
                                       f32_4 %611 = OpLoad %248 
                                       f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                Private f32* %613 = OpAccessChain %9 %307 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpCompositeExtract %612 0 
                                         f32 %616 = OpCompositeExtract %612 1 
                                       f32_3 %617 = OpCompositeConstruct %615 %616 %614 
                                                      OpStore %610 %617 
                         read_only Texture2D %619 = OpLoad %411 
                                     sampler %620 = OpLoad %413 
                  read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                       f32_3 %622 = OpLoad %610 
                                         f32 %623 = OpCompositeExtract %622 2 
                                         f32 %624 = OpImageSampleDrefExplicitLod %621 %622 %623 Lod %6 
                                                      OpStore %618 %624 
                                       f32_4 %626 = OpLoad %248 
                                       f32_2 %627 = OpVectorShuffle %626 %626 2 3 
                                Private f32* %628 = OpAccessChain %9 %307 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpCompositeExtract %627 0 
                                         f32 %631 = OpCompositeExtract %627 1 
                                       f32_3 %632 = OpCompositeConstruct %630 %631 %629 
                                                      OpStore %625 %632 
                         read_only Texture2D %634 = OpLoad %411 
                                     sampler %635 = OpLoad %413 
                  read_only Texture2DSampled %636 = OpSampledImage %634 %635 
                                       f32_3 %637 = OpLoad %625 
                                         f32 %638 = OpCompositeExtract %637 2 
                                         f32 %639 = OpImageSampleDrefExplicitLod %636 %637 %638 Lod %6 
                                                      OpStore %633 %639 
                                Private f32* %640 = OpAccessChain %224 %61 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpLoad %618 
                                         f32 %643 = OpFMul %641 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                Private f32* %647 = OpAccessChain %9 %27 
                                                      OpStore %647 %646 
                                         f32 %648 = OpLoad %31 
                                         f32 %649 = OpLoad %633 
                                         f32 %650 = OpFMul %648 %649 
                                Private f32* %651 = OpAccessChain %9 %27 
                                         f32 %652 = OpLoad %651 
                                         f32 %653 = OpFAdd %650 %652 
                                Private f32* %654 = OpAccessChain %9 %27 
                                                      OpStore %654 %653 
                                Uniform f32* %656 = OpAccessChain %38 %655 %27 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFNegate %657 
                                         f32 %659 = OpFAdd %658 %51 
                                                      OpStore %31 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 0 
                                         f32 %662 = OpLoad %31 
                                       f32_4 %663 = OpCompositeConstruct %662 %662 %662 %662 
                                       f32_4 %664 = OpFMul %661 %663 
                              Uniform f32_4* %665 = OpAccessChain %38 %655 
                                       f32_4 %666 = OpLoad %665 
                                       f32_4 %667 = OpVectorShuffle %666 %666 0 0 0 0 
                                       f32_4 %668 = OpFAdd %664 %667 
                                                      OpStore %9 %668 
                                       f32_4 %671 = OpLoad %9 
                                                      OpStore %670 %671 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
 Pass {
  Tags { "ShadowmapFilter" = "PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 202046
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_9;
mediump float u_xlat16_14;
vec2 u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    u_xlat2.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat2.xy = floor(u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat2.xy);
    u_xlat16.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat3.xy;
    u_xlat1.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat4.yw;
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat16.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat1.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat16.y;
    u_xlat4.w = u_xlat16.x;
    u_xlat5.zw = u_xlat1.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat1.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat1.zwxz + u_xlat4.zwxz;
    u_xlat6.xyz = u_xlat1.xzw / u_xlat4.zwy;
    u_xlat6.xyz = u_xlat6.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat6.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat16.xy = u_xlat2.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat16.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat1 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_3 * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_23 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_16 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat6 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat6.zw,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_16 + u_xlat0.x;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_9 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat1 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_2 + u_xlat0.x;
    u_xlat0.x = u_xlat1.y * u_xlat16_9 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_23 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_9;
mediump float u_xlat16_14;
vec2 u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    u_xlat2.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat2.xy = floor(u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat2.xy);
    u_xlat16.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat3.xy;
    u_xlat1.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat4.yw;
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat16.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat1.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat16.y;
    u_xlat4.w = u_xlat16.x;
    u_xlat5.zw = u_xlat1.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat1.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat1.zwxz + u_xlat4.zwxz;
    u_xlat6.xyz = u_xlat1.xzw / u_xlat4.zwy;
    u_xlat6.xyz = u_xlat6.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat6.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat16.xy = u_xlat2.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat16.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat1 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_3 * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_23 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_16 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat6 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat6.zw,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_16 + u_xlat0.x;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_9 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat1 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_2 + u_xlat0.x;
    u_xlat0.x = u_xlat1.y * u_xlat16_9 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_23 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_9;
mediump float u_xlat16_14;
vec2 u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www + u_xlat2.xyz;
    u_xlat2.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat2.xy = floor(u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat2.xy);
    u_xlat16.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat3.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat3.xy;
    u_xlat1.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat16.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat16.xy = (-u_xlat16.xy) * u_xlat16.xy + u_xlat4.yw;
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat16.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat1.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat16.y;
    u_xlat4.w = u_xlat16.x;
    u_xlat5.zw = u_xlat1.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat1.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat1.zwxz + u_xlat4.zwxz;
    u_xlat6.xyz = u_xlat1.xzw / u_xlat4.zwy;
    u_xlat6.xyz = u_xlat6.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat6.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat16.xy = u_xlat2.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat16.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_3 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat1 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_3 * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_23 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_16 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat6 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat0.z);
    u_xlat16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat6.zw,u_xlat0.z);
    u_xlat16_23 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_16 + u_xlat0.x;
    u_xlat1 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat2.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat1.zw,u_xlat0.z);
    u_xlat16_9 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat1 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat1.x * u_xlat16_2 + u_xlat0.x;
    u_xlat0.x = u_xlat1.y * u_xlat16_9 + u_xlat0.x;
    u_xlat0.x = u_xlat1.z * u_xlat16_23 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat1.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 876
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %873 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 RelaxedPrecision 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %622 DescriptorSet 622 
                                                      OpDecorate %622 Binding 622 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 DescriptorSet 624 
                                                      OpDecorate %624 Binding 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %655 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %772 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %810 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %838 RelaxedPrecision 
                                                      OpDecorate %845 RelaxedPrecision 
                                                      OpDecorate %852 RelaxedPrecision 
                                                      OpDecorate %860 RelaxedPrecision 
                                                      OpDecorate %861 RelaxedPrecision 
                                                      OpDecorate %862 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %870 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %873 Location 873 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                              Private f32_4* %152 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         i32 %213 = OpConstant 7 
                              Private f32_4* %232 = OpVariable Private 
                                         i32 %286 = OpConstant 9 
                                         i32 %293 = OpConstant 8 
                                         i32 %305 = OpConstant 10 
                                         i32 %317 = OpConstant 11 
                                         i32 %341 = OpConstant 13 
                                         i32 %348 = OpConstant 12 
                                         i32 %360 = OpConstant 14 
                                         i32 %372 = OpConstant 15 
                                Private f32* %394 = OpVariable Private 
                                       f32_4 %396 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %398 = OpVariable Private 
                                         f32 %412 = OpConstant 3.674022E-40 
                                       f32_2 %413 = OpConstantComposite %412 %412 
                                             %434 = OpTypePointer Private %22 
                              Private f32_2* %435 = OpVariable Private 
                                       f32_2 %438 = OpConstantComposite %111 %111 
                                       f32_4 %442 = OpConstantComposite %412 %34 %412 %34 
                                       f32_2 %452 = OpConstantComposite %34 %34 
                                         f32 %455 = OpConstant 3.674022E-40 
                                       f32_2 %456 = OpConstantComposite %455 %455 
                              Private f32_4* %464 = OpVariable Private 
                              Private f32_4* %469 = OpVariable Private 
                              Private f32_4* %489 = OpVariable Private 
                                         f32 %509 = OpConstant 3.674022E-40 
                                       f32_2 %510 = OpConstantComposite %509 %509 
                                             %542 = OpTypePointer Private %42 
                              Private f32_3* %543 = OpVariable Private 
                                         f32 %553 = OpConstant 3.674022E-40 
                                         f32 %554 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                                       f32_3 %556 = OpConstantComposite %553 %554 %555 
                                             %614 = OpTypePointer Function %42 
                                Private f32* %621 = OpVariable Private 
        UniformConstant read_only Texture2D* %622 = OpVariable UniformConstant 
                    UniformConstant sampler* %624 = OpVariable UniformConstant 
                                             %626 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %627 = OpTypeSampledImage %626 
                                Private f32* %639 = OpVariable Private 
                                Private f32* %653 = OpVariable Private 
                                Private f32* %740 = OpVariable Private 
                                Private f32* %771 = OpVariable Private 
                                Private f32* %785 = OpVariable Private 
                                Private f32* %836 = OpVariable Private 
                                             %858 = OpTypePointer Uniform %6 
                                             %872 = OpTypePointer Output %7 
                               Output f32_4* %873 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %615 = OpVariable Function 
                             Function f32_3* %632 = OpVariable Function 
                             Function f32_3* %646 = OpVariable Function 
                             Function f32_3* %702 = OpVariable Function 
                             Function f32_3* %715 = OpVariable Function 
                             Function f32_3* %764 = OpVariable Function 
                             Function f32_3* %778 = OpVariable Function 
                             Function f32_3* %816 = OpVariable Function 
                             Function f32_3* %829 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %53 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFMul %153 %154 
                                                      OpStore %152 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %63 %66 %66 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %157 %159 
                                                      OpStore %135 %160 
                              Uniform f32_4* %161 = OpAccessChain %63 %66 %65 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %135 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %135 %167 
                              Uniform f32_4* %168 = OpAccessChain %63 %66 %78 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFNegate %171 
                                       f32_4 %173 = OpFMul %169 %172 
                                       f32_4 %174 = OpLoad %135 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %63 %66 %87 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %63 %182 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %181 %186 
                                       f32_4 %188 = OpLoad %135 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %135 %189 
                              Uniform f32_4* %190 = OpAccessChain %63 %182 %182 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %135 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                              Uniform f32_4* %202 = OpAccessChain %63 %182 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 2 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %135 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %135 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %135 %212 
                              Uniform f32_4* %214 = OpAccessChain %63 %182 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_4 %217 = OpLoad %9 
                                       f32_3 %218 = OpVectorShuffle %217 %217 3 3 3 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %135 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %135 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %135 %224 
                                       f32_4 %225 = OpLoad %152 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                                       f32_4 %227 = OpLoad %135 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %135 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %135 %231 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
                              Uniform f32_4* %235 = OpAccessChain %63 %182 %66 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_4 %239 = OpLoad %232 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %232 %240 
                              Uniform f32_4* %241 = OpAccessChain %63 %182 %65 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %9 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpFMul %243 %245 
                                       f32_4 %247 = OpLoad %232 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %232 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                      OpStore %232 %251 
                              Uniform f32_4* %252 = OpAccessChain %63 %182 %78 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 2 2 2 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %232 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %232 %262 
                              Uniform f32_4* %263 = OpAccessChain %63 %182 %87 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 3 3 3 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %232 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %232 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %232 %273 
                                       f32_4 %274 = OpLoad %232 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_4 %276 = OpLoad %152 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %135 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFAdd %278 %280 
                                       f32_4 %282 = OpLoad %135 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %135 %283 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 1 1 
                              Uniform f32_4* %287 = OpAccessChain %63 %182 %286 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %285 %289 
                                       f32_4 %291 = OpLoad %232 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %232 %292 
                              Uniform f32_4* %294 = OpAccessChain %63 %182 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 0 0 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %232 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %232 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %232 %304 
                              Uniform f32_4* %306 = OpAccessChain %63 %182 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 2 2 2 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %232 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %311 %313 
                                       f32_4 %315 = OpLoad %232 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %232 %316 
                              Uniform f32_4* %318 = OpAccessChain %63 %182 %317 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 3 3 3 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %232 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %232 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %232 %328 
                                       f32_4 %329 = OpLoad %232 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %152 
                                       f32_3 %332 = OpVectorShuffle %331 %331 2 2 2 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %135 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %135 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %135 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %63 %182 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %340 %344 
                                       f32_4 %346 = OpLoad %232 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %232 %347 
                              Uniform f32_4* %349 = OpAccessChain %63 %182 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %232 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %232 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %232 %359 
                              Uniform f32_4* %361 = OpAccessChain %63 %182 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 2 2 2 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %232 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad %9 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %9 %371 
                              Uniform f32_4* %373 = OpAccessChain %63 %182 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_4 %386 = OpLoad %152 
                                       f32_3 %387 = OpVectorShuffle %386 %386 3 3 3 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %135 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %9 %393 
                                       f32_4 %395 = OpLoad %152 
                                         f32 %397 = OpDot %395 %396 
                                                      OpStore %394 %397 
                                         f32 %399 = OpLoad %394 
                                         f32 %400 = OpFNegate %399 
                                Private f32* %401 = OpAccessChain %9 %36 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFAdd %400 %402 
                                                      OpStore %398 %403 
                                         f32 %404 = OpLoad %398 
                                         f32 %405 = OpFAdd %404 %34 
                                                      OpStore %398 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                              Uniform f32_4* %408 = OpAccessChain %63 %201 
                                       f32_4 %409 = OpLoad %408 
                                       f32_2 %410 = OpVectorShuffle %409 %409 2 3 
                                       f32_2 %411 = OpFMul %407 %410 
                                       f32_2 %414 = OpFAdd %411 %413 
                                       f32_4 %415 = OpLoad %135 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 2 3 
                                                      OpStore %135 %416 
                                       f32_4 %417 = OpLoad %135 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %419 = OpExtInst %1 8 %418 
                                       f32_4 %420 = OpLoad %135 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 2 3 
                                                      OpStore %135 %421 
                                       f32_4 %422 = OpLoad %9 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                              Uniform f32_4* %424 = OpAccessChain %63 %201 
                                       f32_4 %425 = OpLoad %424 
                                       f32_2 %426 = OpVectorShuffle %425 %425 2 3 
                                       f32_2 %427 = OpFMul %423 %426 
                                       f32_4 %428 = OpLoad %135 
                                       f32_2 %429 = OpVectorShuffle %428 %428 0 1 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_2 %431 = OpFAdd %427 %430 
                                       f32_4 %432 = OpLoad %9 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 2 3 
                                                      OpStore %9 %433 
                                       f32_4 %436 = OpLoad %9 
                                       f32_2 %437 = OpVectorShuffle %436 %436 0 1 
                                       f32_2 %439 = OpExtInst %1 40 %437 %438 
                                                      OpStore %435 %439 
                                       f32_4 %440 = OpLoad %9 
                                       f32_4 %441 = OpVectorShuffle %440 %440 0 0 1 1 
                                       f32_4 %443 = OpFAdd %441 %442 
                                                      OpStore %53 %443 
                                       f32_2 %444 = OpLoad %435 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpLoad %435 
                                       f32_2 %447 = OpFMul %445 %446 
                                       f32_4 %448 = OpLoad %53 
                                       f32_2 %449 = OpVectorShuffle %448 %448 1 3 
                                       f32_2 %450 = OpFAdd %447 %449 
                                                      OpStore %435 %450 
                                       f32_2 %451 = OpLoad %435 
                                       f32_2 %453 = OpFAdd %451 %452 
                                                      OpStore %435 %453 
                                       f32_2 %454 = OpLoad %435 
                                       f32_2 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %232 
                                       f32_4 %459 = OpVectorShuffle %458 %457 4 5 2 3 
                                                      OpStore %232 %459 
                                       f32_4 %460 = OpLoad %9 
                                       f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                       f32_2 %462 = OpFNegate %461 
                                       f32_2 %463 = OpFAdd %462 %452 
                                                      OpStore %435 %463 
                                       f32_2 %465 = OpLoad %435 
                                       f32_2 %466 = OpFMul %465 %456 
                                       f32_4 %467 = OpLoad %464 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 2 3 
                                                      OpStore %464 %468 
                                       f32_4 %470 = OpLoad %9 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                       f32_2 %472 = OpExtInst %1 37 %471 %438 
                                       f32_4 %473 = OpLoad %469 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 2 3 
                                                      OpStore %469 %474 
                                       f32_4 %475 = OpLoad %469 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_4 %478 = OpLoad %469 
                                       f32_2 %479 = OpVectorShuffle %478 %478 0 1 
                                       f32_2 %480 = OpFMul %477 %479 
                                       f32_2 %481 = OpLoad %435 
                                       f32_2 %482 = OpFAdd %480 %481 
                                                      OpStore %435 %482 
                                       f32_2 %483 = OpLoad %435 
                                       f32_2 %484 = OpFAdd %483 %452 
                                                      OpStore %435 %484 
                                       f32_2 %485 = OpLoad %435 
                                       f32_2 %486 = OpFMul %485 %456 
                                       f32_4 %487 = OpLoad %469 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 2 3 
                                                      OpStore %469 %488 
                                       f32_4 %490 = OpLoad %53 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 0 2 2 
                                       f32_4 %492 = OpLoad %53 
                                       f32_4 %493 = OpVectorShuffle %492 %492 0 0 2 2 
                                       f32_4 %494 = OpFMul %491 %493 
                                                      OpStore %489 %494 
                                       f32_4 %495 = OpLoad %53 
                                       f32_2 %496 = OpVectorShuffle %495 %495 1 3 
                                       f32_2 %497 = OpFMul %496 %456 
                                                      OpStore %435 %497 
                                       f32_4 %498 = OpLoad %489 
                                       f32_2 %499 = OpVectorShuffle %498 %498 0 2 
                                       f32_2 %500 = OpFMul %499 %413 
                                       f32_4 %501 = OpLoad %9 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 1 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpFAdd %500 %503 
                                       f32_4 %505 = OpLoad %9 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 2 3 
                                                      OpStore %9 %506 
                                       f32_4 %507 = OpLoad %489 
                                       f32_2 %508 = OpVectorShuffle %507 %507 3 1 
                                       f32_2 %511 = OpFMul %508 %510 
                                       f32_4 %512 = OpLoad %464 
                                       f32_4 %513 = OpVectorShuffle %512 %511 0 1 4 5 
                                                      OpStore %464 %513 
                                       f32_4 %514 = OpLoad %9 
                                       f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                       f32_2 %516 = OpFMul %515 %456 
                                       f32_4 %517 = OpLoad %53 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 2 3 
                                                      OpStore %53 %518 
                                Private f32* %519 = OpAccessChain %53 %114 
                                         f32 %520 = OpLoad %519 
                                Private f32* %521 = OpAccessChain %469 %36 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %435 %114 
                                         f32 %523 = OpLoad %522 
                                Private f32* %524 = OpAccessChain %469 %123 
                                                      OpStore %524 %523 
                                Private f32* %525 = OpAccessChain %435 %27 
                                         f32 %526 = OpLoad %525 
                                Private f32* %527 = OpAccessChain %53 %123 
                                                      OpStore %527 %526 
                                       f32_4 %528 = OpLoad %464 
                                       f32_2 %529 = OpVectorShuffle %528 %528 1 2 
                                       f32_4 %530 = OpLoad %232 
                                       f32_4 %531 = OpVectorShuffle %530 %529 0 1 4 5 
                                                      OpStore %232 %531 
                                       f32_4 %532 = OpLoad %232 
                                       f32_3 %533 = OpVectorShuffle %532 %532 2 1 3 
                                       f32_4 %534 = OpLoad %469 
                                       f32_3 %535 = OpVectorShuffle %534 %534 2 1 3 
                                       f32_3 %536 = OpFAdd %533 %535 
                                       f32_4 %537 = OpLoad %9 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 2 6 
                                                      OpStore %9 %538 
                                Private f32* %539 = OpAccessChain %469 %27 
                                         f32 %540 = OpLoad %539 
                                Private f32* %541 = OpAccessChain %53 %36 
                                                      OpStore %541 %540 
                                       f32_4 %544 = OpLoad %232 
                                       f32_3 %545 = OpVectorShuffle %544 %544 2 1 3 
                                       f32_4 %546 = OpLoad %9 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 3 
                                       f32_3 %548 = OpFDiv %545 %547 
                                                      OpStore %543 %548 
                                Private f32* %549 = OpAccessChain %232 %27 
                                         f32 %550 = OpLoad %549 
                                Private f32* %551 = OpAccessChain %464 %36 
                                                      OpStore %551 %550 
                                       f32_3 %552 = OpLoad %543 
                                       f32_3 %557 = OpFAdd %552 %556 
                                       f32_4 %558 = OpLoad %232 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 6 3 
                                                      OpStore %232 %559 
                                       f32_4 %560 = OpLoad %232 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                              Uniform f32_4* %562 = OpAccessChain %63 %201 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpVectorShuffle %563 %563 1 1 1 
                                       f32_3 %565 = OpFMul %561 %564 
                                       f32_4 %566 = OpLoad %232 
                                       f32_4 %567 = OpVectorShuffle %566 %565 4 5 6 3 
                                                      OpStore %232 %567 
                                Private f32* %568 = OpAccessChain %232 %27 
                                         f32 %569 = OpLoad %568 
                                Private f32* %570 = OpAccessChain %469 %123 
                                                      OpStore %570 %569 
                                       f32_4 %571 = OpLoad %53 
                                       f32_4 %572 = OpVectorShuffle %571 %571 2 3 0 2 
                                       f32_4 %573 = OpLoad %464 
                                       f32_4 %574 = OpVectorShuffle %573 %573 2 3 0 2 
                                       f32_4 %575 = OpFAdd %572 %574 
                                                      OpStore %53 %575 
                                       f32_4 %576 = OpLoad %464 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 2 3 
                                       f32_4 %578 = OpLoad %53 
                                       f32_3 %579 = OpVectorShuffle %578 %578 2 3 1 
                                       f32_3 %580 = OpFDiv %577 %579 
                                       f32_4 %581 = OpLoad %464 
                                       f32_4 %582 = OpVectorShuffle %581 %580 4 5 6 3 
                                                      OpStore %464 %582 
                                       f32_4 %583 = OpLoad %464 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 1 2 
                                       f32_3 %585 = OpFAdd %584 %556 
                                       f32_4 %586 = OpLoad %464 
                                       f32_4 %587 = OpVectorShuffle %586 %585 4 5 6 3 
                                                      OpStore %464 %587 
                                       f32_4 %588 = OpLoad %464 
                                       f32_3 %589 = OpVectorShuffle %588 %588 1 0 2 
                              Uniform f32_4* %590 = OpAccessChain %63 %201 
                                       f32_4 %591 = OpLoad %590 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 0 0 
                                       f32_3 %593 = OpFMul %589 %592 
                                       f32_4 %594 = OpLoad %469 
                                       f32_4 %595 = OpVectorShuffle %594 %593 4 5 6 3 
                                                      OpStore %469 %595 
                                       f32_4 %596 = OpLoad %135 
                                       f32_4 %597 = OpVectorShuffle %596 %596 0 1 0 1 
                              Uniform f32_4* %598 = OpAccessChain %63 %201 
                                       f32_4 %599 = OpLoad %598 
                                       f32_4 %600 = OpVectorShuffle %599 %599 0 1 0 1 
                                       f32_4 %601 = OpFMul %597 %600 
                                       f32_4 %602 = OpLoad %469 
                                       f32_4 %603 = OpVectorShuffle %602 %602 1 3 0 3 
                                       f32_4 %604 = OpFAdd %601 %603 
                                                      OpStore %464 %604 
                                       f32_4 %605 = OpLoad %135 
                                       f32_2 %606 = OpVectorShuffle %605 %605 0 1 
                              Uniform f32_4* %607 = OpAccessChain %63 %201 
                                       f32_4 %608 = OpLoad %607 
                                       f32_2 %609 = OpVectorShuffle %608 %608 0 1 
                                       f32_2 %610 = OpFMul %606 %609 
                                       f32_4 %611 = OpLoad %469 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_2 %613 = OpFAdd %610 %612 
                                                      OpStore %435 %613 
                                       f32_2 %616 = OpLoad %435 
                                         f32 %617 = OpLoad %398 
                                         f32 %618 = OpCompositeExtract %616 0 
                                         f32 %619 = OpCompositeExtract %616 1 
                                       f32_3 %620 = OpCompositeConstruct %618 %619 %617 
                                                      OpStore %615 %620 
                         read_only Texture2D %623 = OpLoad %622 
                                     sampler %625 = OpLoad %624 
                  read_only Texture2DSampled %628 = OpSampledImage %623 %625 
                                       f32_3 %629 = OpLoad %615 
                                         f32 %630 = OpCompositeExtract %629 2 
                                         f32 %631 = OpImageSampleDrefExplicitLod %628 %629 %630 Lod %6 
                                                      OpStore %621 %631 
                                       f32_4 %633 = OpLoad %464 
                                       f32_2 %634 = OpVectorShuffle %633 %633 0 1 
                                         f32 %635 = OpLoad %398 
                                         f32 %636 = OpCompositeExtract %634 0 
                                         f32 %637 = OpCompositeExtract %634 1 
                                       f32_3 %638 = OpCompositeConstruct %636 %637 %635 
                                                      OpStore %632 %638 
                         read_only Texture2D %640 = OpLoad %622 
                                     sampler %641 = OpLoad %624 
                  read_only Texture2DSampled %642 = OpSampledImage %640 %641 
                                       f32_3 %643 = OpLoad %632 
                                         f32 %644 = OpCompositeExtract %643 2 
                                         f32 %645 = OpImageSampleDrefExplicitLod %642 %643 %644 Lod %6 
                                                      OpStore %639 %645 
                                       f32_4 %647 = OpLoad %464 
                                       f32_2 %648 = OpVectorShuffle %647 %647 2 3 
                                         f32 %649 = OpLoad %398 
                                         f32 %650 = OpCompositeExtract %648 0 
                                         f32 %651 = OpCompositeExtract %648 1 
                                       f32_3 %652 = OpCompositeConstruct %650 %651 %649 
                                                      OpStore %646 %652 
                         read_only Texture2D %654 = OpLoad %622 
                                     sampler %655 = OpLoad %624 
                  read_only Texture2DSampled %656 = OpSampledImage %654 %655 
                                       f32_3 %657 = OpLoad %646 
                                         f32 %658 = OpCompositeExtract %657 2 
                                         f32 %659 = OpImageSampleDrefExplicitLod %656 %657 %658 Lod %6 
                                                      OpStore %653 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 1 
                                       f32_4 %662 = OpLoad %53 
                                       f32_4 %663 = OpVectorShuffle %662 %662 2 3 1 2 
                                       f32_4 %664 = OpFMul %661 %663 
                                                      OpStore %464 %664 
                                         f32 %665 = OpLoad %653 
                                Private f32* %666 = OpAccessChain %464 %114 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFMul %665 %667 
                                Private f32* %669 = OpAccessChain %9 %27 
                                                      OpStore %669 %668 
                                Private f32* %670 = OpAccessChain %464 %27 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpLoad %639 
                                         f32 %673 = OpFMul %671 %672 
                                Private f32* %674 = OpAccessChain %9 %27 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpFAdd %673 %675 
                                Private f32* %677 = OpAccessChain %9 %27 
                                                      OpStore %677 %676 
                                Private f32* %678 = OpAccessChain %464 %36 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpLoad %621 
                                         f32 %681 = OpFMul %679 %680 
                                Private f32* %682 = OpAccessChain %9 %27 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFAdd %681 %683 
                                Private f32* %685 = OpAccessChain %9 %27 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %469 %114 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %232 %123 
                                                      OpStore %688 %687 
                                       f32_4 %689 = OpLoad %135 
                                       f32_4 %690 = OpVectorShuffle %689 %689 0 1 0 1 
                              Uniform f32_4* %691 = OpAccessChain %63 %201 
                                       f32_4 %692 = OpLoad %691 
                                       f32_4 %693 = OpVectorShuffle %692 %692 0 1 0 1 
                                       f32_4 %694 = OpFMul %690 %693 
                                       f32_4 %695 = OpLoad %232 
                                       f32_4 %696 = OpVectorShuffle %695 %695 3 1 3 2 
                                       f32_4 %697 = OpFAdd %694 %696 
                                                      OpStore %489 %697 
                                       f32_4 %698 = OpLoad %232 
                                       f32_2 %699 = OpVectorShuffle %698 %698 1 2 
                                       f32_4 %700 = OpLoad %469 
                                       f32_4 %701 = OpVectorShuffle %700 %699 0 4 2 5 
                                                      OpStore %469 %701 
                                       f32_4 %703 = OpLoad %489 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                         f32 %705 = OpLoad %398 
                                         f32 %706 = OpCompositeExtract %704 0 
                                         f32 %707 = OpCompositeExtract %704 1 
                                       f32_3 %708 = OpCompositeConstruct %706 %707 %705 
                                                      OpStore %702 %708 
                         read_only Texture2D %709 = OpLoad %622 
                                     sampler %710 = OpLoad %624 
                  read_only Texture2DSampled %711 = OpSampledImage %709 %710 
                                       f32_3 %712 = OpLoad %702 
                                         f32 %713 = OpCompositeExtract %712 2 
                                         f32 %714 = OpImageSampleDrefExplicitLod %711 %712 %713 Lod %6 
                                                      OpStore %621 %714 
                                       f32_4 %716 = OpLoad %489 
                                       f32_2 %717 = OpVectorShuffle %716 %716 2 3 
                                         f32 %718 = OpLoad %398 
                                         f32 %719 = OpCompositeExtract %717 0 
                                         f32 %720 = OpCompositeExtract %717 1 
                                       f32_3 %721 = OpCompositeConstruct %719 %720 %718 
                                                      OpStore %715 %721 
                         read_only Texture2D %722 = OpLoad %622 
                                     sampler %723 = OpLoad %624 
                  read_only Texture2DSampled %724 = OpSampledImage %722 %723 
                                       f32_3 %725 = OpLoad %715 
                                         f32 %726 = OpCompositeExtract %725 2 
                                         f32 %727 = OpImageSampleDrefExplicitLod %724 %725 %726 Lod %6 
                                                      OpStore %639 %727 
                                Private f32* %728 = OpAccessChain %464 %123 
                                         f32 %729 = OpLoad %728 
                                         f32 %730 = OpLoad %621 
                                         f32 %731 = OpFMul %729 %730 
                                Private f32* %732 = OpAccessChain %9 %27 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpFAdd %731 %733 
                                Private f32* %735 = OpAccessChain %9 %27 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %9 
                                       f32_4 %737 = OpVectorShuffle %736 %736 1 1 3 3 
                                       f32_4 %738 = OpLoad %53 
                                       f32_4 %739 = OpFMul %737 %738 
                                                      OpStore %232 %739 
                                Private f32* %741 = OpAccessChain %9 %123 
                                         f32 %742 = OpLoad %741 
                                Private f32* %743 = OpAccessChain %53 %114 
                                         f32 %744 = OpLoad %743 
                                         f32 %745 = OpFMul %742 %744 
                                                      OpStore %740 %745 
                                       f32_4 %746 = OpLoad %135 
                                       f32_4 %747 = OpVectorShuffle %746 %746 0 1 0 1 
                              Uniform f32_4* %748 = OpAccessChain %63 %201 
                                       f32_4 %749 = OpLoad %748 
                                       f32_4 %750 = OpVectorShuffle %749 %749 0 1 0 1 
                                       f32_4 %751 = OpFMul %747 %750 
                                       f32_4 %752 = OpLoad %469 
                                       f32_4 %753 = OpVectorShuffle %752 %752 0 1 2 1 
                                       f32_4 %754 = OpFAdd %751 %753 
                                                      OpStore %53 %754 
                                       f32_4 %755 = OpLoad %135 
                                       f32_4 %756 = OpVectorShuffle %755 %755 0 1 0 1 
                              Uniform f32_4* %757 = OpAccessChain %63 %201 
                                       f32_4 %758 = OpLoad %757 
                                       f32_4 %759 = OpVectorShuffle %758 %758 0 1 0 1 
                                       f32_4 %760 = OpFMul %756 %759 
                                       f32_4 %761 = OpLoad %469 
                                       f32_4 %762 = OpVectorShuffle %761 %761 0 3 2 3 
                                       f32_4 %763 = OpFAdd %760 %762 
                                                      OpStore %464 %763 
                                       f32_4 %765 = OpLoad %53 
                                       f32_2 %766 = OpVectorShuffle %765 %765 0 1 
                                         f32 %767 = OpLoad %398 
                                         f32 %768 = OpCompositeExtract %766 0 
                                         f32 %769 = OpCompositeExtract %766 1 
                                       f32_3 %770 = OpCompositeConstruct %768 %769 %767 
                                                      OpStore %764 %770 
                         read_only Texture2D %772 = OpLoad %622 
                                     sampler %773 = OpLoad %624 
                  read_only Texture2DSampled %774 = OpSampledImage %772 %773 
                                       f32_3 %775 = OpLoad %764 
                                         f32 %776 = OpCompositeExtract %775 2 
                                         f32 %777 = OpImageSampleDrefExplicitLod %774 %775 %776 Lod %6 
                                                      OpStore %771 %777 
                                       f32_4 %779 = OpLoad %53 
                                       f32_2 %780 = OpVectorShuffle %779 %779 2 3 
                                         f32 %781 = OpLoad %398 
                                         f32 %782 = OpCompositeExtract %780 0 
                                         f32 %783 = OpCompositeExtract %780 1 
                                       f32_3 %784 = OpCompositeConstruct %782 %783 %781 
                                                      OpStore %778 %784 
                         read_only Texture2D %786 = OpLoad %622 
                                     sampler %787 = OpLoad %624 
                  read_only Texture2DSampled %788 = OpSampledImage %786 %787 
                                       f32_3 %789 = OpLoad %778 
                                         f32 %790 = OpCompositeExtract %789 2 
                                         f32 %791 = OpImageSampleDrefExplicitLod %788 %789 %790 Lod %6 
                                                      OpStore %785 %791 
                                Private f32* %792 = OpAccessChain %232 %27 
                                         f32 %793 = OpLoad %792 
                                         f32 %794 = OpLoad %771 
                                         f32 %795 = OpFMul %793 %794 
                                Private f32* %796 = OpAccessChain %9 %27 
                                         f32 %797 = OpLoad %796 
                                         f32 %798 = OpFAdd %795 %797 
                                Private f32* %799 = OpAccessChain %9 %27 
                                                      OpStore %799 %798 
                                Private f32* %800 = OpAccessChain %232 %114 
                                         f32 %801 = OpLoad %800 
                                         f32 %802 = OpLoad %785 
                                         f32 %803 = OpFMul %801 %802 
                                Private f32* %804 = OpAccessChain %9 %27 
                                         f32 %805 = OpLoad %804 
                                         f32 %806 = OpFAdd %803 %805 
                                Private f32* %807 = OpAccessChain %9 %27 
                                                      OpStore %807 %806 
                                Private f32* %808 = OpAccessChain %232 %36 
                                         f32 %809 = OpLoad %808 
                                         f32 %810 = OpLoad %639 
                                         f32 %811 = OpFMul %809 %810 
                                Private f32* %812 = OpAccessChain %9 %27 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFAdd %811 %813 
                                Private f32* %815 = OpAccessChain %9 %27 
                                                      OpStore %815 %814 
                                       f32_4 %817 = OpLoad %464 
                                       f32_2 %818 = OpVectorShuffle %817 %817 0 1 
                                         f32 %819 = OpLoad %398 
                                         f32 %820 = OpCompositeExtract %818 0 
                                         f32 %821 = OpCompositeExtract %818 1 
                                       f32_3 %822 = OpCompositeConstruct %820 %821 %819 
                                                      OpStore %816 %822 
                         read_only Texture2D %823 = OpLoad %622 
                                     sampler %824 = OpLoad %624 
                  read_only Texture2DSampled %825 = OpSampledImage %823 %824 
                                       f32_3 %826 = OpLoad %816 
                                         f32 %827 = OpCompositeExtract %826 2 
                                         f32 %828 = OpImageSampleDrefExplicitLod %825 %826 %827 Lod %6 
                                                      OpStore %771 %828 
                                       f32_4 %830 = OpLoad %464 
                                       f32_2 %831 = OpVectorShuffle %830 %830 2 3 
                                         f32 %832 = OpLoad %398 
                                         f32 %833 = OpCompositeExtract %831 0 
                                         f32 %834 = OpCompositeExtract %831 1 
                                       f32_3 %835 = OpCompositeConstruct %833 %834 %832 
                                                      OpStore %829 %835 
                         read_only Texture2D %837 = OpLoad %622 
                                     sampler %838 = OpLoad %624 
                  read_only Texture2DSampled %839 = OpSampledImage %837 %838 
                                       f32_3 %840 = OpLoad %829 
                                         f32 %841 = OpCompositeExtract %840 2 
                                         f32 %842 = OpImageSampleDrefExplicitLod %839 %840 %841 Lod %6 
                                                      OpStore %836 %842 
                                Private f32* %843 = OpAccessChain %232 %123 
                                         f32 %844 = OpLoad %843 
                                         f32 %845 = OpLoad %771 
                                         f32 %846 = OpFMul %844 %845 
                                Private f32* %847 = OpAccessChain %9 %27 
                                         f32 %848 = OpLoad %847 
                                         f32 %849 = OpFAdd %846 %848 
                                Private f32* %850 = OpAccessChain %9 %27 
                                                      OpStore %850 %849 
                                         f32 %851 = OpLoad %740 
                                         f32 %852 = OpLoad %836 
                                         f32 %853 = OpFMul %851 %852 
                                Private f32* %854 = OpAccessChain %9 %27 
                                         f32 %855 = OpLoad %854 
                                         f32 %856 = OpFAdd %853 %855 
                                Private f32* %857 = OpAccessChain %9 %27 
                                                      OpStore %857 %856 
                                Uniform f32* %859 = OpAccessChain %63 %183 %27 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpFNegate %860 
                                         f32 %862 = OpFAdd %861 %34 
                                                      OpStore %740 %862 
                                       f32_4 %863 = OpLoad %9 
                                       f32_4 %864 = OpVectorShuffle %863 %863 0 0 0 0 
                                         f32 %865 = OpLoad %740 
                                       f32_4 %866 = OpCompositeConstruct %865 %865 %865 %865 
                                       f32_4 %867 = OpFMul %864 %866 
                              Uniform f32_4* %868 = OpAccessChain %63 %183 
                                       f32_4 %869 = OpLoad %868 
                                       f32_4 %870 = OpVectorShuffle %869 %869 0 0 0 0 
                                       f32_4 %871 = OpFAdd %867 %870 
                                                      OpStore %9 %871 
                                       f32_4 %874 = OpLoad %9 
                                                      OpStore %873 %874 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 876
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %873 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 RelaxedPrecision 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %622 DescriptorSet 622 
                                                      OpDecorate %622 Binding 622 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 DescriptorSet 624 
                                                      OpDecorate %624 Binding 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %655 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %772 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %810 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %838 RelaxedPrecision 
                                                      OpDecorate %845 RelaxedPrecision 
                                                      OpDecorate %852 RelaxedPrecision 
                                                      OpDecorate %860 RelaxedPrecision 
                                                      OpDecorate %861 RelaxedPrecision 
                                                      OpDecorate %862 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %870 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %873 Location 873 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                              Private f32_4* %152 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         i32 %213 = OpConstant 7 
                              Private f32_4* %232 = OpVariable Private 
                                         i32 %286 = OpConstant 9 
                                         i32 %293 = OpConstant 8 
                                         i32 %305 = OpConstant 10 
                                         i32 %317 = OpConstant 11 
                                         i32 %341 = OpConstant 13 
                                         i32 %348 = OpConstant 12 
                                         i32 %360 = OpConstant 14 
                                         i32 %372 = OpConstant 15 
                                Private f32* %394 = OpVariable Private 
                                       f32_4 %396 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %398 = OpVariable Private 
                                         f32 %412 = OpConstant 3.674022E-40 
                                       f32_2 %413 = OpConstantComposite %412 %412 
                                             %434 = OpTypePointer Private %22 
                              Private f32_2* %435 = OpVariable Private 
                                       f32_2 %438 = OpConstantComposite %111 %111 
                                       f32_4 %442 = OpConstantComposite %412 %34 %412 %34 
                                       f32_2 %452 = OpConstantComposite %34 %34 
                                         f32 %455 = OpConstant 3.674022E-40 
                                       f32_2 %456 = OpConstantComposite %455 %455 
                              Private f32_4* %464 = OpVariable Private 
                              Private f32_4* %469 = OpVariable Private 
                              Private f32_4* %489 = OpVariable Private 
                                         f32 %509 = OpConstant 3.674022E-40 
                                       f32_2 %510 = OpConstantComposite %509 %509 
                                             %542 = OpTypePointer Private %42 
                              Private f32_3* %543 = OpVariable Private 
                                         f32 %553 = OpConstant 3.674022E-40 
                                         f32 %554 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                                       f32_3 %556 = OpConstantComposite %553 %554 %555 
                                             %614 = OpTypePointer Function %42 
                                Private f32* %621 = OpVariable Private 
        UniformConstant read_only Texture2D* %622 = OpVariable UniformConstant 
                    UniformConstant sampler* %624 = OpVariable UniformConstant 
                                             %626 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %627 = OpTypeSampledImage %626 
                                Private f32* %639 = OpVariable Private 
                                Private f32* %653 = OpVariable Private 
                                Private f32* %740 = OpVariable Private 
                                Private f32* %771 = OpVariable Private 
                                Private f32* %785 = OpVariable Private 
                                Private f32* %836 = OpVariable Private 
                                             %858 = OpTypePointer Uniform %6 
                                             %872 = OpTypePointer Output %7 
                               Output f32_4* %873 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %615 = OpVariable Function 
                             Function f32_3* %632 = OpVariable Function 
                             Function f32_3* %646 = OpVariable Function 
                             Function f32_3* %702 = OpVariable Function 
                             Function f32_3* %715 = OpVariable Function 
                             Function f32_3* %764 = OpVariable Function 
                             Function f32_3* %778 = OpVariable Function 
                             Function f32_3* %816 = OpVariable Function 
                             Function f32_3* %829 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %53 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFMul %153 %154 
                                                      OpStore %152 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %63 %66 %66 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %157 %159 
                                                      OpStore %135 %160 
                              Uniform f32_4* %161 = OpAccessChain %63 %66 %65 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %135 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %135 %167 
                              Uniform f32_4* %168 = OpAccessChain %63 %66 %78 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFNegate %171 
                                       f32_4 %173 = OpFMul %169 %172 
                                       f32_4 %174 = OpLoad %135 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %63 %66 %87 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %63 %182 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %181 %186 
                                       f32_4 %188 = OpLoad %135 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %135 %189 
                              Uniform f32_4* %190 = OpAccessChain %63 %182 %182 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %135 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                              Uniform f32_4* %202 = OpAccessChain %63 %182 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 2 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %135 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %135 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %135 %212 
                              Uniform f32_4* %214 = OpAccessChain %63 %182 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_4 %217 = OpLoad %9 
                                       f32_3 %218 = OpVectorShuffle %217 %217 3 3 3 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %135 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %135 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %135 %224 
                                       f32_4 %225 = OpLoad %152 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                                       f32_4 %227 = OpLoad %135 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %135 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %135 %231 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
                              Uniform f32_4* %235 = OpAccessChain %63 %182 %66 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_4 %239 = OpLoad %232 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %232 %240 
                              Uniform f32_4* %241 = OpAccessChain %63 %182 %65 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %9 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpFMul %243 %245 
                                       f32_4 %247 = OpLoad %232 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %232 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                      OpStore %232 %251 
                              Uniform f32_4* %252 = OpAccessChain %63 %182 %78 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 2 2 2 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %232 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %232 %262 
                              Uniform f32_4* %263 = OpAccessChain %63 %182 %87 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 3 3 3 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %232 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %232 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %232 %273 
                                       f32_4 %274 = OpLoad %232 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_4 %276 = OpLoad %152 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %135 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFAdd %278 %280 
                                       f32_4 %282 = OpLoad %135 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %135 %283 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 1 1 
                              Uniform f32_4* %287 = OpAccessChain %63 %182 %286 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %285 %289 
                                       f32_4 %291 = OpLoad %232 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %232 %292 
                              Uniform f32_4* %294 = OpAccessChain %63 %182 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 0 0 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %232 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %232 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %232 %304 
                              Uniform f32_4* %306 = OpAccessChain %63 %182 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 2 2 2 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %232 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %311 %313 
                                       f32_4 %315 = OpLoad %232 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %232 %316 
                              Uniform f32_4* %318 = OpAccessChain %63 %182 %317 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 3 3 3 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %232 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %232 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %232 %328 
                                       f32_4 %329 = OpLoad %232 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %152 
                                       f32_3 %332 = OpVectorShuffle %331 %331 2 2 2 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %135 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %135 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %135 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %63 %182 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %340 %344 
                                       f32_4 %346 = OpLoad %232 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %232 %347 
                              Uniform f32_4* %349 = OpAccessChain %63 %182 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %232 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %232 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %232 %359 
                              Uniform f32_4* %361 = OpAccessChain %63 %182 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 2 2 2 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %232 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad %9 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %9 %371 
                              Uniform f32_4* %373 = OpAccessChain %63 %182 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_4 %386 = OpLoad %152 
                                       f32_3 %387 = OpVectorShuffle %386 %386 3 3 3 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %135 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %9 %393 
                                       f32_4 %395 = OpLoad %152 
                                         f32 %397 = OpDot %395 %396 
                                                      OpStore %394 %397 
                                         f32 %399 = OpLoad %394 
                                         f32 %400 = OpFNegate %399 
                                Private f32* %401 = OpAccessChain %9 %36 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFAdd %400 %402 
                                                      OpStore %398 %403 
                                         f32 %404 = OpLoad %398 
                                         f32 %405 = OpFAdd %404 %34 
                                                      OpStore %398 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                              Uniform f32_4* %408 = OpAccessChain %63 %201 
                                       f32_4 %409 = OpLoad %408 
                                       f32_2 %410 = OpVectorShuffle %409 %409 2 3 
                                       f32_2 %411 = OpFMul %407 %410 
                                       f32_2 %414 = OpFAdd %411 %413 
                                       f32_4 %415 = OpLoad %135 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 2 3 
                                                      OpStore %135 %416 
                                       f32_4 %417 = OpLoad %135 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %419 = OpExtInst %1 8 %418 
                                       f32_4 %420 = OpLoad %135 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 2 3 
                                                      OpStore %135 %421 
                                       f32_4 %422 = OpLoad %9 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                              Uniform f32_4* %424 = OpAccessChain %63 %201 
                                       f32_4 %425 = OpLoad %424 
                                       f32_2 %426 = OpVectorShuffle %425 %425 2 3 
                                       f32_2 %427 = OpFMul %423 %426 
                                       f32_4 %428 = OpLoad %135 
                                       f32_2 %429 = OpVectorShuffle %428 %428 0 1 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_2 %431 = OpFAdd %427 %430 
                                       f32_4 %432 = OpLoad %9 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 2 3 
                                                      OpStore %9 %433 
                                       f32_4 %436 = OpLoad %9 
                                       f32_2 %437 = OpVectorShuffle %436 %436 0 1 
                                       f32_2 %439 = OpExtInst %1 40 %437 %438 
                                                      OpStore %435 %439 
                                       f32_4 %440 = OpLoad %9 
                                       f32_4 %441 = OpVectorShuffle %440 %440 0 0 1 1 
                                       f32_4 %443 = OpFAdd %441 %442 
                                                      OpStore %53 %443 
                                       f32_2 %444 = OpLoad %435 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpLoad %435 
                                       f32_2 %447 = OpFMul %445 %446 
                                       f32_4 %448 = OpLoad %53 
                                       f32_2 %449 = OpVectorShuffle %448 %448 1 3 
                                       f32_2 %450 = OpFAdd %447 %449 
                                                      OpStore %435 %450 
                                       f32_2 %451 = OpLoad %435 
                                       f32_2 %453 = OpFAdd %451 %452 
                                                      OpStore %435 %453 
                                       f32_2 %454 = OpLoad %435 
                                       f32_2 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %232 
                                       f32_4 %459 = OpVectorShuffle %458 %457 4 5 2 3 
                                                      OpStore %232 %459 
                                       f32_4 %460 = OpLoad %9 
                                       f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                       f32_2 %462 = OpFNegate %461 
                                       f32_2 %463 = OpFAdd %462 %452 
                                                      OpStore %435 %463 
                                       f32_2 %465 = OpLoad %435 
                                       f32_2 %466 = OpFMul %465 %456 
                                       f32_4 %467 = OpLoad %464 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 2 3 
                                                      OpStore %464 %468 
                                       f32_4 %470 = OpLoad %9 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                       f32_2 %472 = OpExtInst %1 37 %471 %438 
                                       f32_4 %473 = OpLoad %469 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 2 3 
                                                      OpStore %469 %474 
                                       f32_4 %475 = OpLoad %469 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_4 %478 = OpLoad %469 
                                       f32_2 %479 = OpVectorShuffle %478 %478 0 1 
                                       f32_2 %480 = OpFMul %477 %479 
                                       f32_2 %481 = OpLoad %435 
                                       f32_2 %482 = OpFAdd %480 %481 
                                                      OpStore %435 %482 
                                       f32_2 %483 = OpLoad %435 
                                       f32_2 %484 = OpFAdd %483 %452 
                                                      OpStore %435 %484 
                                       f32_2 %485 = OpLoad %435 
                                       f32_2 %486 = OpFMul %485 %456 
                                       f32_4 %487 = OpLoad %469 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 2 3 
                                                      OpStore %469 %488 
                                       f32_4 %490 = OpLoad %53 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 0 2 2 
                                       f32_4 %492 = OpLoad %53 
                                       f32_4 %493 = OpVectorShuffle %492 %492 0 0 2 2 
                                       f32_4 %494 = OpFMul %491 %493 
                                                      OpStore %489 %494 
                                       f32_4 %495 = OpLoad %53 
                                       f32_2 %496 = OpVectorShuffle %495 %495 1 3 
                                       f32_2 %497 = OpFMul %496 %456 
                                                      OpStore %435 %497 
                                       f32_4 %498 = OpLoad %489 
                                       f32_2 %499 = OpVectorShuffle %498 %498 0 2 
                                       f32_2 %500 = OpFMul %499 %413 
                                       f32_4 %501 = OpLoad %9 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 1 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpFAdd %500 %503 
                                       f32_4 %505 = OpLoad %9 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 2 3 
                                                      OpStore %9 %506 
                                       f32_4 %507 = OpLoad %489 
                                       f32_2 %508 = OpVectorShuffle %507 %507 3 1 
                                       f32_2 %511 = OpFMul %508 %510 
                                       f32_4 %512 = OpLoad %464 
                                       f32_4 %513 = OpVectorShuffle %512 %511 0 1 4 5 
                                                      OpStore %464 %513 
                                       f32_4 %514 = OpLoad %9 
                                       f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                       f32_2 %516 = OpFMul %515 %456 
                                       f32_4 %517 = OpLoad %53 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 2 3 
                                                      OpStore %53 %518 
                                Private f32* %519 = OpAccessChain %53 %114 
                                         f32 %520 = OpLoad %519 
                                Private f32* %521 = OpAccessChain %469 %36 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %435 %114 
                                         f32 %523 = OpLoad %522 
                                Private f32* %524 = OpAccessChain %469 %123 
                                                      OpStore %524 %523 
                                Private f32* %525 = OpAccessChain %435 %27 
                                         f32 %526 = OpLoad %525 
                                Private f32* %527 = OpAccessChain %53 %123 
                                                      OpStore %527 %526 
                                       f32_4 %528 = OpLoad %464 
                                       f32_2 %529 = OpVectorShuffle %528 %528 1 2 
                                       f32_4 %530 = OpLoad %232 
                                       f32_4 %531 = OpVectorShuffle %530 %529 0 1 4 5 
                                                      OpStore %232 %531 
                                       f32_4 %532 = OpLoad %232 
                                       f32_3 %533 = OpVectorShuffle %532 %532 2 1 3 
                                       f32_4 %534 = OpLoad %469 
                                       f32_3 %535 = OpVectorShuffle %534 %534 2 1 3 
                                       f32_3 %536 = OpFAdd %533 %535 
                                       f32_4 %537 = OpLoad %9 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 2 6 
                                                      OpStore %9 %538 
                                Private f32* %539 = OpAccessChain %469 %27 
                                         f32 %540 = OpLoad %539 
                                Private f32* %541 = OpAccessChain %53 %36 
                                                      OpStore %541 %540 
                                       f32_4 %544 = OpLoad %232 
                                       f32_3 %545 = OpVectorShuffle %544 %544 2 1 3 
                                       f32_4 %546 = OpLoad %9 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 3 
                                       f32_3 %548 = OpFDiv %545 %547 
                                                      OpStore %543 %548 
                                Private f32* %549 = OpAccessChain %232 %27 
                                         f32 %550 = OpLoad %549 
                                Private f32* %551 = OpAccessChain %464 %36 
                                                      OpStore %551 %550 
                                       f32_3 %552 = OpLoad %543 
                                       f32_3 %557 = OpFAdd %552 %556 
                                       f32_4 %558 = OpLoad %232 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 6 3 
                                                      OpStore %232 %559 
                                       f32_4 %560 = OpLoad %232 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                              Uniform f32_4* %562 = OpAccessChain %63 %201 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpVectorShuffle %563 %563 1 1 1 
                                       f32_3 %565 = OpFMul %561 %564 
                                       f32_4 %566 = OpLoad %232 
                                       f32_4 %567 = OpVectorShuffle %566 %565 4 5 6 3 
                                                      OpStore %232 %567 
                                Private f32* %568 = OpAccessChain %232 %27 
                                         f32 %569 = OpLoad %568 
                                Private f32* %570 = OpAccessChain %469 %123 
                                                      OpStore %570 %569 
                                       f32_4 %571 = OpLoad %53 
                                       f32_4 %572 = OpVectorShuffle %571 %571 2 3 0 2 
                                       f32_4 %573 = OpLoad %464 
                                       f32_4 %574 = OpVectorShuffle %573 %573 2 3 0 2 
                                       f32_4 %575 = OpFAdd %572 %574 
                                                      OpStore %53 %575 
                                       f32_4 %576 = OpLoad %464 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 2 3 
                                       f32_4 %578 = OpLoad %53 
                                       f32_3 %579 = OpVectorShuffle %578 %578 2 3 1 
                                       f32_3 %580 = OpFDiv %577 %579 
                                       f32_4 %581 = OpLoad %464 
                                       f32_4 %582 = OpVectorShuffle %581 %580 4 5 6 3 
                                                      OpStore %464 %582 
                                       f32_4 %583 = OpLoad %464 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 1 2 
                                       f32_3 %585 = OpFAdd %584 %556 
                                       f32_4 %586 = OpLoad %464 
                                       f32_4 %587 = OpVectorShuffle %586 %585 4 5 6 3 
                                                      OpStore %464 %587 
                                       f32_4 %588 = OpLoad %464 
                                       f32_3 %589 = OpVectorShuffle %588 %588 1 0 2 
                              Uniform f32_4* %590 = OpAccessChain %63 %201 
                                       f32_4 %591 = OpLoad %590 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 0 0 
                                       f32_3 %593 = OpFMul %589 %592 
                                       f32_4 %594 = OpLoad %469 
                                       f32_4 %595 = OpVectorShuffle %594 %593 4 5 6 3 
                                                      OpStore %469 %595 
                                       f32_4 %596 = OpLoad %135 
                                       f32_4 %597 = OpVectorShuffle %596 %596 0 1 0 1 
                              Uniform f32_4* %598 = OpAccessChain %63 %201 
                                       f32_4 %599 = OpLoad %598 
                                       f32_4 %600 = OpVectorShuffle %599 %599 0 1 0 1 
                                       f32_4 %601 = OpFMul %597 %600 
                                       f32_4 %602 = OpLoad %469 
                                       f32_4 %603 = OpVectorShuffle %602 %602 1 3 0 3 
                                       f32_4 %604 = OpFAdd %601 %603 
                                                      OpStore %464 %604 
                                       f32_4 %605 = OpLoad %135 
                                       f32_2 %606 = OpVectorShuffle %605 %605 0 1 
                              Uniform f32_4* %607 = OpAccessChain %63 %201 
                                       f32_4 %608 = OpLoad %607 
                                       f32_2 %609 = OpVectorShuffle %608 %608 0 1 
                                       f32_2 %610 = OpFMul %606 %609 
                                       f32_4 %611 = OpLoad %469 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_2 %613 = OpFAdd %610 %612 
                                                      OpStore %435 %613 
                                       f32_2 %616 = OpLoad %435 
                                         f32 %617 = OpLoad %398 
                                         f32 %618 = OpCompositeExtract %616 0 
                                         f32 %619 = OpCompositeExtract %616 1 
                                       f32_3 %620 = OpCompositeConstruct %618 %619 %617 
                                                      OpStore %615 %620 
                         read_only Texture2D %623 = OpLoad %622 
                                     sampler %625 = OpLoad %624 
                  read_only Texture2DSampled %628 = OpSampledImage %623 %625 
                                       f32_3 %629 = OpLoad %615 
                                         f32 %630 = OpCompositeExtract %629 2 
                                         f32 %631 = OpImageSampleDrefExplicitLod %628 %629 %630 Lod %6 
                                                      OpStore %621 %631 
                                       f32_4 %633 = OpLoad %464 
                                       f32_2 %634 = OpVectorShuffle %633 %633 0 1 
                                         f32 %635 = OpLoad %398 
                                         f32 %636 = OpCompositeExtract %634 0 
                                         f32 %637 = OpCompositeExtract %634 1 
                                       f32_3 %638 = OpCompositeConstruct %636 %637 %635 
                                                      OpStore %632 %638 
                         read_only Texture2D %640 = OpLoad %622 
                                     sampler %641 = OpLoad %624 
                  read_only Texture2DSampled %642 = OpSampledImage %640 %641 
                                       f32_3 %643 = OpLoad %632 
                                         f32 %644 = OpCompositeExtract %643 2 
                                         f32 %645 = OpImageSampleDrefExplicitLod %642 %643 %644 Lod %6 
                                                      OpStore %639 %645 
                                       f32_4 %647 = OpLoad %464 
                                       f32_2 %648 = OpVectorShuffle %647 %647 2 3 
                                         f32 %649 = OpLoad %398 
                                         f32 %650 = OpCompositeExtract %648 0 
                                         f32 %651 = OpCompositeExtract %648 1 
                                       f32_3 %652 = OpCompositeConstruct %650 %651 %649 
                                                      OpStore %646 %652 
                         read_only Texture2D %654 = OpLoad %622 
                                     sampler %655 = OpLoad %624 
                  read_only Texture2DSampled %656 = OpSampledImage %654 %655 
                                       f32_3 %657 = OpLoad %646 
                                         f32 %658 = OpCompositeExtract %657 2 
                                         f32 %659 = OpImageSampleDrefExplicitLod %656 %657 %658 Lod %6 
                                                      OpStore %653 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 1 
                                       f32_4 %662 = OpLoad %53 
                                       f32_4 %663 = OpVectorShuffle %662 %662 2 3 1 2 
                                       f32_4 %664 = OpFMul %661 %663 
                                                      OpStore %464 %664 
                                         f32 %665 = OpLoad %653 
                                Private f32* %666 = OpAccessChain %464 %114 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFMul %665 %667 
                                Private f32* %669 = OpAccessChain %9 %27 
                                                      OpStore %669 %668 
                                Private f32* %670 = OpAccessChain %464 %27 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpLoad %639 
                                         f32 %673 = OpFMul %671 %672 
                                Private f32* %674 = OpAccessChain %9 %27 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpFAdd %673 %675 
                                Private f32* %677 = OpAccessChain %9 %27 
                                                      OpStore %677 %676 
                                Private f32* %678 = OpAccessChain %464 %36 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpLoad %621 
                                         f32 %681 = OpFMul %679 %680 
                                Private f32* %682 = OpAccessChain %9 %27 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFAdd %681 %683 
                                Private f32* %685 = OpAccessChain %9 %27 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %469 %114 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %232 %123 
                                                      OpStore %688 %687 
                                       f32_4 %689 = OpLoad %135 
                                       f32_4 %690 = OpVectorShuffle %689 %689 0 1 0 1 
                              Uniform f32_4* %691 = OpAccessChain %63 %201 
                                       f32_4 %692 = OpLoad %691 
                                       f32_4 %693 = OpVectorShuffle %692 %692 0 1 0 1 
                                       f32_4 %694 = OpFMul %690 %693 
                                       f32_4 %695 = OpLoad %232 
                                       f32_4 %696 = OpVectorShuffle %695 %695 3 1 3 2 
                                       f32_4 %697 = OpFAdd %694 %696 
                                                      OpStore %489 %697 
                                       f32_4 %698 = OpLoad %232 
                                       f32_2 %699 = OpVectorShuffle %698 %698 1 2 
                                       f32_4 %700 = OpLoad %469 
                                       f32_4 %701 = OpVectorShuffle %700 %699 0 4 2 5 
                                                      OpStore %469 %701 
                                       f32_4 %703 = OpLoad %489 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                         f32 %705 = OpLoad %398 
                                         f32 %706 = OpCompositeExtract %704 0 
                                         f32 %707 = OpCompositeExtract %704 1 
                                       f32_3 %708 = OpCompositeConstruct %706 %707 %705 
                                                      OpStore %702 %708 
                         read_only Texture2D %709 = OpLoad %622 
                                     sampler %710 = OpLoad %624 
                  read_only Texture2DSampled %711 = OpSampledImage %709 %710 
                                       f32_3 %712 = OpLoad %702 
                                         f32 %713 = OpCompositeExtract %712 2 
                                         f32 %714 = OpImageSampleDrefExplicitLod %711 %712 %713 Lod %6 
                                                      OpStore %621 %714 
                                       f32_4 %716 = OpLoad %489 
                                       f32_2 %717 = OpVectorShuffle %716 %716 2 3 
                                         f32 %718 = OpLoad %398 
                                         f32 %719 = OpCompositeExtract %717 0 
                                         f32 %720 = OpCompositeExtract %717 1 
                                       f32_3 %721 = OpCompositeConstruct %719 %720 %718 
                                                      OpStore %715 %721 
                         read_only Texture2D %722 = OpLoad %622 
                                     sampler %723 = OpLoad %624 
                  read_only Texture2DSampled %724 = OpSampledImage %722 %723 
                                       f32_3 %725 = OpLoad %715 
                                         f32 %726 = OpCompositeExtract %725 2 
                                         f32 %727 = OpImageSampleDrefExplicitLod %724 %725 %726 Lod %6 
                                                      OpStore %639 %727 
                                Private f32* %728 = OpAccessChain %464 %123 
                                         f32 %729 = OpLoad %728 
                                         f32 %730 = OpLoad %621 
                                         f32 %731 = OpFMul %729 %730 
                                Private f32* %732 = OpAccessChain %9 %27 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpFAdd %731 %733 
                                Private f32* %735 = OpAccessChain %9 %27 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %9 
                                       f32_4 %737 = OpVectorShuffle %736 %736 1 1 3 3 
                                       f32_4 %738 = OpLoad %53 
                                       f32_4 %739 = OpFMul %737 %738 
                                                      OpStore %232 %739 
                                Private f32* %741 = OpAccessChain %9 %123 
                                         f32 %742 = OpLoad %741 
                                Private f32* %743 = OpAccessChain %53 %114 
                                         f32 %744 = OpLoad %743 
                                         f32 %745 = OpFMul %742 %744 
                                                      OpStore %740 %745 
                                       f32_4 %746 = OpLoad %135 
                                       f32_4 %747 = OpVectorShuffle %746 %746 0 1 0 1 
                              Uniform f32_4* %748 = OpAccessChain %63 %201 
                                       f32_4 %749 = OpLoad %748 
                                       f32_4 %750 = OpVectorShuffle %749 %749 0 1 0 1 
                                       f32_4 %751 = OpFMul %747 %750 
                                       f32_4 %752 = OpLoad %469 
                                       f32_4 %753 = OpVectorShuffle %752 %752 0 1 2 1 
                                       f32_4 %754 = OpFAdd %751 %753 
                                                      OpStore %53 %754 
                                       f32_4 %755 = OpLoad %135 
                                       f32_4 %756 = OpVectorShuffle %755 %755 0 1 0 1 
                              Uniform f32_4* %757 = OpAccessChain %63 %201 
                                       f32_4 %758 = OpLoad %757 
                                       f32_4 %759 = OpVectorShuffle %758 %758 0 1 0 1 
                                       f32_4 %760 = OpFMul %756 %759 
                                       f32_4 %761 = OpLoad %469 
                                       f32_4 %762 = OpVectorShuffle %761 %761 0 3 2 3 
                                       f32_4 %763 = OpFAdd %760 %762 
                                                      OpStore %464 %763 
                                       f32_4 %765 = OpLoad %53 
                                       f32_2 %766 = OpVectorShuffle %765 %765 0 1 
                                         f32 %767 = OpLoad %398 
                                         f32 %768 = OpCompositeExtract %766 0 
                                         f32 %769 = OpCompositeExtract %766 1 
                                       f32_3 %770 = OpCompositeConstruct %768 %769 %767 
                                                      OpStore %764 %770 
                         read_only Texture2D %772 = OpLoad %622 
                                     sampler %773 = OpLoad %624 
                  read_only Texture2DSampled %774 = OpSampledImage %772 %773 
                                       f32_3 %775 = OpLoad %764 
                                         f32 %776 = OpCompositeExtract %775 2 
                                         f32 %777 = OpImageSampleDrefExplicitLod %774 %775 %776 Lod %6 
                                                      OpStore %771 %777 
                                       f32_4 %779 = OpLoad %53 
                                       f32_2 %780 = OpVectorShuffle %779 %779 2 3 
                                         f32 %781 = OpLoad %398 
                                         f32 %782 = OpCompositeExtract %780 0 
                                         f32 %783 = OpCompositeExtract %780 1 
                                       f32_3 %784 = OpCompositeConstruct %782 %783 %781 
                                                      OpStore %778 %784 
                         read_only Texture2D %786 = OpLoad %622 
                                     sampler %787 = OpLoad %624 
                  read_only Texture2DSampled %788 = OpSampledImage %786 %787 
                                       f32_3 %789 = OpLoad %778 
                                         f32 %790 = OpCompositeExtract %789 2 
                                         f32 %791 = OpImageSampleDrefExplicitLod %788 %789 %790 Lod %6 
                                                      OpStore %785 %791 
                                Private f32* %792 = OpAccessChain %232 %27 
                                         f32 %793 = OpLoad %792 
                                         f32 %794 = OpLoad %771 
                                         f32 %795 = OpFMul %793 %794 
                                Private f32* %796 = OpAccessChain %9 %27 
                                         f32 %797 = OpLoad %796 
                                         f32 %798 = OpFAdd %795 %797 
                                Private f32* %799 = OpAccessChain %9 %27 
                                                      OpStore %799 %798 
                                Private f32* %800 = OpAccessChain %232 %114 
                                         f32 %801 = OpLoad %800 
                                         f32 %802 = OpLoad %785 
                                         f32 %803 = OpFMul %801 %802 
                                Private f32* %804 = OpAccessChain %9 %27 
                                         f32 %805 = OpLoad %804 
                                         f32 %806 = OpFAdd %803 %805 
                                Private f32* %807 = OpAccessChain %9 %27 
                                                      OpStore %807 %806 
                                Private f32* %808 = OpAccessChain %232 %36 
                                         f32 %809 = OpLoad %808 
                                         f32 %810 = OpLoad %639 
                                         f32 %811 = OpFMul %809 %810 
                                Private f32* %812 = OpAccessChain %9 %27 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFAdd %811 %813 
                                Private f32* %815 = OpAccessChain %9 %27 
                                                      OpStore %815 %814 
                                       f32_4 %817 = OpLoad %464 
                                       f32_2 %818 = OpVectorShuffle %817 %817 0 1 
                                         f32 %819 = OpLoad %398 
                                         f32 %820 = OpCompositeExtract %818 0 
                                         f32 %821 = OpCompositeExtract %818 1 
                                       f32_3 %822 = OpCompositeConstruct %820 %821 %819 
                                                      OpStore %816 %822 
                         read_only Texture2D %823 = OpLoad %622 
                                     sampler %824 = OpLoad %624 
                  read_only Texture2DSampled %825 = OpSampledImage %823 %824 
                                       f32_3 %826 = OpLoad %816 
                                         f32 %827 = OpCompositeExtract %826 2 
                                         f32 %828 = OpImageSampleDrefExplicitLod %825 %826 %827 Lod %6 
                                                      OpStore %771 %828 
                                       f32_4 %830 = OpLoad %464 
                                       f32_2 %831 = OpVectorShuffle %830 %830 2 3 
                                         f32 %832 = OpLoad %398 
                                         f32 %833 = OpCompositeExtract %831 0 
                                         f32 %834 = OpCompositeExtract %831 1 
                                       f32_3 %835 = OpCompositeConstruct %833 %834 %832 
                                                      OpStore %829 %835 
                         read_only Texture2D %837 = OpLoad %622 
                                     sampler %838 = OpLoad %624 
                  read_only Texture2DSampled %839 = OpSampledImage %837 %838 
                                       f32_3 %840 = OpLoad %829 
                                         f32 %841 = OpCompositeExtract %840 2 
                                         f32 %842 = OpImageSampleDrefExplicitLod %839 %840 %841 Lod %6 
                                                      OpStore %836 %842 
                                Private f32* %843 = OpAccessChain %232 %123 
                                         f32 %844 = OpLoad %843 
                                         f32 %845 = OpLoad %771 
                                         f32 %846 = OpFMul %844 %845 
                                Private f32* %847 = OpAccessChain %9 %27 
                                         f32 %848 = OpLoad %847 
                                         f32 %849 = OpFAdd %846 %848 
                                Private f32* %850 = OpAccessChain %9 %27 
                                                      OpStore %850 %849 
                                         f32 %851 = OpLoad %740 
                                         f32 %852 = OpLoad %836 
                                         f32 %853 = OpFMul %851 %852 
                                Private f32* %854 = OpAccessChain %9 %27 
                                         f32 %855 = OpLoad %854 
                                         f32 %856 = OpFAdd %853 %855 
                                Private f32* %857 = OpAccessChain %9 %27 
                                                      OpStore %857 %856 
                                Uniform f32* %859 = OpAccessChain %63 %183 %27 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpFNegate %860 
                                         f32 %862 = OpFAdd %861 %34 
                                                      OpStore %740 %862 
                                       f32_4 %863 = OpLoad %9 
                                       f32_4 %864 = OpVectorShuffle %863 %863 0 0 0 0 
                                         f32 %865 = OpLoad %740 
                                       f32_4 %866 = OpCompositeConstruct %865 %865 %865 %865 
                                       f32_4 %867 = OpFMul %864 %866 
                              Uniform f32_4* %868 = OpAccessChain %63 %183 
                                       f32_4 %869 = OpLoad %868 
                                       f32_4 %870 = OpVectorShuffle %869 %869 0 0 0 0 
                                       f32_4 %871 = OpFAdd %867 %870 
                                                      OpStore %9 %871 
                                       f32_4 %874 = OpLoad %9 
                                                      OpStore %873 %874 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 876
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %873 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 RelaxedPrecision 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %622 DescriptorSet 622 
                                                      OpDecorate %622 Binding 622 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 DescriptorSet 624 
                                                      OpDecorate %624 Binding 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %655 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %772 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %785 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %810 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %838 RelaxedPrecision 
                                                      OpDecorate %845 RelaxedPrecision 
                                                      OpDecorate %852 RelaxedPrecision 
                                                      OpDecorate %860 RelaxedPrecision 
                                                      OpDecorate %861 RelaxedPrecision 
                                                      OpDecorate %862 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %870 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %873 Location 873 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                              Private f32_4* %152 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         i32 %213 = OpConstant 7 
                              Private f32_4* %232 = OpVariable Private 
                                         i32 %286 = OpConstant 9 
                                         i32 %293 = OpConstant 8 
                                         i32 %305 = OpConstant 10 
                                         i32 %317 = OpConstant 11 
                                         i32 %341 = OpConstant 13 
                                         i32 %348 = OpConstant 12 
                                         i32 %360 = OpConstant 14 
                                         i32 %372 = OpConstant 15 
                                Private f32* %394 = OpVariable Private 
                                       f32_4 %396 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %398 = OpVariable Private 
                                         f32 %412 = OpConstant 3.674022E-40 
                                       f32_2 %413 = OpConstantComposite %412 %412 
                                             %434 = OpTypePointer Private %22 
                              Private f32_2* %435 = OpVariable Private 
                                       f32_2 %438 = OpConstantComposite %111 %111 
                                       f32_4 %442 = OpConstantComposite %412 %34 %412 %34 
                                       f32_2 %452 = OpConstantComposite %34 %34 
                                         f32 %455 = OpConstant 3.674022E-40 
                                       f32_2 %456 = OpConstantComposite %455 %455 
                              Private f32_4* %464 = OpVariable Private 
                              Private f32_4* %469 = OpVariable Private 
                              Private f32_4* %489 = OpVariable Private 
                                         f32 %509 = OpConstant 3.674022E-40 
                                       f32_2 %510 = OpConstantComposite %509 %509 
                                             %542 = OpTypePointer Private %42 
                              Private f32_3* %543 = OpVariable Private 
                                         f32 %553 = OpConstant 3.674022E-40 
                                         f32 %554 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                                       f32_3 %556 = OpConstantComposite %553 %554 %555 
                                             %614 = OpTypePointer Function %42 
                                Private f32* %621 = OpVariable Private 
        UniformConstant read_only Texture2D* %622 = OpVariable UniformConstant 
                    UniformConstant sampler* %624 = OpVariable UniformConstant 
                                             %626 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %627 = OpTypeSampledImage %626 
                                Private f32* %639 = OpVariable Private 
                                Private f32* %653 = OpVariable Private 
                                Private f32* %740 = OpVariable Private 
                                Private f32* %771 = OpVariable Private 
                                Private f32* %785 = OpVariable Private 
                                Private f32* %836 = OpVariable Private 
                                             %858 = OpTypePointer Uniform %6 
                                             %872 = OpTypePointer Output %7 
                               Output f32_4* %873 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %615 = OpVariable Function 
                             Function f32_3* %632 = OpVariable Function 
                             Function f32_3* %646 = OpVariable Function 
                             Function f32_3* %702 = OpVariable Function 
                             Function f32_3* %715 = OpVariable Function 
                             Function f32_3* %764 = OpVariable Function 
                             Function f32_3* %778 = OpVariable Function 
                             Function f32_3* %816 = OpVariable Function 
                             Function f32_3* %829 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %53 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFMul %153 %154 
                                                      OpStore %152 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %63 %66 %66 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %157 %159 
                                                      OpStore %135 %160 
                              Uniform f32_4* %161 = OpAccessChain %63 %66 %65 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %135 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %135 %167 
                              Uniform f32_4* %168 = OpAccessChain %63 %66 %78 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFNegate %171 
                                       f32_4 %173 = OpFMul %169 %172 
                                       f32_4 %174 = OpLoad %135 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %63 %66 %87 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %63 %182 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %181 %186 
                                       f32_4 %188 = OpLoad %135 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %135 %189 
                              Uniform f32_4* %190 = OpAccessChain %63 %182 %182 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %135 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                              Uniform f32_4* %202 = OpAccessChain %63 %182 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 2 2 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %135 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %135 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %135 %212 
                              Uniform f32_4* %214 = OpAccessChain %63 %182 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_4 %217 = OpLoad %9 
                                       f32_3 %218 = OpVectorShuffle %217 %217 3 3 3 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %135 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %135 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %135 %224 
                                       f32_4 %225 = OpLoad %152 
                                       f32_3 %226 = OpVectorShuffle %225 %225 1 1 1 
                                       f32_4 %227 = OpLoad %135 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %135 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %135 %231 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
                              Uniform f32_4* %235 = OpAccessChain %63 %182 %66 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_4 %239 = OpLoad %232 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %232 %240 
                              Uniform f32_4* %241 = OpAccessChain %63 %182 %65 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_4 %244 = OpLoad %9 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpFMul %243 %245 
                                       f32_4 %247 = OpLoad %232 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFAdd %246 %248 
                                       f32_4 %250 = OpLoad %232 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                      OpStore %232 %251 
                              Uniform f32_4* %252 = OpAccessChain %63 %182 %78 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 2 2 2 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %232 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %232 %262 
                              Uniform f32_4* %263 = OpAccessChain %63 %182 %87 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 3 3 3 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %232 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %232 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %232 %273 
                                       f32_4 %274 = OpLoad %232 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_4 %276 = OpLoad %152 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %135 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFAdd %278 %280 
                                       f32_4 %282 = OpLoad %135 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %135 %283 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 1 1 
                              Uniform f32_4* %287 = OpAccessChain %63 %182 %286 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFMul %285 %289 
                                       f32_4 %291 = OpLoad %232 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %232 %292 
                              Uniform f32_4* %294 = OpAccessChain %63 %182 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 0 0 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %232 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %232 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %232 %304 
                              Uniform f32_4* %306 = OpAccessChain %63 %182 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 2 2 2 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %232 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %311 %313 
                                       f32_4 %315 = OpLoad %232 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %232 %316 
                              Uniform f32_4* %318 = OpAccessChain %63 %182 %317 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 3 3 3 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %232 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %232 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %232 %328 
                                       f32_4 %329 = OpLoad %232 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %152 
                                       f32_3 %332 = OpVectorShuffle %331 %331 2 2 2 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %135 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %135 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %135 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %63 %182 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %340 %344 
                                       f32_4 %346 = OpLoad %232 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %232 %347 
                              Uniform f32_4* %349 = OpAccessChain %63 %182 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %232 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %232 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %232 %359 
                              Uniform f32_4* %361 = OpAccessChain %63 %182 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 2 2 2 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %232 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad %9 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %9 %371 
                              Uniform f32_4* %373 = OpAccessChain %63 %182 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_4 %386 = OpLoad %152 
                                       f32_3 %387 = OpVectorShuffle %386 %386 3 3 3 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %135 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %9 %393 
                                       f32_4 %395 = OpLoad %152 
                                         f32 %397 = OpDot %395 %396 
                                                      OpStore %394 %397 
                                         f32 %399 = OpLoad %394 
                                         f32 %400 = OpFNegate %399 
                                Private f32* %401 = OpAccessChain %9 %36 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFAdd %400 %402 
                                                      OpStore %398 %403 
                                         f32 %404 = OpLoad %398 
                                         f32 %405 = OpFAdd %404 %34 
                                                      OpStore %398 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                              Uniform f32_4* %408 = OpAccessChain %63 %201 
                                       f32_4 %409 = OpLoad %408 
                                       f32_2 %410 = OpVectorShuffle %409 %409 2 3 
                                       f32_2 %411 = OpFMul %407 %410 
                                       f32_2 %414 = OpFAdd %411 %413 
                                       f32_4 %415 = OpLoad %135 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 2 3 
                                                      OpStore %135 %416 
                                       f32_4 %417 = OpLoad %135 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                       f32_2 %419 = OpExtInst %1 8 %418 
                                       f32_4 %420 = OpLoad %135 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 2 3 
                                                      OpStore %135 %421 
                                       f32_4 %422 = OpLoad %9 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                              Uniform f32_4* %424 = OpAccessChain %63 %201 
                                       f32_4 %425 = OpLoad %424 
                                       f32_2 %426 = OpVectorShuffle %425 %425 2 3 
                                       f32_2 %427 = OpFMul %423 %426 
                                       f32_4 %428 = OpLoad %135 
                                       f32_2 %429 = OpVectorShuffle %428 %428 0 1 
                                       f32_2 %430 = OpFNegate %429 
                                       f32_2 %431 = OpFAdd %427 %430 
                                       f32_4 %432 = OpLoad %9 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 2 3 
                                                      OpStore %9 %433 
                                       f32_4 %436 = OpLoad %9 
                                       f32_2 %437 = OpVectorShuffle %436 %436 0 1 
                                       f32_2 %439 = OpExtInst %1 40 %437 %438 
                                                      OpStore %435 %439 
                                       f32_4 %440 = OpLoad %9 
                                       f32_4 %441 = OpVectorShuffle %440 %440 0 0 1 1 
                                       f32_4 %443 = OpFAdd %441 %442 
                                                      OpStore %53 %443 
                                       f32_2 %444 = OpLoad %435 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpLoad %435 
                                       f32_2 %447 = OpFMul %445 %446 
                                       f32_4 %448 = OpLoad %53 
                                       f32_2 %449 = OpVectorShuffle %448 %448 1 3 
                                       f32_2 %450 = OpFAdd %447 %449 
                                                      OpStore %435 %450 
                                       f32_2 %451 = OpLoad %435 
                                       f32_2 %453 = OpFAdd %451 %452 
                                                      OpStore %435 %453 
                                       f32_2 %454 = OpLoad %435 
                                       f32_2 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %232 
                                       f32_4 %459 = OpVectorShuffle %458 %457 4 5 2 3 
                                                      OpStore %232 %459 
                                       f32_4 %460 = OpLoad %9 
                                       f32_2 %461 = OpVectorShuffle %460 %460 0 1 
                                       f32_2 %462 = OpFNegate %461 
                                       f32_2 %463 = OpFAdd %462 %452 
                                                      OpStore %435 %463 
                                       f32_2 %465 = OpLoad %435 
                                       f32_2 %466 = OpFMul %465 %456 
                                       f32_4 %467 = OpLoad %464 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 2 3 
                                                      OpStore %464 %468 
                                       f32_4 %470 = OpLoad %9 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                       f32_2 %472 = OpExtInst %1 37 %471 %438 
                                       f32_4 %473 = OpLoad %469 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 2 3 
                                                      OpStore %469 %474 
                                       f32_4 %475 = OpLoad %469 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_4 %478 = OpLoad %469 
                                       f32_2 %479 = OpVectorShuffle %478 %478 0 1 
                                       f32_2 %480 = OpFMul %477 %479 
                                       f32_2 %481 = OpLoad %435 
                                       f32_2 %482 = OpFAdd %480 %481 
                                                      OpStore %435 %482 
                                       f32_2 %483 = OpLoad %435 
                                       f32_2 %484 = OpFAdd %483 %452 
                                                      OpStore %435 %484 
                                       f32_2 %485 = OpLoad %435 
                                       f32_2 %486 = OpFMul %485 %456 
                                       f32_4 %487 = OpLoad %469 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 2 3 
                                                      OpStore %469 %488 
                                       f32_4 %490 = OpLoad %53 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 0 2 2 
                                       f32_4 %492 = OpLoad %53 
                                       f32_4 %493 = OpVectorShuffle %492 %492 0 0 2 2 
                                       f32_4 %494 = OpFMul %491 %493 
                                                      OpStore %489 %494 
                                       f32_4 %495 = OpLoad %53 
                                       f32_2 %496 = OpVectorShuffle %495 %495 1 3 
                                       f32_2 %497 = OpFMul %496 %456 
                                                      OpStore %435 %497 
                                       f32_4 %498 = OpLoad %489 
                                       f32_2 %499 = OpVectorShuffle %498 %498 0 2 
                                       f32_2 %500 = OpFMul %499 %413 
                                       f32_4 %501 = OpLoad %9 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 1 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpFAdd %500 %503 
                                       f32_4 %505 = OpLoad %9 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 2 3 
                                                      OpStore %9 %506 
                                       f32_4 %507 = OpLoad %489 
                                       f32_2 %508 = OpVectorShuffle %507 %507 3 1 
                                       f32_2 %511 = OpFMul %508 %510 
                                       f32_4 %512 = OpLoad %464 
                                       f32_4 %513 = OpVectorShuffle %512 %511 0 1 4 5 
                                                      OpStore %464 %513 
                                       f32_4 %514 = OpLoad %9 
                                       f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                       f32_2 %516 = OpFMul %515 %456 
                                       f32_4 %517 = OpLoad %53 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 2 3 
                                                      OpStore %53 %518 
                                Private f32* %519 = OpAccessChain %53 %114 
                                         f32 %520 = OpLoad %519 
                                Private f32* %521 = OpAccessChain %469 %36 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %435 %114 
                                         f32 %523 = OpLoad %522 
                                Private f32* %524 = OpAccessChain %469 %123 
                                                      OpStore %524 %523 
                                Private f32* %525 = OpAccessChain %435 %27 
                                         f32 %526 = OpLoad %525 
                                Private f32* %527 = OpAccessChain %53 %123 
                                                      OpStore %527 %526 
                                       f32_4 %528 = OpLoad %464 
                                       f32_2 %529 = OpVectorShuffle %528 %528 1 2 
                                       f32_4 %530 = OpLoad %232 
                                       f32_4 %531 = OpVectorShuffle %530 %529 0 1 4 5 
                                                      OpStore %232 %531 
                                       f32_4 %532 = OpLoad %232 
                                       f32_3 %533 = OpVectorShuffle %532 %532 2 1 3 
                                       f32_4 %534 = OpLoad %469 
                                       f32_3 %535 = OpVectorShuffle %534 %534 2 1 3 
                                       f32_3 %536 = OpFAdd %533 %535 
                                       f32_4 %537 = OpLoad %9 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 2 6 
                                                      OpStore %9 %538 
                                Private f32* %539 = OpAccessChain %469 %27 
                                         f32 %540 = OpLoad %539 
                                Private f32* %541 = OpAccessChain %53 %36 
                                                      OpStore %541 %540 
                                       f32_4 %544 = OpLoad %232 
                                       f32_3 %545 = OpVectorShuffle %544 %544 2 1 3 
                                       f32_4 %546 = OpLoad %9 
                                       f32_3 %547 = OpVectorShuffle %546 %546 0 1 3 
                                       f32_3 %548 = OpFDiv %545 %547 
                                                      OpStore %543 %548 
                                Private f32* %549 = OpAccessChain %232 %27 
                                         f32 %550 = OpLoad %549 
                                Private f32* %551 = OpAccessChain %464 %36 
                                                      OpStore %551 %550 
                                       f32_3 %552 = OpLoad %543 
                                       f32_3 %557 = OpFAdd %552 %556 
                                       f32_4 %558 = OpLoad %232 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 6 3 
                                                      OpStore %232 %559 
                                       f32_4 %560 = OpLoad %232 
                                       f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                              Uniform f32_4* %562 = OpAccessChain %63 %201 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpVectorShuffle %563 %563 1 1 1 
                                       f32_3 %565 = OpFMul %561 %564 
                                       f32_4 %566 = OpLoad %232 
                                       f32_4 %567 = OpVectorShuffle %566 %565 4 5 6 3 
                                                      OpStore %232 %567 
                                Private f32* %568 = OpAccessChain %232 %27 
                                         f32 %569 = OpLoad %568 
                                Private f32* %570 = OpAccessChain %469 %123 
                                                      OpStore %570 %569 
                                       f32_4 %571 = OpLoad %53 
                                       f32_4 %572 = OpVectorShuffle %571 %571 2 3 0 2 
                                       f32_4 %573 = OpLoad %464 
                                       f32_4 %574 = OpVectorShuffle %573 %573 2 3 0 2 
                                       f32_4 %575 = OpFAdd %572 %574 
                                                      OpStore %53 %575 
                                       f32_4 %576 = OpLoad %464 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 2 3 
                                       f32_4 %578 = OpLoad %53 
                                       f32_3 %579 = OpVectorShuffle %578 %578 2 3 1 
                                       f32_3 %580 = OpFDiv %577 %579 
                                       f32_4 %581 = OpLoad %464 
                                       f32_4 %582 = OpVectorShuffle %581 %580 4 5 6 3 
                                                      OpStore %464 %582 
                                       f32_4 %583 = OpLoad %464 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 1 2 
                                       f32_3 %585 = OpFAdd %584 %556 
                                       f32_4 %586 = OpLoad %464 
                                       f32_4 %587 = OpVectorShuffle %586 %585 4 5 6 3 
                                                      OpStore %464 %587 
                                       f32_4 %588 = OpLoad %464 
                                       f32_3 %589 = OpVectorShuffle %588 %588 1 0 2 
                              Uniform f32_4* %590 = OpAccessChain %63 %201 
                                       f32_4 %591 = OpLoad %590 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 0 0 
                                       f32_3 %593 = OpFMul %589 %592 
                                       f32_4 %594 = OpLoad %469 
                                       f32_4 %595 = OpVectorShuffle %594 %593 4 5 6 3 
                                                      OpStore %469 %595 
                                       f32_4 %596 = OpLoad %135 
                                       f32_4 %597 = OpVectorShuffle %596 %596 0 1 0 1 
                              Uniform f32_4* %598 = OpAccessChain %63 %201 
                                       f32_4 %599 = OpLoad %598 
                                       f32_4 %600 = OpVectorShuffle %599 %599 0 1 0 1 
                                       f32_4 %601 = OpFMul %597 %600 
                                       f32_4 %602 = OpLoad %469 
                                       f32_4 %603 = OpVectorShuffle %602 %602 1 3 0 3 
                                       f32_4 %604 = OpFAdd %601 %603 
                                                      OpStore %464 %604 
                                       f32_4 %605 = OpLoad %135 
                                       f32_2 %606 = OpVectorShuffle %605 %605 0 1 
                              Uniform f32_4* %607 = OpAccessChain %63 %201 
                                       f32_4 %608 = OpLoad %607 
                                       f32_2 %609 = OpVectorShuffle %608 %608 0 1 
                                       f32_2 %610 = OpFMul %606 %609 
                                       f32_4 %611 = OpLoad %469 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_2 %613 = OpFAdd %610 %612 
                                                      OpStore %435 %613 
                                       f32_2 %616 = OpLoad %435 
                                         f32 %617 = OpLoad %398 
                                         f32 %618 = OpCompositeExtract %616 0 
                                         f32 %619 = OpCompositeExtract %616 1 
                                       f32_3 %620 = OpCompositeConstruct %618 %619 %617 
                                                      OpStore %615 %620 
                         read_only Texture2D %623 = OpLoad %622 
                                     sampler %625 = OpLoad %624 
                  read_only Texture2DSampled %628 = OpSampledImage %623 %625 
                                       f32_3 %629 = OpLoad %615 
                                         f32 %630 = OpCompositeExtract %629 2 
                                         f32 %631 = OpImageSampleDrefExplicitLod %628 %629 %630 Lod %6 
                                                      OpStore %621 %631 
                                       f32_4 %633 = OpLoad %464 
                                       f32_2 %634 = OpVectorShuffle %633 %633 0 1 
                                         f32 %635 = OpLoad %398 
                                         f32 %636 = OpCompositeExtract %634 0 
                                         f32 %637 = OpCompositeExtract %634 1 
                                       f32_3 %638 = OpCompositeConstruct %636 %637 %635 
                                                      OpStore %632 %638 
                         read_only Texture2D %640 = OpLoad %622 
                                     sampler %641 = OpLoad %624 
                  read_only Texture2DSampled %642 = OpSampledImage %640 %641 
                                       f32_3 %643 = OpLoad %632 
                                         f32 %644 = OpCompositeExtract %643 2 
                                         f32 %645 = OpImageSampleDrefExplicitLod %642 %643 %644 Lod %6 
                                                      OpStore %639 %645 
                                       f32_4 %647 = OpLoad %464 
                                       f32_2 %648 = OpVectorShuffle %647 %647 2 3 
                                         f32 %649 = OpLoad %398 
                                         f32 %650 = OpCompositeExtract %648 0 
                                         f32 %651 = OpCompositeExtract %648 1 
                                       f32_3 %652 = OpCompositeConstruct %650 %651 %649 
                                                      OpStore %646 %652 
                         read_only Texture2D %654 = OpLoad %622 
                                     sampler %655 = OpLoad %624 
                  read_only Texture2DSampled %656 = OpSampledImage %654 %655 
                                       f32_3 %657 = OpLoad %646 
                                         f32 %658 = OpCompositeExtract %657 2 
                                         f32 %659 = OpImageSampleDrefExplicitLod %656 %657 %658 Lod %6 
                                                      OpStore %653 %659 
                                       f32_4 %660 = OpLoad %9 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 0 0 1 
                                       f32_4 %662 = OpLoad %53 
                                       f32_4 %663 = OpVectorShuffle %662 %662 2 3 1 2 
                                       f32_4 %664 = OpFMul %661 %663 
                                                      OpStore %464 %664 
                                         f32 %665 = OpLoad %653 
                                Private f32* %666 = OpAccessChain %464 %114 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFMul %665 %667 
                                Private f32* %669 = OpAccessChain %9 %27 
                                                      OpStore %669 %668 
                                Private f32* %670 = OpAccessChain %464 %27 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpLoad %639 
                                         f32 %673 = OpFMul %671 %672 
                                Private f32* %674 = OpAccessChain %9 %27 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpFAdd %673 %675 
                                Private f32* %677 = OpAccessChain %9 %27 
                                                      OpStore %677 %676 
                                Private f32* %678 = OpAccessChain %464 %36 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpLoad %621 
                                         f32 %681 = OpFMul %679 %680 
                                Private f32* %682 = OpAccessChain %9 %27 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFAdd %681 %683 
                                Private f32* %685 = OpAccessChain %9 %27 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %469 %114 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %232 %123 
                                                      OpStore %688 %687 
                                       f32_4 %689 = OpLoad %135 
                                       f32_4 %690 = OpVectorShuffle %689 %689 0 1 0 1 
                              Uniform f32_4* %691 = OpAccessChain %63 %201 
                                       f32_4 %692 = OpLoad %691 
                                       f32_4 %693 = OpVectorShuffle %692 %692 0 1 0 1 
                                       f32_4 %694 = OpFMul %690 %693 
                                       f32_4 %695 = OpLoad %232 
                                       f32_4 %696 = OpVectorShuffle %695 %695 3 1 3 2 
                                       f32_4 %697 = OpFAdd %694 %696 
                                                      OpStore %489 %697 
                                       f32_4 %698 = OpLoad %232 
                                       f32_2 %699 = OpVectorShuffle %698 %698 1 2 
                                       f32_4 %700 = OpLoad %469 
                                       f32_4 %701 = OpVectorShuffle %700 %699 0 4 2 5 
                                                      OpStore %469 %701 
                                       f32_4 %703 = OpLoad %489 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                         f32 %705 = OpLoad %398 
                                         f32 %706 = OpCompositeExtract %704 0 
                                         f32 %707 = OpCompositeExtract %704 1 
                                       f32_3 %708 = OpCompositeConstruct %706 %707 %705 
                                                      OpStore %702 %708 
                         read_only Texture2D %709 = OpLoad %622 
                                     sampler %710 = OpLoad %624 
                  read_only Texture2DSampled %711 = OpSampledImage %709 %710 
                                       f32_3 %712 = OpLoad %702 
                                         f32 %713 = OpCompositeExtract %712 2 
                                         f32 %714 = OpImageSampleDrefExplicitLod %711 %712 %713 Lod %6 
                                                      OpStore %621 %714 
                                       f32_4 %716 = OpLoad %489 
                                       f32_2 %717 = OpVectorShuffle %716 %716 2 3 
                                         f32 %718 = OpLoad %398 
                                         f32 %719 = OpCompositeExtract %717 0 
                                         f32 %720 = OpCompositeExtract %717 1 
                                       f32_3 %721 = OpCompositeConstruct %719 %720 %718 
                                                      OpStore %715 %721 
                         read_only Texture2D %722 = OpLoad %622 
                                     sampler %723 = OpLoad %624 
                  read_only Texture2DSampled %724 = OpSampledImage %722 %723 
                                       f32_3 %725 = OpLoad %715 
                                         f32 %726 = OpCompositeExtract %725 2 
                                         f32 %727 = OpImageSampleDrefExplicitLod %724 %725 %726 Lod %6 
                                                      OpStore %639 %727 
                                Private f32* %728 = OpAccessChain %464 %123 
                                         f32 %729 = OpLoad %728 
                                         f32 %730 = OpLoad %621 
                                         f32 %731 = OpFMul %729 %730 
                                Private f32* %732 = OpAccessChain %9 %27 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpFAdd %731 %733 
                                Private f32* %735 = OpAccessChain %9 %27 
                                                      OpStore %735 %734 
                                       f32_4 %736 = OpLoad %9 
                                       f32_4 %737 = OpVectorShuffle %736 %736 1 1 3 3 
                                       f32_4 %738 = OpLoad %53 
                                       f32_4 %739 = OpFMul %737 %738 
                                                      OpStore %232 %739 
                                Private f32* %741 = OpAccessChain %9 %123 
                                         f32 %742 = OpLoad %741 
                                Private f32* %743 = OpAccessChain %53 %114 
                                         f32 %744 = OpLoad %743 
                                         f32 %745 = OpFMul %742 %744 
                                                      OpStore %740 %745 
                                       f32_4 %746 = OpLoad %135 
                                       f32_4 %747 = OpVectorShuffle %746 %746 0 1 0 1 
                              Uniform f32_4* %748 = OpAccessChain %63 %201 
                                       f32_4 %749 = OpLoad %748 
                                       f32_4 %750 = OpVectorShuffle %749 %749 0 1 0 1 
                                       f32_4 %751 = OpFMul %747 %750 
                                       f32_4 %752 = OpLoad %469 
                                       f32_4 %753 = OpVectorShuffle %752 %752 0 1 2 1 
                                       f32_4 %754 = OpFAdd %751 %753 
                                                      OpStore %53 %754 
                                       f32_4 %755 = OpLoad %135 
                                       f32_4 %756 = OpVectorShuffle %755 %755 0 1 0 1 
                              Uniform f32_4* %757 = OpAccessChain %63 %201 
                                       f32_4 %758 = OpLoad %757 
                                       f32_4 %759 = OpVectorShuffle %758 %758 0 1 0 1 
                                       f32_4 %760 = OpFMul %756 %759 
                                       f32_4 %761 = OpLoad %469 
                                       f32_4 %762 = OpVectorShuffle %761 %761 0 3 2 3 
                                       f32_4 %763 = OpFAdd %760 %762 
                                                      OpStore %464 %763 
                                       f32_4 %765 = OpLoad %53 
                                       f32_2 %766 = OpVectorShuffle %765 %765 0 1 
                                         f32 %767 = OpLoad %398 
                                         f32 %768 = OpCompositeExtract %766 0 
                                         f32 %769 = OpCompositeExtract %766 1 
                                       f32_3 %770 = OpCompositeConstruct %768 %769 %767 
                                                      OpStore %764 %770 
                         read_only Texture2D %772 = OpLoad %622 
                                     sampler %773 = OpLoad %624 
                  read_only Texture2DSampled %774 = OpSampledImage %772 %773 
                                       f32_3 %775 = OpLoad %764 
                                         f32 %776 = OpCompositeExtract %775 2 
                                         f32 %777 = OpImageSampleDrefExplicitLod %774 %775 %776 Lod %6 
                                                      OpStore %771 %777 
                                       f32_4 %779 = OpLoad %53 
                                       f32_2 %780 = OpVectorShuffle %779 %779 2 3 
                                         f32 %781 = OpLoad %398 
                                         f32 %782 = OpCompositeExtract %780 0 
                                         f32 %783 = OpCompositeExtract %780 1 
                                       f32_3 %784 = OpCompositeConstruct %782 %783 %781 
                                                      OpStore %778 %784 
                         read_only Texture2D %786 = OpLoad %622 
                                     sampler %787 = OpLoad %624 
                  read_only Texture2DSampled %788 = OpSampledImage %786 %787 
                                       f32_3 %789 = OpLoad %778 
                                         f32 %790 = OpCompositeExtract %789 2 
                                         f32 %791 = OpImageSampleDrefExplicitLod %788 %789 %790 Lod %6 
                                                      OpStore %785 %791 
                                Private f32* %792 = OpAccessChain %232 %27 
                                         f32 %793 = OpLoad %792 
                                         f32 %794 = OpLoad %771 
                                         f32 %795 = OpFMul %793 %794 
                                Private f32* %796 = OpAccessChain %9 %27 
                                         f32 %797 = OpLoad %796 
                                         f32 %798 = OpFAdd %795 %797 
                                Private f32* %799 = OpAccessChain %9 %27 
                                                      OpStore %799 %798 
                                Private f32* %800 = OpAccessChain %232 %114 
                                         f32 %801 = OpLoad %800 
                                         f32 %802 = OpLoad %785 
                                         f32 %803 = OpFMul %801 %802 
                                Private f32* %804 = OpAccessChain %9 %27 
                                         f32 %805 = OpLoad %804 
                                         f32 %806 = OpFAdd %803 %805 
                                Private f32* %807 = OpAccessChain %9 %27 
                                                      OpStore %807 %806 
                                Private f32* %808 = OpAccessChain %232 %36 
                                         f32 %809 = OpLoad %808 
                                         f32 %810 = OpLoad %639 
                                         f32 %811 = OpFMul %809 %810 
                                Private f32* %812 = OpAccessChain %9 %27 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFAdd %811 %813 
                                Private f32* %815 = OpAccessChain %9 %27 
                                                      OpStore %815 %814 
                                       f32_4 %817 = OpLoad %464 
                                       f32_2 %818 = OpVectorShuffle %817 %817 0 1 
                                         f32 %819 = OpLoad %398 
                                         f32 %820 = OpCompositeExtract %818 0 
                                         f32 %821 = OpCompositeExtract %818 1 
                                       f32_3 %822 = OpCompositeConstruct %820 %821 %819 
                                                      OpStore %816 %822 
                         read_only Texture2D %823 = OpLoad %622 
                                     sampler %824 = OpLoad %624 
                  read_only Texture2DSampled %825 = OpSampledImage %823 %824 
                                       f32_3 %826 = OpLoad %816 
                                         f32 %827 = OpCompositeExtract %826 2 
                                         f32 %828 = OpImageSampleDrefExplicitLod %825 %826 %827 Lod %6 
                                                      OpStore %771 %828 
                                       f32_4 %830 = OpLoad %464 
                                       f32_2 %831 = OpVectorShuffle %830 %830 2 3 
                                         f32 %832 = OpLoad %398 
                                         f32 %833 = OpCompositeExtract %831 0 
                                         f32 %834 = OpCompositeExtract %831 1 
                                       f32_3 %835 = OpCompositeConstruct %833 %834 %832 
                                                      OpStore %829 %835 
                         read_only Texture2D %837 = OpLoad %622 
                                     sampler %838 = OpLoad %624 
                  read_only Texture2DSampled %839 = OpSampledImage %837 %838 
                                       f32_3 %840 = OpLoad %829 
                                         f32 %841 = OpCompositeExtract %840 2 
                                         f32 %842 = OpImageSampleDrefExplicitLod %839 %840 %841 Lod %6 
                                                      OpStore %836 %842 
                                Private f32* %843 = OpAccessChain %232 %123 
                                         f32 %844 = OpLoad %843 
                                         f32 %845 = OpLoad %771 
                                         f32 %846 = OpFMul %844 %845 
                                Private f32* %847 = OpAccessChain %9 %27 
                                         f32 %848 = OpLoad %847 
                                         f32 %849 = OpFAdd %846 %848 
                                Private f32* %850 = OpAccessChain %9 %27 
                                                      OpStore %850 %849 
                                         f32 %851 = OpLoad %740 
                                         f32 %852 = OpLoad %836 
                                         f32 %853 = OpFMul %851 %852 
                                Private f32* %854 = OpAccessChain %9 %27 
                                         f32 %855 = OpLoad %854 
                                         f32 %856 = OpFAdd %853 %855 
                                Private f32* %857 = OpAccessChain %9 %27 
                                                      OpStore %857 %856 
                                Uniform f32* %859 = OpAccessChain %63 %183 %27 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpFNegate %860 
                                         f32 %862 = OpFAdd %861 %34 
                                                      OpStore %740 %862 
                                       f32_4 %863 = OpLoad %9 
                                       f32_4 %864 = OpVectorShuffle %863 %863 0 0 0 0 
                                         f32 %865 = OpLoad %740 
                                       f32_4 %866 = OpCompositeConstruct %865 %865 %865 %865 
                                       f32_4 %867 = OpFMul %864 %866 
                              Uniform f32_4* %868 = OpAccessChain %63 %183 
                                       f32_4 %869 = OpLoad %868 
                                       f32_4 %870 = OpVectorShuffle %869 %869 0 0 0 0 
                                       f32_4 %871 = OpFAdd %867 %870 
                                                      OpStore %9 %871 
                                       f32_4 %874 = OpLoad %9 
                                                      OpStore %873 %874 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat16_3.xxx * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat2.xxzz * u_xlat2.xxzz;
    u_xlat15.xy = u_xlat2.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat2.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat5.z = u_xlat2.y;
    u_xlat5.w = u_xlat15.y;
    u_xlat2.w = u_xlat15.x;
    u_xlat3.zw = u_xlat4.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat5.xyz = u_xlat3.zyw / u_xlat0.xyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xyz = u_xlat5.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat2 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat4.xyz = u_xlat4.xzw / u_xlat2.zwy;
    u_xlat4.xyz = u_xlat4.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat4.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat2.zwyz;
    u_xlat0.x = u_xlat16_4 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat3 = u_xlat0.yyww * u_xlat2;
    u_xlat7 = u_xlat0.w * u_xlat2.y;
    u_xlat0.x = u_xlat3.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat3.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat3.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat3.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat16_3.xxx * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat2.xxzz * u_xlat2.xxzz;
    u_xlat15.xy = u_xlat2.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat2.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat5.z = u_xlat2.y;
    u_xlat5.w = u_xlat15.y;
    u_xlat2.w = u_xlat15.x;
    u_xlat3.zw = u_xlat4.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat5.xyz = u_xlat3.zyw / u_xlat0.xyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xyz = u_xlat5.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat2 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat4.xyz = u_xlat4.xzw / u_xlat2.zwy;
    u_xlat4.xyz = u_xlat4.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat4.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat2.zwyz;
    u_xlat0.x = u_xlat16_4 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat3 = u_xlat0.yyww * u_xlat2;
    u_xlat7 = u_xlat0.w * u_xlat2.y;
    u_xlat0.x = u_xlat3.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat3.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat3.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat3.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump float u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat16_3.xxx * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat2.xxzz * u_xlat2.xxzz;
    u_xlat15.xy = u_xlat2.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat2.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat5.z = u_xlat2.y;
    u_xlat5.w = u_xlat15.y;
    u_xlat2.w = u_xlat15.x;
    u_xlat3.zw = u_xlat4.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat5.xyz = u_xlat3.zyw / u_xlat0.xyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xyz = u_xlat5.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat5.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat2 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat4.xyz = u_xlat4.xzw / u_xlat2.zwy;
    u_xlat4.xyz = u_xlat4.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat4.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat2.zwyz;
    u_xlat0.x = u_xlat16_4 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat3 = u_xlat0.yyww * u_xlat2;
    u_xlat7 = u_xlat0.w * u_xlat2.y;
    u_xlat0.x = u_xlat3.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat3.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat3.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat3.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 936
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %933 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 RelaxedPrecision 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpMemberDecorate %62 6 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %681 DescriptorSet 681 
                                                      OpDecorate %681 Binding 681 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %683 DescriptorSet 683 
                                                      OpDecorate %683 Binding 683 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %768 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %861 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %905 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %920 RelaxedPrecision 
                                                      OpDecorate %921 RelaxedPrecision 
                                                      OpDecorate %922 RelaxedPrecision 
                                                      OpDecorate %929 RelaxedPrecision 
                                                      OpDecorate %930 RelaxedPrecision 
                                                      OpDecorate %933 RelaxedPrecision 
                                                      OpDecorate %933 Location 933 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                              Private f32_4* %138 = OpVariable Private 
                                         u32 %153 = OpConstant 1 
                                         u32 %184 = OpConstant 3 
                                             %186 = OpTypeBool 
                                             %187 = OpTypeVector %186 4 
                                             %188 = OpTypePointer Private %187 
                             Private bool_4* %189 = OpVariable Private 
                                             %194 = OpTypePointer Private %42 
                              Private f32_3* %195 = OpVariable Private 
                                             %196 = OpTypePointer Private %186 
                                         f32 %199 = OpConstant 3.674022E-40 
                                         f32 %212 = OpConstant 3.674022E-40 
                              Private f32_3* %231 = OpVariable Private 
                                       f32_3 %233 = OpConstantComposite %212 %212 %212 
                                         i32 %237 = OpConstant 4 
                                         i32 %238 = OpConstant 5 
                                         i32 %256 = OpConstant 6 
                                         i32 %268 = OpConstant 7 
                              Private f32_4* %287 = OpVariable Private 
                                         i32 %341 = OpConstant 9 
                                         i32 %348 = OpConstant 8 
                                         i32 %360 = OpConstant 10 
                                         i32 %372 = OpConstant 11 
                                         i32 %396 = OpConstant 13 
                                         i32 %403 = OpConstant 12 
                                         i32 %415 = OpConstant 14 
                                         i32 %427 = OpConstant 15 
                                Private f32* %452 = OpVariable Private 
                                       f32_4 %454 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %456 = OpVariable Private 
                                         f32 %470 = OpConstant 3.674022E-40 
                                       f32_2 %471 = OpConstantComposite %470 %470 
                                             %492 = OpTypePointer Private %22 
                              Private f32_2* %493 = OpVariable Private 
                                       f32_2 %496 = OpConstantComposite %212 %212 
                                       f32_4 %500 = OpConstantComposite %470 %34 %470 %34 
                                       f32_2 %510 = OpConstantComposite %34 %34 
                              Private f32_4* %512 = OpVariable Private 
                                         f32 %514 = OpConstant 3.674022E-40 
                                       f32_2 %515 = OpConstantComposite %514 %514 
                              Private f32_4* %527 = OpVariable Private 
                              Private f32_4* %547 = OpVariable Private 
                                         f32 %567 = OpConstant 3.674022E-40 
                                       f32_2 %568 = OpConstantComposite %567 %567 
                                         f32 %612 = OpConstant 3.674022E-40 
                                         f32 %613 = OpConstant 3.674022E-40 
                                         f32 %614 = OpConstant 3.674022E-40 
                                       f32_3 %615 = OpConstantComposite %612 %613 %614 
                                             %673 = OpTypePointer Function %42 
                                Private f32* %680 = OpVariable Private 
        UniformConstant read_only Texture2D* %681 = OpVariable UniformConstant 
                    UniformConstant sampler* %683 = OpVariable UniformConstant 
                                             %685 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %686 = OpTypeSampledImage %685 
                                Private f32* %698 = OpVariable Private 
                                Private f32* %712 = OpVariable Private 
                                Private f32* %820 = OpVariable Private 
                                Private f32* %834 = OpVariable Private 
                                Private f32* %845 = OpVariable Private 
                                Private f32* %882 = OpVariable Private 
                                Private f32* %896 = OpVariable Private 
                                             %918 = OpTypePointer Uniform %6 
                                             %932 = OpTypePointer Output %7 
                               Output f32_4* %933 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %674 = OpVariable Function 
                             Function f32_3* %691 = OpVariable Function 
                             Function f32_3* %705 = OpVariable Function 
                             Function f32_3* %761 = OpVariable Function 
                             Function f32_3* %774 = OpVariable Function 
                             Function f32_3* %813 = OpVariable Function 
                             Function f32_3* %827 = OpVariable Function 
                             Function f32_3* %875 = OpVariable Function 
                             Function f32_3* %889 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                              Uniform f32_4* %141 = OpAccessChain %64 %79 %67 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                       f32_4 %146 = OpLoad %138 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %138 %147 
                                       f32_4 %148 = OpLoad %138 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %138 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %149 %151 
                                Private f32* %154 = OpAccessChain %53 %153 
                                                      OpStore %154 %152 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %64 %79 %79 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %156 %160 
                                       f32_4 %162 = OpLoad %138 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %138 %163 
                                       f32_4 %164 = OpLoad %138 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %138 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                Private f32* %169 = OpAccessChain %53 %36 
                                                      OpStore %169 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                              Uniform f32_4* %172 = OpAccessChain %64 %79 %88 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpFAdd %171 %175 
                                       f32_4 %177 = OpLoad %138 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %138 %178 
                                       f32_4 %179 = OpLoad %138 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_4 %181 = OpLoad %138 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %180 %182 
                                Private f32* %185 = OpAccessChain %53 %184 
                                                      OpStore %185 %183 
                                       f32_4 %190 = OpLoad %53 
                              Uniform f32_4* %191 = OpAccessChain %64 %88 
                                       f32_4 %192 = OpLoad %191 
                                      bool_4 %193 = OpFOrdLessThan %190 %192 
                                                      OpStore %189 %193 
                               Private bool* %197 = OpAccessChain %189 %27 
                                        bool %198 = OpLoad %197 
                                         f32 %200 = OpSelect %198 %48 %199 
                                Private f32* %201 = OpAccessChain %195 %27 
                                                      OpStore %201 %200 
                               Private bool* %202 = OpAccessChain %189 %153 
                                        bool %203 = OpLoad %202 
                                         f32 %204 = OpSelect %203 %48 %199 
                                Private f32* %205 = OpAccessChain %195 %153 
                                                      OpStore %205 %204 
                               Private bool* %206 = OpAccessChain %189 %36 
                                        bool %207 = OpLoad %206 
                                         f32 %208 = OpSelect %207 %48 %199 
                                Private f32* %209 = OpAccessChain %195 %36 
                                                      OpStore %209 %208 
                               Private bool* %210 = OpAccessChain %189 %27 
                                        bool %211 = OpLoad %210 
                                         f32 %213 = OpSelect %211 %34 %212 
                                Private f32* %214 = OpAccessChain %53 %27 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %189 %153 
                                        bool %216 = OpLoad %215 
                                         f32 %217 = OpSelect %216 %34 %212 
                                Private f32* %218 = OpAccessChain %53 %153 
                                                      OpStore %218 %217 
                               Private bool* %219 = OpAccessChain %189 %36 
                                        bool %220 = OpLoad %219 
                                         f32 %221 = OpSelect %220 %34 %212 
                                Private f32* %222 = OpAccessChain %53 %36 
                                                      OpStore %222 %221 
                               Private bool* %223 = OpAccessChain %189 %184 
                                        bool %224 = OpLoad %223 
                                         f32 %225 = OpSelect %224 %34 %212 
                                Private f32* %226 = OpAccessChain %53 %184 
                                                      OpStore %226 %225 
                                       f32_3 %227 = OpLoad %195 
                                       f32_4 %228 = OpLoad %53 
                                       f32_3 %229 = OpVectorShuffle %228 %228 1 2 3 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %195 %230 
                                       f32_3 %232 = OpLoad %195 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %231 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %239 = OpAccessChain %64 %237 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %236 %241 
                                       f32_4 %243 = OpLoad %138 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %138 %244 
                              Uniform f32_4* %245 = OpAccessChain %64 %237 %237 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 0 0 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %138 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %138 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %138 %255 
                              Uniform f32_4* %257 = OpAccessChain %64 %237 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 2 2 2 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_4 %263 = OpLoad %138 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %138 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %138 %267 
                              Uniform f32_4* %269 = OpAccessChain %64 %237 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %138 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %138 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %138 %279 
                                       f32_3 %280 = OpLoad %231 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 0 0 
                                       f32_4 %282 = OpLoad %138 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %138 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %138 %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
                              Uniform f32_4* %290 = OpAccessChain %64 %237 %67 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFMul %289 %292 
                                       f32_4 %294 = OpLoad %287 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %287 %295 
                              Uniform f32_4* %296 = OpAccessChain %64 %237 %66 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %9 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 0 0 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %287 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %287 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %287 %306 
                              Uniform f32_4* %307 = OpAccessChain %64 %237 %79 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 2 2 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %287 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFAdd %312 %314 
                                       f32_4 %316 = OpLoad %287 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %287 %317 
                              Uniform f32_4* %318 = OpAccessChain %64 %237 %88 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 3 3 3 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %287 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %287 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %287 %328 
                                       f32_4 %329 = OpLoad %287 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %53 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 0 0 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %138 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %138 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %138 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %64 %237 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %340 %344 
                                       f32_4 %346 = OpLoad %287 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %287 %347 
                              Uniform f32_4* %349 = OpAccessChain %64 %237 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %287 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %287 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %287 %359 
                              Uniform f32_4* %361 = OpAccessChain %64 %237 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 2 2 2 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %287 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad %287 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %287 %371 
                              Uniform f32_4* %373 = OpAccessChain %64 %237 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %287 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %287 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %287 %383 
                                       f32_4 %384 = OpLoad %287 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %231 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 1 1 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %138 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %138 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %138 %393 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 1 1 1 
                              Uniform f32_4* %397 = OpAccessChain %64 %237 %396 
                                       f32_4 %398 = OpLoad %397 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFMul %395 %399 
                                       f32_4 %401 = OpLoad %287 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                                      OpStore %287 %402 
                              Uniform f32_4* %404 = OpAccessChain %64 %237 %403 
                                       f32_4 %405 = OpLoad %404 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %287 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %287 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %287 %414 
                              Uniform f32_4* %416 = OpAccessChain %64 %237 %415 
                                       f32_4 %417 = OpLoad %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 2 2 2 
                                       f32_3 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %287 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFAdd %421 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %9 %426 
                              Uniform f32_4* %428 = OpAccessChain %64 %237 %427 
                                       f32_4 %429 = OpLoad %428 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 3 3 3 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFAdd %433 %435 
                                       f32_4 %437 = OpLoad %9 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %9 %438 
                                       f32_4 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpLoad %231 
                                       f32_3 %442 = OpVectorShuffle %441 %441 2 2 2 
                                       f32_3 %443 = OpFMul %440 %442 
                                       f32_4 %444 = OpLoad %138 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_3 %446 = OpFAdd %443 %445 
                                       f32_4 %447 = OpLoad %9 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %9 %448 
                                       f32_3 %449 = OpLoad %231 
                                       f32_4 %450 = OpLoad %53 
                                       f32_4 %451 = OpVectorShuffle %450 %449 0 4 5 6 
                                                      OpStore %53 %451 
                                       f32_4 %453 = OpLoad %53 
                                         f32 %455 = OpDot %453 %454 
                                                      OpStore %452 %455 
                                         f32 %457 = OpLoad %452 
                                         f32 %458 = OpFNegate %457 
                                Private f32* %459 = OpAccessChain %9 %36 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFAdd %458 %460 
                                                      OpStore %456 %461 
                                         f32 %462 = OpLoad %456 
                                         f32 %463 = OpFAdd %462 %34 
                                                      OpStore %456 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_2 %465 = OpVectorShuffle %464 %464 0 1 
                              Uniform f32_4* %466 = OpAccessChain %64 %256 
                                       f32_4 %467 = OpLoad %466 
                                       f32_2 %468 = OpVectorShuffle %467 %467 2 3 
                                       f32_2 %469 = OpFMul %465 %468 
                                       f32_2 %472 = OpFAdd %469 %471 
                                       f32_4 %473 = OpLoad %53 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 2 3 
                                                      OpStore %53 %474 
                                       f32_4 %475 = OpLoad %53 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpExtInst %1 8 %476 
                                       f32_4 %478 = OpLoad %53 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 2 3 
                                                      OpStore %53 %479 
                                       f32_4 %480 = OpLoad %9 
                                       f32_2 %481 = OpVectorShuffle %480 %480 0 1 
                              Uniform f32_4* %482 = OpAccessChain %64 %256 
                                       f32_4 %483 = OpLoad %482 
                                       f32_2 %484 = OpVectorShuffle %483 %483 2 3 
                                       f32_2 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %53 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_2 %489 = OpFAdd %485 %488 
                                       f32_4 %490 = OpLoad %9 
                                       f32_4 %491 = OpVectorShuffle %490 %489 4 5 2 3 
                                                      OpStore %9 %491 
                                       f32_4 %494 = OpLoad %9 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                       f32_2 %497 = OpExtInst %1 40 %495 %496 
                                                      OpStore %493 %497 
                                       f32_4 %498 = OpLoad %9 
                                       f32_4 %499 = OpVectorShuffle %498 %498 0 0 1 1 
                                       f32_4 %501 = OpFAdd %499 %500 
                                                      OpStore %138 %501 
                                       f32_2 %502 = OpLoad %493 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpLoad %493 
                                       f32_2 %505 = OpFMul %503 %504 
                                       f32_4 %506 = OpLoad %138 
                                       f32_2 %507 = OpVectorShuffle %506 %506 1 3 
                                       f32_2 %508 = OpFAdd %505 %507 
                                                      OpStore %493 %508 
                                       f32_2 %509 = OpLoad %493 
                                       f32_2 %511 = OpFAdd %509 %510 
                                                      OpStore %493 %511 
                                       f32_2 %513 = OpLoad %493 
                                       f32_2 %516 = OpFMul %513 %515 
                                       f32_4 %517 = OpLoad %512 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 2 3 
                                                      OpStore %512 %518 
                                       f32_4 %519 = OpLoad %9 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 1 
                                       f32_2 %521 = OpFNegate %520 
                                       f32_2 %522 = OpFAdd %521 %510 
                                                      OpStore %493 %522 
                                       f32_2 %523 = OpLoad %493 
                                       f32_2 %524 = OpFMul %523 %515 
                                       f32_4 %525 = OpLoad %287 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 2 3 
                                                      OpStore %287 %526 
                                       f32_4 %528 = OpLoad %9 
                                       f32_2 %529 = OpVectorShuffle %528 %528 0 1 
                                       f32_2 %530 = OpExtInst %1 37 %529 %496 
                                       f32_4 %531 = OpLoad %527 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 2 3 
                                                      OpStore %527 %532 
                                       f32_4 %533 = OpLoad %527 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 1 
                                       f32_2 %535 = OpFNegate %534 
                                       f32_4 %536 = OpLoad %527 
                                       f32_2 %537 = OpVectorShuffle %536 %536 0 1 
                                       f32_2 %538 = OpFMul %535 %537 
                                       f32_2 %539 = OpLoad %493 
                                       f32_2 %540 = OpFAdd %538 %539 
                                                      OpStore %493 %540 
                                       f32_2 %541 = OpLoad %493 
                                       f32_2 %542 = OpFAdd %541 %510 
                                                      OpStore %493 %542 
                                       f32_2 %543 = OpLoad %493 
                                       f32_2 %544 = OpFMul %543 %515 
                                       f32_4 %545 = OpLoad %527 
                                       f32_4 %546 = OpVectorShuffle %545 %544 4 5 2 3 
                                                      OpStore %527 %546 
                                       f32_4 %548 = OpLoad %138 
                                       f32_4 %549 = OpVectorShuffle %548 %548 0 0 2 2 
                                       f32_4 %550 = OpLoad %138 
                                       f32_4 %551 = OpVectorShuffle %550 %550 0 0 2 2 
                                       f32_4 %552 = OpFMul %549 %551 
                                                      OpStore %547 %552 
                                       f32_4 %553 = OpLoad %138 
                                       f32_2 %554 = OpVectorShuffle %553 %553 1 3 
                                       f32_2 %555 = OpFMul %554 %515 
                                                      OpStore %493 %555 
                                       f32_4 %556 = OpLoad %547 
                                       f32_2 %557 = OpVectorShuffle %556 %556 0 2 
                                       f32_2 %558 = OpFMul %557 %471 
                                       f32_4 %559 = OpLoad %9 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 1 
                                       f32_2 %561 = OpFNegate %560 
                                       f32_2 %562 = OpFAdd %558 %561 
                                       f32_4 %563 = OpLoad %9 
                                       f32_4 %564 = OpVectorShuffle %563 %562 4 5 2 3 
                                                      OpStore %9 %564 
                                       f32_4 %565 = OpLoad %547 
                                       f32_2 %566 = OpVectorShuffle %565 %565 3 1 
                                       f32_2 %569 = OpFMul %566 %568 
                                       f32_4 %570 = OpLoad %287 
                                       f32_4 %571 = OpVectorShuffle %570 %569 0 1 4 5 
                                                      OpStore %287 %571 
                                       f32_4 %572 = OpLoad %9 
                                       f32_2 %573 = OpVectorShuffle %572 %572 0 1 
                                       f32_2 %574 = OpFMul %573 %515 
                                       f32_4 %575 = OpLoad %138 
                                       f32_4 %576 = OpVectorShuffle %575 %574 4 5 2 3 
                                                      OpStore %138 %576 
                                Private f32* %577 = OpAccessChain %138 %153 
                                         f32 %578 = OpLoad %577 
                                Private f32* %579 = OpAccessChain %527 %36 
                                                      OpStore %579 %578 
                                Private f32* %580 = OpAccessChain %493 %153 
                                         f32 %581 = OpLoad %580 
                                Private f32* %582 = OpAccessChain %527 %184 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %493 %27 
                                         f32 %584 = OpLoad %583 
                                Private f32* %585 = OpAccessChain %138 %184 
                                                      OpStore %585 %584 
                                       f32_4 %586 = OpLoad %287 
                                       f32_2 %587 = OpVectorShuffle %586 %586 1 2 
                                       f32_4 %588 = OpLoad %512 
                                       f32_4 %589 = OpVectorShuffle %588 %587 0 1 4 5 
                                                      OpStore %512 %589 
                                       f32_4 %590 = OpLoad %512 
                                       f32_3 %591 = OpVectorShuffle %590 %590 2 1 3 
                                       f32_4 %592 = OpLoad %527 
                                       f32_3 %593 = OpVectorShuffle %592 %592 2 1 3 
                                       f32_3 %594 = OpFAdd %591 %593 
                                       f32_4 %595 = OpLoad %9 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 2 6 
                                                      OpStore %9 %596 
                                Private f32* %597 = OpAccessChain %527 %27 
                                         f32 %598 = OpLoad %597 
                                Private f32* %599 = OpAccessChain %138 %36 
                                                      OpStore %599 %598 
                                       f32_4 %600 = OpLoad %512 
                                       f32_3 %601 = OpVectorShuffle %600 %600 2 1 3 
                                       f32_4 %602 = OpLoad %9 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 3 
                                       f32_3 %604 = OpFDiv %601 %603 
                                       f32_4 %605 = OpLoad %527 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 6 3 
                                                      OpStore %527 %606 
                                Private f32* %607 = OpAccessChain %512 %27 
                                         f32 %608 = OpLoad %607 
                                Private f32* %609 = OpAccessChain %287 %36 
                                                      OpStore %609 %608 
                                       f32_4 %610 = OpLoad %527 
                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
                                       f32_3 %616 = OpFAdd %611 %615 
                                       f32_4 %617 = OpLoad %527 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 6 3 
                                                      OpStore %527 %618 
                                       f32_4 %619 = OpLoad %527 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                              Uniform f32_4* %621 = OpAccessChain %64 %256 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 1 1 1 
                                       f32_3 %624 = OpFMul %620 %623 
                                       f32_4 %625 = OpLoad %512 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 5 6 3 
                                                      OpStore %512 %626 
                                Private f32* %627 = OpAccessChain %512 %27 
                                         f32 %628 = OpLoad %627 
                                Private f32* %629 = OpAccessChain %527 %184 
                                                      OpStore %629 %628 
                                       f32_4 %630 = OpLoad %138 
                                       f32_4 %631 = OpVectorShuffle %630 %630 2 3 0 2 
                                       f32_4 %632 = OpLoad %287 
                                       f32_4 %633 = OpVectorShuffle %632 %632 2 3 0 2 
                                       f32_4 %634 = OpFAdd %631 %633 
                                                      OpStore %138 %634 
                                       f32_4 %635 = OpLoad %287 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 2 3 
                                       f32_4 %637 = OpLoad %138 
                                       f32_3 %638 = OpVectorShuffle %637 %637 2 3 1 
                                       f32_3 %639 = OpFDiv %636 %638 
                                       f32_4 %640 = OpLoad %287 
                                       f32_4 %641 = OpVectorShuffle %640 %639 4 5 6 3 
                                                      OpStore %287 %641 
                                       f32_4 %642 = OpLoad %287 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 2 
                                       f32_3 %644 = OpFAdd %643 %615 
                                       f32_4 %645 = OpLoad %287 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %287 %646 
                                       f32_4 %647 = OpLoad %287 
                                       f32_3 %648 = OpVectorShuffle %647 %647 1 0 2 
                              Uniform f32_4* %649 = OpAccessChain %64 %256 
                                       f32_4 %650 = OpLoad %649 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 0 0 
                                       f32_3 %652 = OpFMul %648 %651 
                                       f32_4 %653 = OpLoad %527 
                                       f32_4 %654 = OpVectorShuffle %653 %652 4 5 6 3 
                                                      OpStore %527 %654 
                                       f32_4 %655 = OpLoad %53 
                                       f32_4 %656 = OpVectorShuffle %655 %655 0 1 0 1 
                              Uniform f32_4* %657 = OpAccessChain %64 %256 
                                       f32_4 %658 = OpLoad %657 
                                       f32_4 %659 = OpVectorShuffle %658 %658 0 1 0 1 
                                       f32_4 %660 = OpFMul %656 %659 
                                       f32_4 %661 = OpLoad %527 
                                       f32_4 %662 = OpVectorShuffle %661 %661 1 3 0 3 
                                       f32_4 %663 = OpFAdd %660 %662 
                                                      OpStore %287 %663 
                                       f32_4 %664 = OpLoad %53 
                                       f32_2 %665 = OpVectorShuffle %664 %664 0 1 
                              Uniform f32_4* %666 = OpAccessChain %64 %256 
                                       f32_4 %667 = OpLoad %666 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 1 
                                       f32_2 %669 = OpFMul %665 %668 
                                       f32_4 %670 = OpLoad %527 
                                       f32_2 %671 = OpVectorShuffle %670 %670 2 3 
                                       f32_2 %672 = OpFAdd %669 %671 
                                                      OpStore %493 %672 
                                       f32_2 %675 = OpLoad %493 
                                         f32 %676 = OpLoad %456 
                                         f32 %677 = OpCompositeExtract %675 0 
                                         f32 %678 = OpCompositeExtract %675 1 
                                       f32_3 %679 = OpCompositeConstruct %677 %678 %676 
                                                      OpStore %674 %679 
                         read_only Texture2D %682 = OpLoad %681 
                                     sampler %684 = OpLoad %683 
                  read_only Texture2DSampled %687 = OpSampledImage %682 %684 
                                       f32_3 %688 = OpLoad %674 
                                         f32 %689 = OpCompositeExtract %688 2 
                                         f32 %690 = OpImageSampleDrefExplicitLod %687 %688 %689 Lod %6 
                                                      OpStore %680 %690 
                                       f32_4 %692 = OpLoad %287 
                                       f32_2 %693 = OpVectorShuffle %692 %692 0 1 
                                         f32 %694 = OpLoad %456 
                                         f32 %695 = OpCompositeExtract %693 0 
                                         f32 %696 = OpCompositeExtract %693 1 
                                       f32_3 %697 = OpCompositeConstruct %695 %696 %694 
                                                      OpStore %691 %697 
                         read_only Texture2D %699 = OpLoad %681 
                                     sampler %700 = OpLoad %683 
                  read_only Texture2DSampled %701 = OpSampledImage %699 %700 
                                       f32_3 %702 = OpLoad %691 
                                         f32 %703 = OpCompositeExtract %702 2 
                                         f32 %704 = OpImageSampleDrefExplicitLod %701 %702 %703 Lod %6 
                                                      OpStore %698 %704 
                                       f32_4 %706 = OpLoad %287 
                                       f32_2 %707 = OpVectorShuffle %706 %706 2 3 
                                         f32 %708 = OpLoad %456 
                                         f32 %709 = OpCompositeExtract %707 0 
                                         f32 %710 = OpCompositeExtract %707 1 
                                       f32_3 %711 = OpCompositeConstruct %709 %710 %708 
                                                      OpStore %705 %711 
                         read_only Texture2D %713 = OpLoad %681 
                                     sampler %714 = OpLoad %683 
                  read_only Texture2DSampled %715 = OpSampledImage %713 %714 
                                       f32_3 %716 = OpLoad %705 
                                         f32 %717 = OpCompositeExtract %716 2 
                                         f32 %718 = OpImageSampleDrefExplicitLod %715 %716 %717 Lod %6 
                                                      OpStore %712 %718 
                                       f32_4 %719 = OpLoad %9 
                                       f32_4 %720 = OpVectorShuffle %719 %719 0 0 0 1 
                                       f32_4 %721 = OpLoad %138 
                                       f32_4 %722 = OpVectorShuffle %721 %721 2 3 1 2 
                                       f32_4 %723 = OpFMul %720 %722 
                                                      OpStore %547 %723 
                                         f32 %724 = OpLoad %712 
                                Private f32* %725 = OpAccessChain %547 %153 
                                         f32 %726 = OpLoad %725 
                                         f32 %727 = OpFMul %724 %726 
                                Private f32* %728 = OpAccessChain %9 %27 
                                                      OpStore %728 %727 
                                Private f32* %729 = OpAccessChain %547 %27 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpLoad %698 
                                         f32 %732 = OpFMul %730 %731 
                                Private f32* %733 = OpAccessChain %9 %27 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFAdd %732 %734 
                                Private f32* %736 = OpAccessChain %9 %27 
                                                      OpStore %736 %735 
                                Private f32* %737 = OpAccessChain %547 %36 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpLoad %680 
                                         f32 %740 = OpFMul %738 %739 
                                Private f32* %741 = OpAccessChain %9 %27 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFAdd %740 %742 
                                Private f32* %744 = OpAccessChain %9 %27 
                                                      OpStore %744 %743 
                                Private f32* %745 = OpAccessChain %527 %153 
                                         f32 %746 = OpLoad %745 
                                Private f32* %747 = OpAccessChain %512 %184 
                                                      OpStore %747 %746 
                                       f32_4 %748 = OpLoad %53 
                                       f32_4 %749 = OpVectorShuffle %748 %748 0 1 0 1 
                              Uniform f32_4* %750 = OpAccessChain %64 %256 
                                       f32_4 %751 = OpLoad %750 
                                       f32_4 %752 = OpVectorShuffle %751 %751 0 1 0 1 
                                       f32_4 %753 = OpFMul %749 %752 
                                       f32_4 %754 = OpLoad %512 
                                       f32_4 %755 = OpVectorShuffle %754 %754 3 1 3 2 
                                       f32_4 %756 = OpFAdd %753 %755 
                                                      OpStore %287 %756 
                                       f32_4 %757 = OpLoad %512 
                                       f32_2 %758 = OpVectorShuffle %757 %757 1 2 
                                       f32_4 %759 = OpLoad %527 
                                       f32_4 %760 = OpVectorShuffle %759 %758 0 4 2 5 
                                                      OpStore %527 %760 
                                       f32_4 %762 = OpLoad %287 
                                       f32_2 %763 = OpVectorShuffle %762 %762 0 1 
                                         f32 %764 = OpLoad %456 
                                         f32 %765 = OpCompositeExtract %763 0 
                                         f32 %766 = OpCompositeExtract %763 1 
                                       f32_3 %767 = OpCompositeConstruct %765 %766 %764 
                                                      OpStore %761 %767 
                         read_only Texture2D %768 = OpLoad %681 
                                     sampler %769 = OpLoad %683 
                  read_only Texture2DSampled %770 = OpSampledImage %768 %769 
                                       f32_3 %771 = OpLoad %761 
                                         f32 %772 = OpCompositeExtract %771 2 
                                         f32 %773 = OpImageSampleDrefExplicitLod %770 %771 %772 Lod %6 
                                                      OpStore %680 %773 
                                       f32_4 %775 = OpLoad %287 
                                       f32_2 %776 = OpVectorShuffle %775 %775 2 3 
                                         f32 %777 = OpLoad %456 
                                         f32 %778 = OpCompositeExtract %776 0 
                                         f32 %779 = OpCompositeExtract %776 1 
                                       f32_3 %780 = OpCompositeConstruct %778 %779 %777 
                                                      OpStore %774 %780 
                         read_only Texture2D %781 = OpLoad %681 
                                     sampler %782 = OpLoad %683 
                  read_only Texture2DSampled %783 = OpSampledImage %781 %782 
                                       f32_3 %784 = OpLoad %774 
                                         f32 %785 = OpCompositeExtract %784 2 
                                         f32 %786 = OpImageSampleDrefExplicitLod %783 %784 %785 Lod %6 
                                                      OpStore %698 %786 
                                Private f32* %787 = OpAccessChain %547 %184 
                                         f32 %788 = OpLoad %787 
                                         f32 %789 = OpLoad %680 
                                         f32 %790 = OpFMul %788 %789 
                                Private f32* %791 = OpAccessChain %9 %27 
                                         f32 %792 = OpLoad %791 
                                         f32 %793 = OpFAdd %790 %792 
                                Private f32* %794 = OpAccessChain %9 %27 
                                                      OpStore %794 %793 
                                       f32_4 %795 = OpLoad %53 
                                       f32_4 %796 = OpVectorShuffle %795 %795 0 1 0 1 
                              Uniform f32_4* %797 = OpAccessChain %64 %256 
                                       f32_4 %798 = OpLoad %797 
                                       f32_4 %799 = OpVectorShuffle %798 %798 0 1 0 1 
                                       f32_4 %800 = OpFMul %796 %799 
                                       f32_4 %801 = OpLoad %527 
                                       f32_4 %802 = OpVectorShuffle %801 %801 0 1 2 1 
                                       f32_4 %803 = OpFAdd %800 %802 
                                                      OpStore %512 %803 
                                       f32_4 %804 = OpLoad %53 
                                       f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                              Uniform f32_4* %806 = OpAccessChain %64 %256 
                                       f32_4 %807 = OpLoad %806 
                                       f32_4 %808 = OpVectorShuffle %807 %807 0 1 0 1 
                                       f32_4 %809 = OpFMul %805 %808 
                                       f32_4 %810 = OpLoad %527 
                                       f32_4 %811 = OpVectorShuffle %810 %810 0 3 2 3 
                                       f32_4 %812 = OpFAdd %809 %811 
                                                      OpStore %287 %812 
                                       f32_4 %814 = OpLoad %512 
                                       f32_2 %815 = OpVectorShuffle %814 %814 0 1 
                                         f32 %816 = OpLoad %456 
                                         f32 %817 = OpCompositeExtract %815 0 
                                         f32 %818 = OpCompositeExtract %815 1 
                                       f32_3 %819 = OpCompositeConstruct %817 %818 %816 
                                                      OpStore %813 %819 
                         read_only Texture2D %821 = OpLoad %681 
                                     sampler %822 = OpLoad %683 
                  read_only Texture2DSampled %823 = OpSampledImage %821 %822 
                                       f32_3 %824 = OpLoad %813 
                                         f32 %825 = OpCompositeExtract %824 2 
                                         f32 %826 = OpImageSampleDrefExplicitLod %823 %824 %825 Lod %6 
                                                      OpStore %820 %826 
                                       f32_4 %828 = OpLoad %512 
                                       f32_2 %829 = OpVectorShuffle %828 %828 2 3 
                                         f32 %830 = OpLoad %456 
                                         f32 %831 = OpCompositeExtract %829 0 
                                         f32 %832 = OpCompositeExtract %829 1 
                                       f32_3 %833 = OpCompositeConstruct %831 %832 %830 
                                                      OpStore %827 %833 
                         read_only Texture2D %835 = OpLoad %681 
                                     sampler %836 = OpLoad %683 
                  read_only Texture2DSampled %837 = OpSampledImage %835 %836 
                                       f32_3 %838 = OpLoad %827 
                                         f32 %839 = OpCompositeExtract %838 2 
                                         f32 %840 = OpImageSampleDrefExplicitLod %837 %838 %839 Lod %6 
                                                      OpStore %834 %840 
                                       f32_4 %841 = OpLoad %9 
                                       f32_4 %842 = OpVectorShuffle %841 %841 1 1 3 3 
                                       f32_4 %843 = OpLoad %138 
                                       f32_4 %844 = OpFMul %842 %843 
                                                      OpStore %512 %844 
                                Private f32* %846 = OpAccessChain %9 %184 
                                         f32 %847 = OpLoad %846 
                                Private f32* %848 = OpAccessChain %138 %153 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFMul %847 %849 
                                                      OpStore %845 %850 
                                Private f32* %851 = OpAccessChain %512 %27 
                                         f32 %852 = OpLoad %851 
                                         f32 %853 = OpLoad %820 
                                         f32 %854 = OpFMul %852 %853 
                                Private f32* %855 = OpAccessChain %9 %27 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpFAdd %854 %856 
                                Private f32* %858 = OpAccessChain %9 %27 
                                                      OpStore %858 %857 
                                Private f32* %859 = OpAccessChain %512 %153 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpLoad %834 
                                         f32 %862 = OpFMul %860 %861 
                                Private f32* %863 = OpAccessChain %9 %27 
                                         f32 %864 = OpLoad %863 
                                         f32 %865 = OpFAdd %862 %864 
                                Private f32* %866 = OpAccessChain %9 %27 
                                                      OpStore %866 %865 
                                Private f32* %867 = OpAccessChain %512 %36 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpLoad %698 
                                         f32 %870 = OpFMul %868 %869 
                                Private f32* %871 = OpAccessChain %9 %27 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFAdd %870 %872 
                                Private f32* %874 = OpAccessChain %9 %27 
                                                      OpStore %874 %873 
                                       f32_4 %876 = OpLoad %287 
                                       f32_2 %877 = OpVectorShuffle %876 %876 0 1 
                                         f32 %878 = OpLoad %456 
                                         f32 %879 = OpCompositeExtract %877 0 
                                         f32 %880 = OpCompositeExtract %877 1 
                                       f32_3 %881 = OpCompositeConstruct %879 %880 %878 
                                                      OpStore %875 %881 
                         read_only Texture2D %883 = OpLoad %681 
                                     sampler %884 = OpLoad %683 
                  read_only Texture2DSampled %885 = OpSampledImage %883 %884 
                                       f32_3 %886 = OpLoad %875 
                                         f32 %887 = OpCompositeExtract %886 2 
                                         f32 %888 = OpImageSampleDrefExplicitLod %885 %886 %887 Lod %6 
                                                      OpStore %882 %888 
                                       f32_4 %890 = OpLoad %287 
                                       f32_2 %891 = OpVectorShuffle %890 %890 2 3 
                                         f32 %892 = OpLoad %456 
                                         f32 %893 = OpCompositeExtract %891 0 
                                         f32 %894 = OpCompositeExtract %891 1 
                                       f32_3 %895 = OpCompositeConstruct %893 %894 %892 
                                                      OpStore %889 %895 
                         read_only Texture2D %897 = OpLoad %681 
                                     sampler %898 = OpLoad %683 
                  read_only Texture2DSampled %899 = OpSampledImage %897 %898 
                                       f32_3 %900 = OpLoad %889 
                                         f32 %901 = OpCompositeExtract %900 2 
                                         f32 %902 = OpImageSampleDrefExplicitLod %899 %900 %901 Lod %6 
                                                      OpStore %896 %902 
                                Private f32* %903 = OpAccessChain %512 %184 
                                         f32 %904 = OpLoad %903 
                                         f32 %905 = OpLoad %882 
                                         f32 %906 = OpFMul %904 %905 
                                Private f32* %907 = OpAccessChain %9 %27 
                                         f32 %908 = OpLoad %907 
                                         f32 %909 = OpFAdd %906 %908 
                                Private f32* %910 = OpAccessChain %9 %27 
                                                      OpStore %910 %909 
                                         f32 %911 = OpLoad %845 
                                         f32 %912 = OpLoad %896 
                                         f32 %913 = OpFMul %911 %912 
                                Private f32* %914 = OpAccessChain %9 %27 
                                         f32 %915 = OpLoad %914 
                                         f32 %916 = OpFAdd %913 %915 
                                Private f32* %917 = OpAccessChain %9 %27 
                                                      OpStore %917 %916 
                                Uniform f32* %919 = OpAccessChain %64 %238 %27 
                                         f32 %920 = OpLoad %919 
                                         f32 %921 = OpFNegate %920 
                                         f32 %922 = OpFAdd %921 %34 
                                                      OpStore %845 %922 
                                       f32_4 %923 = OpLoad %9 
                                       f32_4 %924 = OpVectorShuffle %923 %923 0 0 0 0 
                                         f32 %925 = OpLoad %845 
                                       f32_4 %926 = OpCompositeConstruct %925 %925 %925 %925 
                                       f32_4 %927 = OpFMul %924 %926 
                              Uniform f32_4* %928 = OpAccessChain %64 %238 
                                       f32_4 %929 = OpLoad %928 
                                       f32_4 %930 = OpVectorShuffle %929 %929 0 0 0 0 
                                       f32_4 %931 = OpFAdd %927 %930 
                                                      OpStore %9 %931 
                                       f32_4 %934 = OpLoad %9 
                                                      OpStore %933 %934 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 936
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %933 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 RelaxedPrecision 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpMemberDecorate %62 6 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %681 DescriptorSet 681 
                                                      OpDecorate %681 Binding 681 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %683 DescriptorSet 683 
                                                      OpDecorate %683 Binding 683 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %768 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %861 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %905 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %920 RelaxedPrecision 
                                                      OpDecorate %921 RelaxedPrecision 
                                                      OpDecorate %922 RelaxedPrecision 
                                                      OpDecorate %929 RelaxedPrecision 
                                                      OpDecorate %930 RelaxedPrecision 
                                                      OpDecorate %933 RelaxedPrecision 
                                                      OpDecorate %933 Location 933 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                              Private f32_4* %138 = OpVariable Private 
                                         u32 %153 = OpConstant 1 
                                         u32 %184 = OpConstant 3 
                                             %186 = OpTypeBool 
                                             %187 = OpTypeVector %186 4 
                                             %188 = OpTypePointer Private %187 
                             Private bool_4* %189 = OpVariable Private 
                                             %194 = OpTypePointer Private %42 
                              Private f32_3* %195 = OpVariable Private 
                                             %196 = OpTypePointer Private %186 
                                         f32 %199 = OpConstant 3.674022E-40 
                                         f32 %212 = OpConstant 3.674022E-40 
                              Private f32_3* %231 = OpVariable Private 
                                       f32_3 %233 = OpConstantComposite %212 %212 %212 
                                         i32 %237 = OpConstant 4 
                                         i32 %238 = OpConstant 5 
                                         i32 %256 = OpConstant 6 
                                         i32 %268 = OpConstant 7 
                              Private f32_4* %287 = OpVariable Private 
                                         i32 %341 = OpConstant 9 
                                         i32 %348 = OpConstant 8 
                                         i32 %360 = OpConstant 10 
                                         i32 %372 = OpConstant 11 
                                         i32 %396 = OpConstant 13 
                                         i32 %403 = OpConstant 12 
                                         i32 %415 = OpConstant 14 
                                         i32 %427 = OpConstant 15 
                                Private f32* %452 = OpVariable Private 
                                       f32_4 %454 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %456 = OpVariable Private 
                                         f32 %470 = OpConstant 3.674022E-40 
                                       f32_2 %471 = OpConstantComposite %470 %470 
                                             %492 = OpTypePointer Private %22 
                              Private f32_2* %493 = OpVariable Private 
                                       f32_2 %496 = OpConstantComposite %212 %212 
                                       f32_4 %500 = OpConstantComposite %470 %34 %470 %34 
                                       f32_2 %510 = OpConstantComposite %34 %34 
                              Private f32_4* %512 = OpVariable Private 
                                         f32 %514 = OpConstant 3.674022E-40 
                                       f32_2 %515 = OpConstantComposite %514 %514 
                              Private f32_4* %527 = OpVariable Private 
                              Private f32_4* %547 = OpVariable Private 
                                         f32 %567 = OpConstant 3.674022E-40 
                                       f32_2 %568 = OpConstantComposite %567 %567 
                                         f32 %612 = OpConstant 3.674022E-40 
                                         f32 %613 = OpConstant 3.674022E-40 
                                         f32 %614 = OpConstant 3.674022E-40 
                                       f32_3 %615 = OpConstantComposite %612 %613 %614 
                                             %673 = OpTypePointer Function %42 
                                Private f32* %680 = OpVariable Private 
        UniformConstant read_only Texture2D* %681 = OpVariable UniformConstant 
                    UniformConstant sampler* %683 = OpVariable UniformConstant 
                                             %685 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %686 = OpTypeSampledImage %685 
                                Private f32* %698 = OpVariable Private 
                                Private f32* %712 = OpVariable Private 
                                Private f32* %820 = OpVariable Private 
                                Private f32* %834 = OpVariable Private 
                                Private f32* %845 = OpVariable Private 
                                Private f32* %882 = OpVariable Private 
                                Private f32* %896 = OpVariable Private 
                                             %918 = OpTypePointer Uniform %6 
                                             %932 = OpTypePointer Output %7 
                               Output f32_4* %933 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %674 = OpVariable Function 
                             Function f32_3* %691 = OpVariable Function 
                             Function f32_3* %705 = OpVariable Function 
                             Function f32_3* %761 = OpVariable Function 
                             Function f32_3* %774 = OpVariable Function 
                             Function f32_3* %813 = OpVariable Function 
                             Function f32_3* %827 = OpVariable Function 
                             Function f32_3* %875 = OpVariable Function 
                             Function f32_3* %889 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                              Uniform f32_4* %141 = OpAccessChain %64 %79 %67 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                       f32_4 %146 = OpLoad %138 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %138 %147 
                                       f32_4 %148 = OpLoad %138 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %138 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %149 %151 
                                Private f32* %154 = OpAccessChain %53 %153 
                                                      OpStore %154 %152 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %64 %79 %79 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %156 %160 
                                       f32_4 %162 = OpLoad %138 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %138 %163 
                                       f32_4 %164 = OpLoad %138 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %138 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                Private f32* %169 = OpAccessChain %53 %36 
                                                      OpStore %169 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                              Uniform f32_4* %172 = OpAccessChain %64 %79 %88 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpFAdd %171 %175 
                                       f32_4 %177 = OpLoad %138 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %138 %178 
                                       f32_4 %179 = OpLoad %138 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_4 %181 = OpLoad %138 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %180 %182 
                                Private f32* %185 = OpAccessChain %53 %184 
                                                      OpStore %185 %183 
                                       f32_4 %190 = OpLoad %53 
                              Uniform f32_4* %191 = OpAccessChain %64 %88 
                                       f32_4 %192 = OpLoad %191 
                                      bool_4 %193 = OpFOrdLessThan %190 %192 
                                                      OpStore %189 %193 
                               Private bool* %197 = OpAccessChain %189 %27 
                                        bool %198 = OpLoad %197 
                                         f32 %200 = OpSelect %198 %48 %199 
                                Private f32* %201 = OpAccessChain %195 %27 
                                                      OpStore %201 %200 
                               Private bool* %202 = OpAccessChain %189 %153 
                                        bool %203 = OpLoad %202 
                                         f32 %204 = OpSelect %203 %48 %199 
                                Private f32* %205 = OpAccessChain %195 %153 
                                                      OpStore %205 %204 
                               Private bool* %206 = OpAccessChain %189 %36 
                                        bool %207 = OpLoad %206 
                                         f32 %208 = OpSelect %207 %48 %199 
                                Private f32* %209 = OpAccessChain %195 %36 
                                                      OpStore %209 %208 
                               Private bool* %210 = OpAccessChain %189 %27 
                                        bool %211 = OpLoad %210 
                                         f32 %213 = OpSelect %211 %34 %212 
                                Private f32* %214 = OpAccessChain %53 %27 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %189 %153 
                                        bool %216 = OpLoad %215 
                                         f32 %217 = OpSelect %216 %34 %212 
                                Private f32* %218 = OpAccessChain %53 %153 
                                                      OpStore %218 %217 
                               Private bool* %219 = OpAccessChain %189 %36 
                                        bool %220 = OpLoad %219 
                                         f32 %221 = OpSelect %220 %34 %212 
                                Private f32* %222 = OpAccessChain %53 %36 
                                                      OpStore %222 %221 
                               Private bool* %223 = OpAccessChain %189 %184 
                                        bool %224 = OpLoad %223 
                                         f32 %225 = OpSelect %224 %34 %212 
                                Private f32* %226 = OpAccessChain %53 %184 
                                                      OpStore %226 %225 
                                       f32_3 %227 = OpLoad %195 
                                       f32_4 %228 = OpLoad %53 
                                       f32_3 %229 = OpVectorShuffle %228 %228 1 2 3 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %195 %230 
                                       f32_3 %232 = OpLoad %195 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %231 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %239 = OpAccessChain %64 %237 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %236 %241 
                                       f32_4 %243 = OpLoad %138 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %138 %244 
                              Uniform f32_4* %245 = OpAccessChain %64 %237 %237 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 0 0 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %138 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %138 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %138 %255 
                              Uniform f32_4* %257 = OpAccessChain %64 %237 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 2 2 2 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_4 %263 = OpLoad %138 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %138 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %138 %267 
                              Uniform f32_4* %269 = OpAccessChain %64 %237 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %138 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %138 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %138 %279 
                                       f32_3 %280 = OpLoad %231 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 0 0 
                                       f32_4 %282 = OpLoad %138 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %138 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %138 %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
                              Uniform f32_4* %290 = OpAccessChain %64 %237 %67 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFMul %289 %292 
                                       f32_4 %294 = OpLoad %287 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %287 %295 
                              Uniform f32_4* %296 = OpAccessChain %64 %237 %66 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %9 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 0 0 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %287 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %287 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %287 %306 
                              Uniform f32_4* %307 = OpAccessChain %64 %237 %79 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 2 2 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %287 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFAdd %312 %314 
                                       f32_4 %316 = OpLoad %287 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %287 %317 
                              Uniform f32_4* %318 = OpAccessChain %64 %237 %88 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 3 3 3 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %287 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %287 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %287 %328 
                                       f32_4 %329 = OpLoad %287 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %53 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 0 0 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %138 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %138 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %138 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %64 %237 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %340 %344 
                                       f32_4 %346 = OpLoad %287 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %287 %347 
                              Uniform f32_4* %349 = OpAccessChain %64 %237 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %287 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %287 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %287 %359 
                              Uniform f32_4* %361 = OpAccessChain %64 %237 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 2 2 2 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %287 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad %287 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %287 %371 
                              Uniform f32_4* %373 = OpAccessChain %64 %237 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %287 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %287 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %287 %383 
                                       f32_4 %384 = OpLoad %287 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %231 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 1 1 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %138 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %138 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %138 %393 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 1 1 1 
                              Uniform f32_4* %397 = OpAccessChain %64 %237 %396 
                                       f32_4 %398 = OpLoad %397 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFMul %395 %399 
                                       f32_4 %401 = OpLoad %287 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                                      OpStore %287 %402 
                              Uniform f32_4* %404 = OpAccessChain %64 %237 %403 
                                       f32_4 %405 = OpLoad %404 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %287 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %287 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %287 %414 
                              Uniform f32_4* %416 = OpAccessChain %64 %237 %415 
                                       f32_4 %417 = OpLoad %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 2 2 2 
                                       f32_3 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %287 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFAdd %421 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %9 %426 
                              Uniform f32_4* %428 = OpAccessChain %64 %237 %427 
                                       f32_4 %429 = OpLoad %428 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 3 3 3 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFAdd %433 %435 
                                       f32_4 %437 = OpLoad %9 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %9 %438 
                                       f32_4 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpLoad %231 
                                       f32_3 %442 = OpVectorShuffle %441 %441 2 2 2 
                                       f32_3 %443 = OpFMul %440 %442 
                                       f32_4 %444 = OpLoad %138 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_3 %446 = OpFAdd %443 %445 
                                       f32_4 %447 = OpLoad %9 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %9 %448 
                                       f32_3 %449 = OpLoad %231 
                                       f32_4 %450 = OpLoad %53 
                                       f32_4 %451 = OpVectorShuffle %450 %449 0 4 5 6 
                                                      OpStore %53 %451 
                                       f32_4 %453 = OpLoad %53 
                                         f32 %455 = OpDot %453 %454 
                                                      OpStore %452 %455 
                                         f32 %457 = OpLoad %452 
                                         f32 %458 = OpFNegate %457 
                                Private f32* %459 = OpAccessChain %9 %36 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFAdd %458 %460 
                                                      OpStore %456 %461 
                                         f32 %462 = OpLoad %456 
                                         f32 %463 = OpFAdd %462 %34 
                                                      OpStore %456 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_2 %465 = OpVectorShuffle %464 %464 0 1 
                              Uniform f32_4* %466 = OpAccessChain %64 %256 
                                       f32_4 %467 = OpLoad %466 
                                       f32_2 %468 = OpVectorShuffle %467 %467 2 3 
                                       f32_2 %469 = OpFMul %465 %468 
                                       f32_2 %472 = OpFAdd %469 %471 
                                       f32_4 %473 = OpLoad %53 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 2 3 
                                                      OpStore %53 %474 
                                       f32_4 %475 = OpLoad %53 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpExtInst %1 8 %476 
                                       f32_4 %478 = OpLoad %53 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 2 3 
                                                      OpStore %53 %479 
                                       f32_4 %480 = OpLoad %9 
                                       f32_2 %481 = OpVectorShuffle %480 %480 0 1 
                              Uniform f32_4* %482 = OpAccessChain %64 %256 
                                       f32_4 %483 = OpLoad %482 
                                       f32_2 %484 = OpVectorShuffle %483 %483 2 3 
                                       f32_2 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %53 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_2 %489 = OpFAdd %485 %488 
                                       f32_4 %490 = OpLoad %9 
                                       f32_4 %491 = OpVectorShuffle %490 %489 4 5 2 3 
                                                      OpStore %9 %491 
                                       f32_4 %494 = OpLoad %9 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                       f32_2 %497 = OpExtInst %1 40 %495 %496 
                                                      OpStore %493 %497 
                                       f32_4 %498 = OpLoad %9 
                                       f32_4 %499 = OpVectorShuffle %498 %498 0 0 1 1 
                                       f32_4 %501 = OpFAdd %499 %500 
                                                      OpStore %138 %501 
                                       f32_2 %502 = OpLoad %493 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpLoad %493 
                                       f32_2 %505 = OpFMul %503 %504 
                                       f32_4 %506 = OpLoad %138 
                                       f32_2 %507 = OpVectorShuffle %506 %506 1 3 
                                       f32_2 %508 = OpFAdd %505 %507 
                                                      OpStore %493 %508 
                                       f32_2 %509 = OpLoad %493 
                                       f32_2 %511 = OpFAdd %509 %510 
                                                      OpStore %493 %511 
                                       f32_2 %513 = OpLoad %493 
                                       f32_2 %516 = OpFMul %513 %515 
                                       f32_4 %517 = OpLoad %512 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 2 3 
                                                      OpStore %512 %518 
                                       f32_4 %519 = OpLoad %9 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 1 
                                       f32_2 %521 = OpFNegate %520 
                                       f32_2 %522 = OpFAdd %521 %510 
                                                      OpStore %493 %522 
                                       f32_2 %523 = OpLoad %493 
                                       f32_2 %524 = OpFMul %523 %515 
                                       f32_4 %525 = OpLoad %287 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 2 3 
                                                      OpStore %287 %526 
                                       f32_4 %528 = OpLoad %9 
                                       f32_2 %529 = OpVectorShuffle %528 %528 0 1 
                                       f32_2 %530 = OpExtInst %1 37 %529 %496 
                                       f32_4 %531 = OpLoad %527 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 2 3 
                                                      OpStore %527 %532 
                                       f32_4 %533 = OpLoad %527 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 1 
                                       f32_2 %535 = OpFNegate %534 
                                       f32_4 %536 = OpLoad %527 
                                       f32_2 %537 = OpVectorShuffle %536 %536 0 1 
                                       f32_2 %538 = OpFMul %535 %537 
                                       f32_2 %539 = OpLoad %493 
                                       f32_2 %540 = OpFAdd %538 %539 
                                                      OpStore %493 %540 
                                       f32_2 %541 = OpLoad %493 
                                       f32_2 %542 = OpFAdd %541 %510 
                                                      OpStore %493 %542 
                                       f32_2 %543 = OpLoad %493 
                                       f32_2 %544 = OpFMul %543 %515 
                                       f32_4 %545 = OpLoad %527 
                                       f32_4 %546 = OpVectorShuffle %545 %544 4 5 2 3 
                                                      OpStore %527 %546 
                                       f32_4 %548 = OpLoad %138 
                                       f32_4 %549 = OpVectorShuffle %548 %548 0 0 2 2 
                                       f32_4 %550 = OpLoad %138 
                                       f32_4 %551 = OpVectorShuffle %550 %550 0 0 2 2 
                                       f32_4 %552 = OpFMul %549 %551 
                                                      OpStore %547 %552 
                                       f32_4 %553 = OpLoad %138 
                                       f32_2 %554 = OpVectorShuffle %553 %553 1 3 
                                       f32_2 %555 = OpFMul %554 %515 
                                                      OpStore %493 %555 
                                       f32_4 %556 = OpLoad %547 
                                       f32_2 %557 = OpVectorShuffle %556 %556 0 2 
                                       f32_2 %558 = OpFMul %557 %471 
                                       f32_4 %559 = OpLoad %9 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 1 
                                       f32_2 %561 = OpFNegate %560 
                                       f32_2 %562 = OpFAdd %558 %561 
                                       f32_4 %563 = OpLoad %9 
                                       f32_4 %564 = OpVectorShuffle %563 %562 4 5 2 3 
                                                      OpStore %9 %564 
                                       f32_4 %565 = OpLoad %547 
                                       f32_2 %566 = OpVectorShuffle %565 %565 3 1 
                                       f32_2 %569 = OpFMul %566 %568 
                                       f32_4 %570 = OpLoad %287 
                                       f32_4 %571 = OpVectorShuffle %570 %569 0 1 4 5 
                                                      OpStore %287 %571 
                                       f32_4 %572 = OpLoad %9 
                                       f32_2 %573 = OpVectorShuffle %572 %572 0 1 
                                       f32_2 %574 = OpFMul %573 %515 
                                       f32_4 %575 = OpLoad %138 
                                       f32_4 %576 = OpVectorShuffle %575 %574 4 5 2 3 
                                                      OpStore %138 %576 
                                Private f32* %577 = OpAccessChain %138 %153 
                                         f32 %578 = OpLoad %577 
                                Private f32* %579 = OpAccessChain %527 %36 
                                                      OpStore %579 %578 
                                Private f32* %580 = OpAccessChain %493 %153 
                                         f32 %581 = OpLoad %580 
                                Private f32* %582 = OpAccessChain %527 %184 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %493 %27 
                                         f32 %584 = OpLoad %583 
                                Private f32* %585 = OpAccessChain %138 %184 
                                                      OpStore %585 %584 
                                       f32_4 %586 = OpLoad %287 
                                       f32_2 %587 = OpVectorShuffle %586 %586 1 2 
                                       f32_4 %588 = OpLoad %512 
                                       f32_4 %589 = OpVectorShuffle %588 %587 0 1 4 5 
                                                      OpStore %512 %589 
                                       f32_4 %590 = OpLoad %512 
                                       f32_3 %591 = OpVectorShuffle %590 %590 2 1 3 
                                       f32_4 %592 = OpLoad %527 
                                       f32_3 %593 = OpVectorShuffle %592 %592 2 1 3 
                                       f32_3 %594 = OpFAdd %591 %593 
                                       f32_4 %595 = OpLoad %9 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 2 6 
                                                      OpStore %9 %596 
                                Private f32* %597 = OpAccessChain %527 %27 
                                         f32 %598 = OpLoad %597 
                                Private f32* %599 = OpAccessChain %138 %36 
                                                      OpStore %599 %598 
                                       f32_4 %600 = OpLoad %512 
                                       f32_3 %601 = OpVectorShuffle %600 %600 2 1 3 
                                       f32_4 %602 = OpLoad %9 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 3 
                                       f32_3 %604 = OpFDiv %601 %603 
                                       f32_4 %605 = OpLoad %527 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 6 3 
                                                      OpStore %527 %606 
                                Private f32* %607 = OpAccessChain %512 %27 
                                         f32 %608 = OpLoad %607 
                                Private f32* %609 = OpAccessChain %287 %36 
                                                      OpStore %609 %608 
                                       f32_4 %610 = OpLoad %527 
                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
                                       f32_3 %616 = OpFAdd %611 %615 
                                       f32_4 %617 = OpLoad %527 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 6 3 
                                                      OpStore %527 %618 
                                       f32_4 %619 = OpLoad %527 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                              Uniform f32_4* %621 = OpAccessChain %64 %256 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 1 1 1 
                                       f32_3 %624 = OpFMul %620 %623 
                                       f32_4 %625 = OpLoad %512 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 5 6 3 
                                                      OpStore %512 %626 
                                Private f32* %627 = OpAccessChain %512 %27 
                                         f32 %628 = OpLoad %627 
                                Private f32* %629 = OpAccessChain %527 %184 
                                                      OpStore %629 %628 
                                       f32_4 %630 = OpLoad %138 
                                       f32_4 %631 = OpVectorShuffle %630 %630 2 3 0 2 
                                       f32_4 %632 = OpLoad %287 
                                       f32_4 %633 = OpVectorShuffle %632 %632 2 3 0 2 
                                       f32_4 %634 = OpFAdd %631 %633 
                                                      OpStore %138 %634 
                                       f32_4 %635 = OpLoad %287 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 2 3 
                                       f32_4 %637 = OpLoad %138 
                                       f32_3 %638 = OpVectorShuffle %637 %637 2 3 1 
                                       f32_3 %639 = OpFDiv %636 %638 
                                       f32_4 %640 = OpLoad %287 
                                       f32_4 %641 = OpVectorShuffle %640 %639 4 5 6 3 
                                                      OpStore %287 %641 
                                       f32_4 %642 = OpLoad %287 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 2 
                                       f32_3 %644 = OpFAdd %643 %615 
                                       f32_4 %645 = OpLoad %287 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %287 %646 
                                       f32_4 %647 = OpLoad %287 
                                       f32_3 %648 = OpVectorShuffle %647 %647 1 0 2 
                              Uniform f32_4* %649 = OpAccessChain %64 %256 
                                       f32_4 %650 = OpLoad %649 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 0 0 
                                       f32_3 %652 = OpFMul %648 %651 
                                       f32_4 %653 = OpLoad %527 
                                       f32_4 %654 = OpVectorShuffle %653 %652 4 5 6 3 
                                                      OpStore %527 %654 
                                       f32_4 %655 = OpLoad %53 
                                       f32_4 %656 = OpVectorShuffle %655 %655 0 1 0 1 
                              Uniform f32_4* %657 = OpAccessChain %64 %256 
                                       f32_4 %658 = OpLoad %657 
                                       f32_4 %659 = OpVectorShuffle %658 %658 0 1 0 1 
                                       f32_4 %660 = OpFMul %656 %659 
                                       f32_4 %661 = OpLoad %527 
                                       f32_4 %662 = OpVectorShuffle %661 %661 1 3 0 3 
                                       f32_4 %663 = OpFAdd %660 %662 
                                                      OpStore %287 %663 
                                       f32_4 %664 = OpLoad %53 
                                       f32_2 %665 = OpVectorShuffle %664 %664 0 1 
                              Uniform f32_4* %666 = OpAccessChain %64 %256 
                                       f32_4 %667 = OpLoad %666 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 1 
                                       f32_2 %669 = OpFMul %665 %668 
                                       f32_4 %670 = OpLoad %527 
                                       f32_2 %671 = OpVectorShuffle %670 %670 2 3 
                                       f32_2 %672 = OpFAdd %669 %671 
                                                      OpStore %493 %672 
                                       f32_2 %675 = OpLoad %493 
                                         f32 %676 = OpLoad %456 
                                         f32 %677 = OpCompositeExtract %675 0 
                                         f32 %678 = OpCompositeExtract %675 1 
                                       f32_3 %679 = OpCompositeConstruct %677 %678 %676 
                                                      OpStore %674 %679 
                         read_only Texture2D %682 = OpLoad %681 
                                     sampler %684 = OpLoad %683 
                  read_only Texture2DSampled %687 = OpSampledImage %682 %684 
                                       f32_3 %688 = OpLoad %674 
                                         f32 %689 = OpCompositeExtract %688 2 
                                         f32 %690 = OpImageSampleDrefExplicitLod %687 %688 %689 Lod %6 
                                                      OpStore %680 %690 
                                       f32_4 %692 = OpLoad %287 
                                       f32_2 %693 = OpVectorShuffle %692 %692 0 1 
                                         f32 %694 = OpLoad %456 
                                         f32 %695 = OpCompositeExtract %693 0 
                                         f32 %696 = OpCompositeExtract %693 1 
                                       f32_3 %697 = OpCompositeConstruct %695 %696 %694 
                                                      OpStore %691 %697 
                         read_only Texture2D %699 = OpLoad %681 
                                     sampler %700 = OpLoad %683 
                  read_only Texture2DSampled %701 = OpSampledImage %699 %700 
                                       f32_3 %702 = OpLoad %691 
                                         f32 %703 = OpCompositeExtract %702 2 
                                         f32 %704 = OpImageSampleDrefExplicitLod %701 %702 %703 Lod %6 
                                                      OpStore %698 %704 
                                       f32_4 %706 = OpLoad %287 
                                       f32_2 %707 = OpVectorShuffle %706 %706 2 3 
                                         f32 %708 = OpLoad %456 
                                         f32 %709 = OpCompositeExtract %707 0 
                                         f32 %710 = OpCompositeExtract %707 1 
                                       f32_3 %711 = OpCompositeConstruct %709 %710 %708 
                                                      OpStore %705 %711 
                         read_only Texture2D %713 = OpLoad %681 
                                     sampler %714 = OpLoad %683 
                  read_only Texture2DSampled %715 = OpSampledImage %713 %714 
                                       f32_3 %716 = OpLoad %705 
                                         f32 %717 = OpCompositeExtract %716 2 
                                         f32 %718 = OpImageSampleDrefExplicitLod %715 %716 %717 Lod %6 
                                                      OpStore %712 %718 
                                       f32_4 %719 = OpLoad %9 
                                       f32_4 %720 = OpVectorShuffle %719 %719 0 0 0 1 
                                       f32_4 %721 = OpLoad %138 
                                       f32_4 %722 = OpVectorShuffle %721 %721 2 3 1 2 
                                       f32_4 %723 = OpFMul %720 %722 
                                                      OpStore %547 %723 
                                         f32 %724 = OpLoad %712 
                                Private f32* %725 = OpAccessChain %547 %153 
                                         f32 %726 = OpLoad %725 
                                         f32 %727 = OpFMul %724 %726 
                                Private f32* %728 = OpAccessChain %9 %27 
                                                      OpStore %728 %727 
                                Private f32* %729 = OpAccessChain %547 %27 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpLoad %698 
                                         f32 %732 = OpFMul %730 %731 
                                Private f32* %733 = OpAccessChain %9 %27 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFAdd %732 %734 
                                Private f32* %736 = OpAccessChain %9 %27 
                                                      OpStore %736 %735 
                                Private f32* %737 = OpAccessChain %547 %36 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpLoad %680 
                                         f32 %740 = OpFMul %738 %739 
                                Private f32* %741 = OpAccessChain %9 %27 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFAdd %740 %742 
                                Private f32* %744 = OpAccessChain %9 %27 
                                                      OpStore %744 %743 
                                Private f32* %745 = OpAccessChain %527 %153 
                                         f32 %746 = OpLoad %745 
                                Private f32* %747 = OpAccessChain %512 %184 
                                                      OpStore %747 %746 
                                       f32_4 %748 = OpLoad %53 
                                       f32_4 %749 = OpVectorShuffle %748 %748 0 1 0 1 
                              Uniform f32_4* %750 = OpAccessChain %64 %256 
                                       f32_4 %751 = OpLoad %750 
                                       f32_4 %752 = OpVectorShuffle %751 %751 0 1 0 1 
                                       f32_4 %753 = OpFMul %749 %752 
                                       f32_4 %754 = OpLoad %512 
                                       f32_4 %755 = OpVectorShuffle %754 %754 3 1 3 2 
                                       f32_4 %756 = OpFAdd %753 %755 
                                                      OpStore %287 %756 
                                       f32_4 %757 = OpLoad %512 
                                       f32_2 %758 = OpVectorShuffle %757 %757 1 2 
                                       f32_4 %759 = OpLoad %527 
                                       f32_4 %760 = OpVectorShuffle %759 %758 0 4 2 5 
                                                      OpStore %527 %760 
                                       f32_4 %762 = OpLoad %287 
                                       f32_2 %763 = OpVectorShuffle %762 %762 0 1 
                                         f32 %764 = OpLoad %456 
                                         f32 %765 = OpCompositeExtract %763 0 
                                         f32 %766 = OpCompositeExtract %763 1 
                                       f32_3 %767 = OpCompositeConstruct %765 %766 %764 
                                                      OpStore %761 %767 
                         read_only Texture2D %768 = OpLoad %681 
                                     sampler %769 = OpLoad %683 
                  read_only Texture2DSampled %770 = OpSampledImage %768 %769 
                                       f32_3 %771 = OpLoad %761 
                                         f32 %772 = OpCompositeExtract %771 2 
                                         f32 %773 = OpImageSampleDrefExplicitLod %770 %771 %772 Lod %6 
                                                      OpStore %680 %773 
                                       f32_4 %775 = OpLoad %287 
                                       f32_2 %776 = OpVectorShuffle %775 %775 2 3 
                                         f32 %777 = OpLoad %456 
                                         f32 %778 = OpCompositeExtract %776 0 
                                         f32 %779 = OpCompositeExtract %776 1 
                                       f32_3 %780 = OpCompositeConstruct %778 %779 %777 
                                                      OpStore %774 %780 
                         read_only Texture2D %781 = OpLoad %681 
                                     sampler %782 = OpLoad %683 
                  read_only Texture2DSampled %783 = OpSampledImage %781 %782 
                                       f32_3 %784 = OpLoad %774 
                                         f32 %785 = OpCompositeExtract %784 2 
                                         f32 %786 = OpImageSampleDrefExplicitLod %783 %784 %785 Lod %6 
                                                      OpStore %698 %786 
                                Private f32* %787 = OpAccessChain %547 %184 
                                         f32 %788 = OpLoad %787 
                                         f32 %789 = OpLoad %680 
                                         f32 %790 = OpFMul %788 %789 
                                Private f32* %791 = OpAccessChain %9 %27 
                                         f32 %792 = OpLoad %791 
                                         f32 %793 = OpFAdd %790 %792 
                                Private f32* %794 = OpAccessChain %9 %27 
                                                      OpStore %794 %793 
                                       f32_4 %795 = OpLoad %53 
                                       f32_4 %796 = OpVectorShuffle %795 %795 0 1 0 1 
                              Uniform f32_4* %797 = OpAccessChain %64 %256 
                                       f32_4 %798 = OpLoad %797 
                                       f32_4 %799 = OpVectorShuffle %798 %798 0 1 0 1 
                                       f32_4 %800 = OpFMul %796 %799 
                                       f32_4 %801 = OpLoad %527 
                                       f32_4 %802 = OpVectorShuffle %801 %801 0 1 2 1 
                                       f32_4 %803 = OpFAdd %800 %802 
                                                      OpStore %512 %803 
                                       f32_4 %804 = OpLoad %53 
                                       f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                              Uniform f32_4* %806 = OpAccessChain %64 %256 
                                       f32_4 %807 = OpLoad %806 
                                       f32_4 %808 = OpVectorShuffle %807 %807 0 1 0 1 
                                       f32_4 %809 = OpFMul %805 %808 
                                       f32_4 %810 = OpLoad %527 
                                       f32_4 %811 = OpVectorShuffle %810 %810 0 3 2 3 
                                       f32_4 %812 = OpFAdd %809 %811 
                                                      OpStore %287 %812 
                                       f32_4 %814 = OpLoad %512 
                                       f32_2 %815 = OpVectorShuffle %814 %814 0 1 
                                         f32 %816 = OpLoad %456 
                                         f32 %817 = OpCompositeExtract %815 0 
                                         f32 %818 = OpCompositeExtract %815 1 
                                       f32_3 %819 = OpCompositeConstruct %817 %818 %816 
                                                      OpStore %813 %819 
                         read_only Texture2D %821 = OpLoad %681 
                                     sampler %822 = OpLoad %683 
                  read_only Texture2DSampled %823 = OpSampledImage %821 %822 
                                       f32_3 %824 = OpLoad %813 
                                         f32 %825 = OpCompositeExtract %824 2 
                                         f32 %826 = OpImageSampleDrefExplicitLod %823 %824 %825 Lod %6 
                                                      OpStore %820 %826 
                                       f32_4 %828 = OpLoad %512 
                                       f32_2 %829 = OpVectorShuffle %828 %828 2 3 
                                         f32 %830 = OpLoad %456 
                                         f32 %831 = OpCompositeExtract %829 0 
                                         f32 %832 = OpCompositeExtract %829 1 
                                       f32_3 %833 = OpCompositeConstruct %831 %832 %830 
                                                      OpStore %827 %833 
                         read_only Texture2D %835 = OpLoad %681 
                                     sampler %836 = OpLoad %683 
                  read_only Texture2DSampled %837 = OpSampledImage %835 %836 
                                       f32_3 %838 = OpLoad %827 
                                         f32 %839 = OpCompositeExtract %838 2 
                                         f32 %840 = OpImageSampleDrefExplicitLod %837 %838 %839 Lod %6 
                                                      OpStore %834 %840 
                                       f32_4 %841 = OpLoad %9 
                                       f32_4 %842 = OpVectorShuffle %841 %841 1 1 3 3 
                                       f32_4 %843 = OpLoad %138 
                                       f32_4 %844 = OpFMul %842 %843 
                                                      OpStore %512 %844 
                                Private f32* %846 = OpAccessChain %9 %184 
                                         f32 %847 = OpLoad %846 
                                Private f32* %848 = OpAccessChain %138 %153 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFMul %847 %849 
                                                      OpStore %845 %850 
                                Private f32* %851 = OpAccessChain %512 %27 
                                         f32 %852 = OpLoad %851 
                                         f32 %853 = OpLoad %820 
                                         f32 %854 = OpFMul %852 %853 
                                Private f32* %855 = OpAccessChain %9 %27 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpFAdd %854 %856 
                                Private f32* %858 = OpAccessChain %9 %27 
                                                      OpStore %858 %857 
                                Private f32* %859 = OpAccessChain %512 %153 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpLoad %834 
                                         f32 %862 = OpFMul %860 %861 
                                Private f32* %863 = OpAccessChain %9 %27 
                                         f32 %864 = OpLoad %863 
                                         f32 %865 = OpFAdd %862 %864 
                                Private f32* %866 = OpAccessChain %9 %27 
                                                      OpStore %866 %865 
                                Private f32* %867 = OpAccessChain %512 %36 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpLoad %698 
                                         f32 %870 = OpFMul %868 %869 
                                Private f32* %871 = OpAccessChain %9 %27 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFAdd %870 %872 
                                Private f32* %874 = OpAccessChain %9 %27 
                                                      OpStore %874 %873 
                                       f32_4 %876 = OpLoad %287 
                                       f32_2 %877 = OpVectorShuffle %876 %876 0 1 
                                         f32 %878 = OpLoad %456 
                                         f32 %879 = OpCompositeExtract %877 0 
                                         f32 %880 = OpCompositeExtract %877 1 
                                       f32_3 %881 = OpCompositeConstruct %879 %880 %878 
                                                      OpStore %875 %881 
                         read_only Texture2D %883 = OpLoad %681 
                                     sampler %884 = OpLoad %683 
                  read_only Texture2DSampled %885 = OpSampledImage %883 %884 
                                       f32_3 %886 = OpLoad %875 
                                         f32 %887 = OpCompositeExtract %886 2 
                                         f32 %888 = OpImageSampleDrefExplicitLod %885 %886 %887 Lod %6 
                                                      OpStore %882 %888 
                                       f32_4 %890 = OpLoad %287 
                                       f32_2 %891 = OpVectorShuffle %890 %890 2 3 
                                         f32 %892 = OpLoad %456 
                                         f32 %893 = OpCompositeExtract %891 0 
                                         f32 %894 = OpCompositeExtract %891 1 
                                       f32_3 %895 = OpCompositeConstruct %893 %894 %892 
                                                      OpStore %889 %895 
                         read_only Texture2D %897 = OpLoad %681 
                                     sampler %898 = OpLoad %683 
                  read_only Texture2DSampled %899 = OpSampledImage %897 %898 
                                       f32_3 %900 = OpLoad %889 
                                         f32 %901 = OpCompositeExtract %900 2 
                                         f32 %902 = OpImageSampleDrefExplicitLod %899 %900 %901 Lod %6 
                                                      OpStore %896 %902 
                                Private f32* %903 = OpAccessChain %512 %184 
                                         f32 %904 = OpLoad %903 
                                         f32 %905 = OpLoad %882 
                                         f32 %906 = OpFMul %904 %905 
                                Private f32* %907 = OpAccessChain %9 %27 
                                         f32 %908 = OpLoad %907 
                                         f32 %909 = OpFAdd %906 %908 
                                Private f32* %910 = OpAccessChain %9 %27 
                                                      OpStore %910 %909 
                                         f32 %911 = OpLoad %845 
                                         f32 %912 = OpLoad %896 
                                         f32 %913 = OpFMul %911 %912 
                                Private f32* %914 = OpAccessChain %9 %27 
                                         f32 %915 = OpLoad %914 
                                         f32 %916 = OpFAdd %913 %915 
                                Private f32* %917 = OpAccessChain %9 %27 
                                                      OpStore %917 %916 
                                Uniform f32* %919 = OpAccessChain %64 %238 %27 
                                         f32 %920 = OpLoad %919 
                                         f32 %921 = OpFNegate %920 
                                         f32 %922 = OpFAdd %921 %34 
                                                      OpStore %845 %922 
                                       f32_4 %923 = OpLoad %9 
                                       f32_4 %924 = OpVectorShuffle %923 %923 0 0 0 0 
                                         f32 %925 = OpLoad %845 
                                       f32_4 %926 = OpCompositeConstruct %925 %925 %925 %925 
                                       f32_4 %927 = OpFMul %924 %926 
                              Uniform f32_4* %928 = OpAccessChain %64 %238 
                                       f32_4 %929 = OpLoad %928 
                                       f32_4 %930 = OpVectorShuffle %929 %929 0 0 0 0 
                                       f32_4 %931 = OpFAdd %927 %930 
                                                      OpStore %9 %931 
                                       f32_4 %934 = OpLoad %9 
                                                      OpStore %933 %934 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 936
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %933 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 RelaxedPrecision 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpMemberDecorate %62 6 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %681 DescriptorSet 681 
                                                      OpDecorate %681 Binding 681 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %683 DescriptorSet 683 
                                                      OpDecorate %683 Binding 683 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %768 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %861 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %905 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %920 RelaxedPrecision 
                                                      OpDecorate %921 RelaxedPrecision 
                                                      OpDecorate %922 RelaxedPrecision 
                                                      OpDecorate %929 RelaxedPrecision 
                                                      OpDecorate %930 RelaxedPrecision 
                                                      OpDecorate %933 RelaxedPrecision 
                                                      OpDecorate %933 Location 933 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                              Private f32_4* %138 = OpVariable Private 
                                         u32 %153 = OpConstant 1 
                                         u32 %184 = OpConstant 3 
                                             %186 = OpTypeBool 
                                             %187 = OpTypeVector %186 4 
                                             %188 = OpTypePointer Private %187 
                             Private bool_4* %189 = OpVariable Private 
                                             %194 = OpTypePointer Private %42 
                              Private f32_3* %195 = OpVariable Private 
                                             %196 = OpTypePointer Private %186 
                                         f32 %199 = OpConstant 3.674022E-40 
                                         f32 %212 = OpConstant 3.674022E-40 
                              Private f32_3* %231 = OpVariable Private 
                                       f32_3 %233 = OpConstantComposite %212 %212 %212 
                                         i32 %237 = OpConstant 4 
                                         i32 %238 = OpConstant 5 
                                         i32 %256 = OpConstant 6 
                                         i32 %268 = OpConstant 7 
                              Private f32_4* %287 = OpVariable Private 
                                         i32 %341 = OpConstant 9 
                                         i32 %348 = OpConstant 8 
                                         i32 %360 = OpConstant 10 
                                         i32 %372 = OpConstant 11 
                                         i32 %396 = OpConstant 13 
                                         i32 %403 = OpConstant 12 
                                         i32 %415 = OpConstant 14 
                                         i32 %427 = OpConstant 15 
                                Private f32* %452 = OpVariable Private 
                                       f32_4 %454 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %456 = OpVariable Private 
                                         f32 %470 = OpConstant 3.674022E-40 
                                       f32_2 %471 = OpConstantComposite %470 %470 
                                             %492 = OpTypePointer Private %22 
                              Private f32_2* %493 = OpVariable Private 
                                       f32_2 %496 = OpConstantComposite %212 %212 
                                       f32_4 %500 = OpConstantComposite %470 %34 %470 %34 
                                       f32_2 %510 = OpConstantComposite %34 %34 
                              Private f32_4* %512 = OpVariable Private 
                                         f32 %514 = OpConstant 3.674022E-40 
                                       f32_2 %515 = OpConstantComposite %514 %514 
                              Private f32_4* %527 = OpVariable Private 
                              Private f32_4* %547 = OpVariable Private 
                                         f32 %567 = OpConstant 3.674022E-40 
                                       f32_2 %568 = OpConstantComposite %567 %567 
                                         f32 %612 = OpConstant 3.674022E-40 
                                         f32 %613 = OpConstant 3.674022E-40 
                                         f32 %614 = OpConstant 3.674022E-40 
                                       f32_3 %615 = OpConstantComposite %612 %613 %614 
                                             %673 = OpTypePointer Function %42 
                                Private f32* %680 = OpVariable Private 
        UniformConstant read_only Texture2D* %681 = OpVariable UniformConstant 
                    UniformConstant sampler* %683 = OpVariable UniformConstant 
                                             %685 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %686 = OpTypeSampledImage %685 
                                Private f32* %698 = OpVariable Private 
                                Private f32* %712 = OpVariable Private 
                                Private f32* %820 = OpVariable Private 
                                Private f32* %834 = OpVariable Private 
                                Private f32* %845 = OpVariable Private 
                                Private f32* %882 = OpVariable Private 
                                Private f32* %896 = OpVariable Private 
                                             %918 = OpTypePointer Uniform %6 
                                             %932 = OpTypePointer Output %7 
                               Output f32_4* %933 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %674 = OpVariable Function 
                             Function f32_3* %691 = OpVariable Function 
                             Function f32_3* %705 = OpVariable Function 
                             Function f32_3* %761 = OpVariable Function 
                             Function f32_3* %774 = OpVariable Function 
                             Function f32_3* %813 = OpVariable Function 
                             Function f32_3* %827 = OpVariable Function 
                             Function f32_3* %875 = OpVariable Function 
                             Function f32_3* %889 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                              Uniform f32_4* %141 = OpAccessChain %64 %79 %67 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                       f32_4 %146 = OpLoad %138 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %138 %147 
                                       f32_4 %148 = OpLoad %138 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %138 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %149 %151 
                                Private f32* %154 = OpAccessChain %53 %153 
                                                      OpStore %154 %152 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %64 %79 %79 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %156 %160 
                                       f32_4 %162 = OpLoad %138 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %138 %163 
                                       f32_4 %164 = OpLoad %138 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %138 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                Private f32* %169 = OpAccessChain %53 %36 
                                                      OpStore %169 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                              Uniform f32_4* %172 = OpAccessChain %64 %79 %88 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpFAdd %171 %175 
                                       f32_4 %177 = OpLoad %138 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %138 %178 
                                       f32_4 %179 = OpLoad %138 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_4 %181 = OpLoad %138 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %180 %182 
                                Private f32* %185 = OpAccessChain %53 %184 
                                                      OpStore %185 %183 
                                       f32_4 %190 = OpLoad %53 
                              Uniform f32_4* %191 = OpAccessChain %64 %88 
                                       f32_4 %192 = OpLoad %191 
                                      bool_4 %193 = OpFOrdLessThan %190 %192 
                                                      OpStore %189 %193 
                               Private bool* %197 = OpAccessChain %189 %27 
                                        bool %198 = OpLoad %197 
                                         f32 %200 = OpSelect %198 %48 %199 
                                Private f32* %201 = OpAccessChain %195 %27 
                                                      OpStore %201 %200 
                               Private bool* %202 = OpAccessChain %189 %153 
                                        bool %203 = OpLoad %202 
                                         f32 %204 = OpSelect %203 %48 %199 
                                Private f32* %205 = OpAccessChain %195 %153 
                                                      OpStore %205 %204 
                               Private bool* %206 = OpAccessChain %189 %36 
                                        bool %207 = OpLoad %206 
                                         f32 %208 = OpSelect %207 %48 %199 
                                Private f32* %209 = OpAccessChain %195 %36 
                                                      OpStore %209 %208 
                               Private bool* %210 = OpAccessChain %189 %27 
                                        bool %211 = OpLoad %210 
                                         f32 %213 = OpSelect %211 %34 %212 
                                Private f32* %214 = OpAccessChain %53 %27 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %189 %153 
                                        bool %216 = OpLoad %215 
                                         f32 %217 = OpSelect %216 %34 %212 
                                Private f32* %218 = OpAccessChain %53 %153 
                                                      OpStore %218 %217 
                               Private bool* %219 = OpAccessChain %189 %36 
                                        bool %220 = OpLoad %219 
                                         f32 %221 = OpSelect %220 %34 %212 
                                Private f32* %222 = OpAccessChain %53 %36 
                                                      OpStore %222 %221 
                               Private bool* %223 = OpAccessChain %189 %184 
                                        bool %224 = OpLoad %223 
                                         f32 %225 = OpSelect %224 %34 %212 
                                Private f32* %226 = OpAccessChain %53 %184 
                                                      OpStore %226 %225 
                                       f32_3 %227 = OpLoad %195 
                                       f32_4 %228 = OpLoad %53 
                                       f32_3 %229 = OpVectorShuffle %228 %228 1 2 3 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %195 %230 
                                       f32_3 %232 = OpLoad %195 
                                       f32_3 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %231 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %239 = OpAccessChain %64 %237 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %236 %241 
                                       f32_4 %243 = OpLoad %138 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %138 %244 
                              Uniform f32_4* %245 = OpAccessChain %64 %237 %237 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 0 0 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %138 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %138 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %138 %255 
                              Uniform f32_4* %257 = OpAccessChain %64 %237 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 2 2 2 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_4 %263 = OpLoad %138 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %138 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %138 %267 
                              Uniform f32_4* %269 = OpAccessChain %64 %237 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %138 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %138 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %138 %279 
                                       f32_3 %280 = OpLoad %231 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 0 0 
                                       f32_4 %282 = OpLoad %138 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %138 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %138 %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
                              Uniform f32_4* %290 = OpAccessChain %64 %237 %67 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFMul %289 %292 
                                       f32_4 %294 = OpLoad %287 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %287 %295 
                              Uniform f32_4* %296 = OpAccessChain %64 %237 %66 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %9 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 0 0 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %287 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %287 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %287 %306 
                              Uniform f32_4* %307 = OpAccessChain %64 %237 %79 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_4 %310 = OpLoad %9 
                                       f32_3 %311 = OpVectorShuffle %310 %310 2 2 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %287 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFAdd %312 %314 
                                       f32_4 %316 = OpLoad %287 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %287 %317 
                              Uniform f32_4* %318 = OpAccessChain %64 %237 %88 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_4 %321 = OpLoad %9 
                                       f32_3 %322 = OpVectorShuffle %321 %321 3 3 3 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %287 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %287 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %287 %328 
                                       f32_4 %329 = OpLoad %287 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %53 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 0 0 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %138 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %138 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %138 %338 
                                       f32_4 %339 = OpLoad %9 
                                       f32_3 %340 = OpVectorShuffle %339 %339 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %64 %237 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %340 %344 
                                       f32_4 %346 = OpLoad %287 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %287 %347 
                              Uniform f32_4* %349 = OpAccessChain %64 %237 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %287 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %287 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %287 %359 
                              Uniform f32_4* %361 = OpAccessChain %64 %237 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 2 2 2 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %287 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad %287 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %287 %371 
                              Uniform f32_4* %373 = OpAccessChain %64 %237 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %287 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %287 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %287 %383 
                                       f32_4 %384 = OpLoad %287 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpLoad %231 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 1 1 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %138 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %138 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %138 %393 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 1 1 1 
                              Uniform f32_4* %397 = OpAccessChain %64 %237 %396 
                                       f32_4 %398 = OpLoad %397 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFMul %395 %399 
                                       f32_4 %401 = OpLoad %287 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                                      OpStore %287 %402 
                              Uniform f32_4* %404 = OpAccessChain %64 %237 %403 
                                       f32_4 %405 = OpLoad %404 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %287 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %287 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %287 %414 
                              Uniform f32_4* %416 = OpAccessChain %64 %237 %415 
                                       f32_4 %417 = OpLoad %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 2 2 2 
                                       f32_3 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %287 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFAdd %421 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %9 %426 
                              Uniform f32_4* %428 = OpAccessChain %64 %237 %427 
                                       f32_4 %429 = OpLoad %428 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 3 3 3 
                                       f32_3 %433 = OpFMul %430 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFAdd %433 %435 
                                       f32_4 %437 = OpLoad %9 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %9 %438 
                                       f32_4 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpLoad %231 
                                       f32_3 %442 = OpVectorShuffle %441 %441 2 2 2 
                                       f32_3 %443 = OpFMul %440 %442 
                                       f32_4 %444 = OpLoad %138 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_3 %446 = OpFAdd %443 %445 
                                       f32_4 %447 = OpLoad %9 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %9 %448 
                                       f32_3 %449 = OpLoad %231 
                                       f32_4 %450 = OpLoad %53 
                                       f32_4 %451 = OpVectorShuffle %450 %449 0 4 5 6 
                                                      OpStore %53 %451 
                                       f32_4 %453 = OpLoad %53 
                                         f32 %455 = OpDot %453 %454 
                                                      OpStore %452 %455 
                                         f32 %457 = OpLoad %452 
                                         f32 %458 = OpFNegate %457 
                                Private f32* %459 = OpAccessChain %9 %36 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFAdd %458 %460 
                                                      OpStore %456 %461 
                                         f32 %462 = OpLoad %456 
                                         f32 %463 = OpFAdd %462 %34 
                                                      OpStore %456 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_2 %465 = OpVectorShuffle %464 %464 0 1 
                              Uniform f32_4* %466 = OpAccessChain %64 %256 
                                       f32_4 %467 = OpLoad %466 
                                       f32_2 %468 = OpVectorShuffle %467 %467 2 3 
                                       f32_2 %469 = OpFMul %465 %468 
                                       f32_2 %472 = OpFAdd %469 %471 
                                       f32_4 %473 = OpLoad %53 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 2 3 
                                                      OpStore %53 %474 
                                       f32_4 %475 = OpLoad %53 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpExtInst %1 8 %476 
                                       f32_4 %478 = OpLoad %53 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 2 3 
                                                      OpStore %53 %479 
                                       f32_4 %480 = OpLoad %9 
                                       f32_2 %481 = OpVectorShuffle %480 %480 0 1 
                              Uniform f32_4* %482 = OpAccessChain %64 %256 
                                       f32_4 %483 = OpLoad %482 
                                       f32_2 %484 = OpVectorShuffle %483 %483 2 3 
                                       f32_2 %485 = OpFMul %481 %484 
                                       f32_4 %486 = OpLoad %53 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_2 %489 = OpFAdd %485 %488 
                                       f32_4 %490 = OpLoad %9 
                                       f32_4 %491 = OpVectorShuffle %490 %489 4 5 2 3 
                                                      OpStore %9 %491 
                                       f32_4 %494 = OpLoad %9 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                       f32_2 %497 = OpExtInst %1 40 %495 %496 
                                                      OpStore %493 %497 
                                       f32_4 %498 = OpLoad %9 
                                       f32_4 %499 = OpVectorShuffle %498 %498 0 0 1 1 
                                       f32_4 %501 = OpFAdd %499 %500 
                                                      OpStore %138 %501 
                                       f32_2 %502 = OpLoad %493 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpLoad %493 
                                       f32_2 %505 = OpFMul %503 %504 
                                       f32_4 %506 = OpLoad %138 
                                       f32_2 %507 = OpVectorShuffle %506 %506 1 3 
                                       f32_2 %508 = OpFAdd %505 %507 
                                                      OpStore %493 %508 
                                       f32_2 %509 = OpLoad %493 
                                       f32_2 %511 = OpFAdd %509 %510 
                                                      OpStore %493 %511 
                                       f32_2 %513 = OpLoad %493 
                                       f32_2 %516 = OpFMul %513 %515 
                                       f32_4 %517 = OpLoad %512 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 5 2 3 
                                                      OpStore %512 %518 
                                       f32_4 %519 = OpLoad %9 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 1 
                                       f32_2 %521 = OpFNegate %520 
                                       f32_2 %522 = OpFAdd %521 %510 
                                                      OpStore %493 %522 
                                       f32_2 %523 = OpLoad %493 
                                       f32_2 %524 = OpFMul %523 %515 
                                       f32_4 %525 = OpLoad %287 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 2 3 
                                                      OpStore %287 %526 
                                       f32_4 %528 = OpLoad %9 
                                       f32_2 %529 = OpVectorShuffle %528 %528 0 1 
                                       f32_2 %530 = OpExtInst %1 37 %529 %496 
                                       f32_4 %531 = OpLoad %527 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 2 3 
                                                      OpStore %527 %532 
                                       f32_4 %533 = OpLoad %527 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 1 
                                       f32_2 %535 = OpFNegate %534 
                                       f32_4 %536 = OpLoad %527 
                                       f32_2 %537 = OpVectorShuffle %536 %536 0 1 
                                       f32_2 %538 = OpFMul %535 %537 
                                       f32_2 %539 = OpLoad %493 
                                       f32_2 %540 = OpFAdd %538 %539 
                                                      OpStore %493 %540 
                                       f32_2 %541 = OpLoad %493 
                                       f32_2 %542 = OpFAdd %541 %510 
                                                      OpStore %493 %542 
                                       f32_2 %543 = OpLoad %493 
                                       f32_2 %544 = OpFMul %543 %515 
                                       f32_4 %545 = OpLoad %527 
                                       f32_4 %546 = OpVectorShuffle %545 %544 4 5 2 3 
                                                      OpStore %527 %546 
                                       f32_4 %548 = OpLoad %138 
                                       f32_4 %549 = OpVectorShuffle %548 %548 0 0 2 2 
                                       f32_4 %550 = OpLoad %138 
                                       f32_4 %551 = OpVectorShuffle %550 %550 0 0 2 2 
                                       f32_4 %552 = OpFMul %549 %551 
                                                      OpStore %547 %552 
                                       f32_4 %553 = OpLoad %138 
                                       f32_2 %554 = OpVectorShuffle %553 %553 1 3 
                                       f32_2 %555 = OpFMul %554 %515 
                                                      OpStore %493 %555 
                                       f32_4 %556 = OpLoad %547 
                                       f32_2 %557 = OpVectorShuffle %556 %556 0 2 
                                       f32_2 %558 = OpFMul %557 %471 
                                       f32_4 %559 = OpLoad %9 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 1 
                                       f32_2 %561 = OpFNegate %560 
                                       f32_2 %562 = OpFAdd %558 %561 
                                       f32_4 %563 = OpLoad %9 
                                       f32_4 %564 = OpVectorShuffle %563 %562 4 5 2 3 
                                                      OpStore %9 %564 
                                       f32_4 %565 = OpLoad %547 
                                       f32_2 %566 = OpVectorShuffle %565 %565 3 1 
                                       f32_2 %569 = OpFMul %566 %568 
                                       f32_4 %570 = OpLoad %287 
                                       f32_4 %571 = OpVectorShuffle %570 %569 0 1 4 5 
                                                      OpStore %287 %571 
                                       f32_4 %572 = OpLoad %9 
                                       f32_2 %573 = OpVectorShuffle %572 %572 0 1 
                                       f32_2 %574 = OpFMul %573 %515 
                                       f32_4 %575 = OpLoad %138 
                                       f32_4 %576 = OpVectorShuffle %575 %574 4 5 2 3 
                                                      OpStore %138 %576 
                                Private f32* %577 = OpAccessChain %138 %153 
                                         f32 %578 = OpLoad %577 
                                Private f32* %579 = OpAccessChain %527 %36 
                                                      OpStore %579 %578 
                                Private f32* %580 = OpAccessChain %493 %153 
                                         f32 %581 = OpLoad %580 
                                Private f32* %582 = OpAccessChain %527 %184 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %493 %27 
                                         f32 %584 = OpLoad %583 
                                Private f32* %585 = OpAccessChain %138 %184 
                                                      OpStore %585 %584 
                                       f32_4 %586 = OpLoad %287 
                                       f32_2 %587 = OpVectorShuffle %586 %586 1 2 
                                       f32_4 %588 = OpLoad %512 
                                       f32_4 %589 = OpVectorShuffle %588 %587 0 1 4 5 
                                                      OpStore %512 %589 
                                       f32_4 %590 = OpLoad %512 
                                       f32_3 %591 = OpVectorShuffle %590 %590 2 1 3 
                                       f32_4 %592 = OpLoad %527 
                                       f32_3 %593 = OpVectorShuffle %592 %592 2 1 3 
                                       f32_3 %594 = OpFAdd %591 %593 
                                       f32_4 %595 = OpLoad %9 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 2 6 
                                                      OpStore %9 %596 
                                Private f32* %597 = OpAccessChain %527 %27 
                                         f32 %598 = OpLoad %597 
                                Private f32* %599 = OpAccessChain %138 %36 
                                                      OpStore %599 %598 
                                       f32_4 %600 = OpLoad %512 
                                       f32_3 %601 = OpVectorShuffle %600 %600 2 1 3 
                                       f32_4 %602 = OpLoad %9 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 3 
                                       f32_3 %604 = OpFDiv %601 %603 
                                       f32_4 %605 = OpLoad %527 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 6 3 
                                                      OpStore %527 %606 
                                Private f32* %607 = OpAccessChain %512 %27 
                                         f32 %608 = OpLoad %607 
                                Private f32* %609 = OpAccessChain %287 %36 
                                                      OpStore %609 %608 
                                       f32_4 %610 = OpLoad %527 
                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
                                       f32_3 %616 = OpFAdd %611 %615 
                                       f32_4 %617 = OpLoad %527 
                                       f32_4 %618 = OpVectorShuffle %617 %616 4 5 6 3 
                                                      OpStore %527 %618 
                                       f32_4 %619 = OpLoad %527 
                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
                              Uniform f32_4* %621 = OpAccessChain %64 %256 
                                       f32_4 %622 = OpLoad %621 
                                       f32_3 %623 = OpVectorShuffle %622 %622 1 1 1 
                                       f32_3 %624 = OpFMul %620 %623 
                                       f32_4 %625 = OpLoad %512 
                                       f32_4 %626 = OpVectorShuffle %625 %624 4 5 6 3 
                                                      OpStore %512 %626 
                                Private f32* %627 = OpAccessChain %512 %27 
                                         f32 %628 = OpLoad %627 
                                Private f32* %629 = OpAccessChain %527 %184 
                                                      OpStore %629 %628 
                                       f32_4 %630 = OpLoad %138 
                                       f32_4 %631 = OpVectorShuffle %630 %630 2 3 0 2 
                                       f32_4 %632 = OpLoad %287 
                                       f32_4 %633 = OpVectorShuffle %632 %632 2 3 0 2 
                                       f32_4 %634 = OpFAdd %631 %633 
                                                      OpStore %138 %634 
                                       f32_4 %635 = OpLoad %287 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 2 3 
                                       f32_4 %637 = OpLoad %138 
                                       f32_3 %638 = OpVectorShuffle %637 %637 2 3 1 
                                       f32_3 %639 = OpFDiv %636 %638 
                                       f32_4 %640 = OpLoad %287 
                                       f32_4 %641 = OpVectorShuffle %640 %639 4 5 6 3 
                                                      OpStore %287 %641 
                                       f32_4 %642 = OpLoad %287 
                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 2 
                                       f32_3 %644 = OpFAdd %643 %615 
                                       f32_4 %645 = OpLoad %287 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 5 6 3 
                                                      OpStore %287 %646 
                                       f32_4 %647 = OpLoad %287 
                                       f32_3 %648 = OpVectorShuffle %647 %647 1 0 2 
                              Uniform f32_4* %649 = OpAccessChain %64 %256 
                                       f32_4 %650 = OpLoad %649 
                                       f32_3 %651 = OpVectorShuffle %650 %650 0 0 0 
                                       f32_3 %652 = OpFMul %648 %651 
                                       f32_4 %653 = OpLoad %527 
                                       f32_4 %654 = OpVectorShuffle %653 %652 4 5 6 3 
                                                      OpStore %527 %654 
                                       f32_4 %655 = OpLoad %53 
                                       f32_4 %656 = OpVectorShuffle %655 %655 0 1 0 1 
                              Uniform f32_4* %657 = OpAccessChain %64 %256 
                                       f32_4 %658 = OpLoad %657 
                                       f32_4 %659 = OpVectorShuffle %658 %658 0 1 0 1 
                                       f32_4 %660 = OpFMul %656 %659 
                                       f32_4 %661 = OpLoad %527 
                                       f32_4 %662 = OpVectorShuffle %661 %661 1 3 0 3 
                                       f32_4 %663 = OpFAdd %660 %662 
                                                      OpStore %287 %663 
                                       f32_4 %664 = OpLoad %53 
                                       f32_2 %665 = OpVectorShuffle %664 %664 0 1 
                              Uniform f32_4* %666 = OpAccessChain %64 %256 
                                       f32_4 %667 = OpLoad %666 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 1 
                                       f32_2 %669 = OpFMul %665 %668 
                                       f32_4 %670 = OpLoad %527 
                                       f32_2 %671 = OpVectorShuffle %670 %670 2 3 
                                       f32_2 %672 = OpFAdd %669 %671 
                                                      OpStore %493 %672 
                                       f32_2 %675 = OpLoad %493 
                                         f32 %676 = OpLoad %456 
                                         f32 %677 = OpCompositeExtract %675 0 
                                         f32 %678 = OpCompositeExtract %675 1 
                                       f32_3 %679 = OpCompositeConstruct %677 %678 %676 
                                                      OpStore %674 %679 
                         read_only Texture2D %682 = OpLoad %681 
                                     sampler %684 = OpLoad %683 
                  read_only Texture2DSampled %687 = OpSampledImage %682 %684 
                                       f32_3 %688 = OpLoad %674 
                                         f32 %689 = OpCompositeExtract %688 2 
                                         f32 %690 = OpImageSampleDrefExplicitLod %687 %688 %689 Lod %6 
                                                      OpStore %680 %690 
                                       f32_4 %692 = OpLoad %287 
                                       f32_2 %693 = OpVectorShuffle %692 %692 0 1 
                                         f32 %694 = OpLoad %456 
                                         f32 %695 = OpCompositeExtract %693 0 
                                         f32 %696 = OpCompositeExtract %693 1 
                                       f32_3 %697 = OpCompositeConstruct %695 %696 %694 
                                                      OpStore %691 %697 
                         read_only Texture2D %699 = OpLoad %681 
                                     sampler %700 = OpLoad %683 
                  read_only Texture2DSampled %701 = OpSampledImage %699 %700 
                                       f32_3 %702 = OpLoad %691 
                                         f32 %703 = OpCompositeExtract %702 2 
                                         f32 %704 = OpImageSampleDrefExplicitLod %701 %702 %703 Lod %6 
                                                      OpStore %698 %704 
                                       f32_4 %706 = OpLoad %287 
                                       f32_2 %707 = OpVectorShuffle %706 %706 2 3 
                                         f32 %708 = OpLoad %456 
                                         f32 %709 = OpCompositeExtract %707 0 
                                         f32 %710 = OpCompositeExtract %707 1 
                                       f32_3 %711 = OpCompositeConstruct %709 %710 %708 
                                                      OpStore %705 %711 
                         read_only Texture2D %713 = OpLoad %681 
                                     sampler %714 = OpLoad %683 
                  read_only Texture2DSampled %715 = OpSampledImage %713 %714 
                                       f32_3 %716 = OpLoad %705 
                                         f32 %717 = OpCompositeExtract %716 2 
                                         f32 %718 = OpImageSampleDrefExplicitLod %715 %716 %717 Lod %6 
                                                      OpStore %712 %718 
                                       f32_4 %719 = OpLoad %9 
                                       f32_4 %720 = OpVectorShuffle %719 %719 0 0 0 1 
                                       f32_4 %721 = OpLoad %138 
                                       f32_4 %722 = OpVectorShuffle %721 %721 2 3 1 2 
                                       f32_4 %723 = OpFMul %720 %722 
                                                      OpStore %547 %723 
                                         f32 %724 = OpLoad %712 
                                Private f32* %725 = OpAccessChain %547 %153 
                                         f32 %726 = OpLoad %725 
                                         f32 %727 = OpFMul %724 %726 
                                Private f32* %728 = OpAccessChain %9 %27 
                                                      OpStore %728 %727 
                                Private f32* %729 = OpAccessChain %547 %27 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpLoad %698 
                                         f32 %732 = OpFMul %730 %731 
                                Private f32* %733 = OpAccessChain %9 %27 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFAdd %732 %734 
                                Private f32* %736 = OpAccessChain %9 %27 
                                                      OpStore %736 %735 
                                Private f32* %737 = OpAccessChain %547 %36 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpLoad %680 
                                         f32 %740 = OpFMul %738 %739 
                                Private f32* %741 = OpAccessChain %9 %27 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFAdd %740 %742 
                                Private f32* %744 = OpAccessChain %9 %27 
                                                      OpStore %744 %743 
                                Private f32* %745 = OpAccessChain %527 %153 
                                         f32 %746 = OpLoad %745 
                                Private f32* %747 = OpAccessChain %512 %184 
                                                      OpStore %747 %746 
                                       f32_4 %748 = OpLoad %53 
                                       f32_4 %749 = OpVectorShuffle %748 %748 0 1 0 1 
                              Uniform f32_4* %750 = OpAccessChain %64 %256 
                                       f32_4 %751 = OpLoad %750 
                                       f32_4 %752 = OpVectorShuffle %751 %751 0 1 0 1 
                                       f32_4 %753 = OpFMul %749 %752 
                                       f32_4 %754 = OpLoad %512 
                                       f32_4 %755 = OpVectorShuffle %754 %754 3 1 3 2 
                                       f32_4 %756 = OpFAdd %753 %755 
                                                      OpStore %287 %756 
                                       f32_4 %757 = OpLoad %512 
                                       f32_2 %758 = OpVectorShuffle %757 %757 1 2 
                                       f32_4 %759 = OpLoad %527 
                                       f32_4 %760 = OpVectorShuffle %759 %758 0 4 2 5 
                                                      OpStore %527 %760 
                                       f32_4 %762 = OpLoad %287 
                                       f32_2 %763 = OpVectorShuffle %762 %762 0 1 
                                         f32 %764 = OpLoad %456 
                                         f32 %765 = OpCompositeExtract %763 0 
                                         f32 %766 = OpCompositeExtract %763 1 
                                       f32_3 %767 = OpCompositeConstruct %765 %766 %764 
                                                      OpStore %761 %767 
                         read_only Texture2D %768 = OpLoad %681 
                                     sampler %769 = OpLoad %683 
                  read_only Texture2DSampled %770 = OpSampledImage %768 %769 
                                       f32_3 %771 = OpLoad %761 
                                         f32 %772 = OpCompositeExtract %771 2 
                                         f32 %773 = OpImageSampleDrefExplicitLod %770 %771 %772 Lod %6 
                                                      OpStore %680 %773 
                                       f32_4 %775 = OpLoad %287 
                                       f32_2 %776 = OpVectorShuffle %775 %775 2 3 
                                         f32 %777 = OpLoad %456 
                                         f32 %778 = OpCompositeExtract %776 0 
                                         f32 %779 = OpCompositeExtract %776 1 
                                       f32_3 %780 = OpCompositeConstruct %778 %779 %777 
                                                      OpStore %774 %780 
                         read_only Texture2D %781 = OpLoad %681 
                                     sampler %782 = OpLoad %683 
                  read_only Texture2DSampled %783 = OpSampledImage %781 %782 
                                       f32_3 %784 = OpLoad %774 
                                         f32 %785 = OpCompositeExtract %784 2 
                                         f32 %786 = OpImageSampleDrefExplicitLod %783 %784 %785 Lod %6 
                                                      OpStore %698 %786 
                                Private f32* %787 = OpAccessChain %547 %184 
                                         f32 %788 = OpLoad %787 
                                         f32 %789 = OpLoad %680 
                                         f32 %790 = OpFMul %788 %789 
                                Private f32* %791 = OpAccessChain %9 %27 
                                         f32 %792 = OpLoad %791 
                                         f32 %793 = OpFAdd %790 %792 
                                Private f32* %794 = OpAccessChain %9 %27 
                                                      OpStore %794 %793 
                                       f32_4 %795 = OpLoad %53 
                                       f32_4 %796 = OpVectorShuffle %795 %795 0 1 0 1 
                              Uniform f32_4* %797 = OpAccessChain %64 %256 
                                       f32_4 %798 = OpLoad %797 
                                       f32_4 %799 = OpVectorShuffle %798 %798 0 1 0 1 
                                       f32_4 %800 = OpFMul %796 %799 
                                       f32_4 %801 = OpLoad %527 
                                       f32_4 %802 = OpVectorShuffle %801 %801 0 1 2 1 
                                       f32_4 %803 = OpFAdd %800 %802 
                                                      OpStore %512 %803 
                                       f32_4 %804 = OpLoad %53 
                                       f32_4 %805 = OpVectorShuffle %804 %804 0 1 0 1 
                              Uniform f32_4* %806 = OpAccessChain %64 %256 
                                       f32_4 %807 = OpLoad %806 
                                       f32_4 %808 = OpVectorShuffle %807 %807 0 1 0 1 
                                       f32_4 %809 = OpFMul %805 %808 
                                       f32_4 %810 = OpLoad %527 
                                       f32_4 %811 = OpVectorShuffle %810 %810 0 3 2 3 
                                       f32_4 %812 = OpFAdd %809 %811 
                                                      OpStore %287 %812 
                                       f32_4 %814 = OpLoad %512 
                                       f32_2 %815 = OpVectorShuffle %814 %814 0 1 
                                         f32 %816 = OpLoad %456 
                                         f32 %817 = OpCompositeExtract %815 0 
                                         f32 %818 = OpCompositeExtract %815 1 
                                       f32_3 %819 = OpCompositeConstruct %817 %818 %816 
                                                      OpStore %813 %819 
                         read_only Texture2D %821 = OpLoad %681 
                                     sampler %822 = OpLoad %683 
                  read_only Texture2DSampled %823 = OpSampledImage %821 %822 
                                       f32_3 %824 = OpLoad %813 
                                         f32 %825 = OpCompositeExtract %824 2 
                                         f32 %826 = OpImageSampleDrefExplicitLod %823 %824 %825 Lod %6 
                                                      OpStore %820 %826 
                                       f32_4 %828 = OpLoad %512 
                                       f32_2 %829 = OpVectorShuffle %828 %828 2 3 
                                         f32 %830 = OpLoad %456 
                                         f32 %831 = OpCompositeExtract %829 0 
                                         f32 %832 = OpCompositeExtract %829 1 
                                       f32_3 %833 = OpCompositeConstruct %831 %832 %830 
                                                      OpStore %827 %833 
                         read_only Texture2D %835 = OpLoad %681 
                                     sampler %836 = OpLoad %683 
                  read_only Texture2DSampled %837 = OpSampledImage %835 %836 
                                       f32_3 %838 = OpLoad %827 
                                         f32 %839 = OpCompositeExtract %838 2 
                                         f32 %840 = OpImageSampleDrefExplicitLod %837 %838 %839 Lod %6 
                                                      OpStore %834 %840 
                                       f32_4 %841 = OpLoad %9 
                                       f32_4 %842 = OpVectorShuffle %841 %841 1 1 3 3 
                                       f32_4 %843 = OpLoad %138 
                                       f32_4 %844 = OpFMul %842 %843 
                                                      OpStore %512 %844 
                                Private f32* %846 = OpAccessChain %9 %184 
                                         f32 %847 = OpLoad %846 
                                Private f32* %848 = OpAccessChain %138 %153 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFMul %847 %849 
                                                      OpStore %845 %850 
                                Private f32* %851 = OpAccessChain %512 %27 
                                         f32 %852 = OpLoad %851 
                                         f32 %853 = OpLoad %820 
                                         f32 %854 = OpFMul %852 %853 
                                Private f32* %855 = OpAccessChain %9 %27 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpFAdd %854 %856 
                                Private f32* %858 = OpAccessChain %9 %27 
                                                      OpStore %858 %857 
                                Private f32* %859 = OpAccessChain %512 %153 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpLoad %834 
                                         f32 %862 = OpFMul %860 %861 
                                Private f32* %863 = OpAccessChain %9 %27 
                                         f32 %864 = OpLoad %863 
                                         f32 %865 = OpFAdd %862 %864 
                                Private f32* %866 = OpAccessChain %9 %27 
                                                      OpStore %866 %865 
                                Private f32* %867 = OpAccessChain %512 %36 
                                         f32 %868 = OpLoad %867 
                                         f32 %869 = OpLoad %698 
                                         f32 %870 = OpFMul %868 %869 
                                Private f32* %871 = OpAccessChain %9 %27 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFAdd %870 %872 
                                Private f32* %874 = OpAccessChain %9 %27 
                                                      OpStore %874 %873 
                                       f32_4 %876 = OpLoad %287 
                                       f32_2 %877 = OpVectorShuffle %876 %876 0 1 
                                         f32 %878 = OpLoad %456 
                                         f32 %879 = OpCompositeExtract %877 0 
                                         f32 %880 = OpCompositeExtract %877 1 
                                       f32_3 %881 = OpCompositeConstruct %879 %880 %878 
                                                      OpStore %875 %881 
                         read_only Texture2D %883 = OpLoad %681 
                                     sampler %884 = OpLoad %683 
                  read_only Texture2DSampled %885 = OpSampledImage %883 %884 
                                       f32_3 %886 = OpLoad %875 
                                         f32 %887 = OpCompositeExtract %886 2 
                                         f32 %888 = OpImageSampleDrefExplicitLod %885 %886 %887 Lod %6 
                                                      OpStore %882 %888 
                                       f32_4 %890 = OpLoad %287 
                                       f32_2 %891 = OpVectorShuffle %890 %890 2 3 
                                         f32 %892 = OpLoad %456 
                                         f32 %893 = OpCompositeExtract %891 0 
                                         f32 %894 = OpCompositeExtract %891 1 
                                       f32_3 %895 = OpCompositeConstruct %893 %894 %892 
                                                      OpStore %889 %895 
                         read_only Texture2D %897 = OpLoad %681 
                                     sampler %898 = OpLoad %683 
                  read_only Texture2DSampled %899 = OpSampledImage %897 %898 
                                       f32_3 %900 = OpLoad %889 
                                         f32 %901 = OpCompositeExtract %900 2 
                                         f32 %902 = OpImageSampleDrefExplicitLod %899 %900 %901 Lod %6 
                                                      OpStore %896 %902 
                                Private f32* %903 = OpAccessChain %512 %184 
                                         f32 %904 = OpLoad %903 
                                         f32 %905 = OpLoad %882 
                                         f32 %906 = OpFMul %904 %905 
                                Private f32* %907 = OpAccessChain %9 %27 
                                         f32 %908 = OpLoad %907 
                                         f32 %909 = OpFAdd %906 %908 
                                Private f32* %910 = OpAccessChain %9 %27 
                                                      OpStore %910 %909 
                                         f32 %911 = OpLoad %845 
                                         f32 %912 = OpLoad %896 
                                         f32 %913 = OpFMul %911 %912 
                                Private f32* %914 = OpAccessChain %9 %27 
                                         f32 %915 = OpLoad %914 
                                         f32 %916 = OpFAdd %913 %915 
                                Private f32* %917 = OpAccessChain %9 %27 
                                                      OpStore %917 %916 
                                Uniform f32* %919 = OpAccessChain %64 %238 %27 
                                         f32 %920 = OpLoad %919 
                                         f32 %921 = OpFNegate %920 
                                         f32 %922 = OpFAdd %921 %34 
                                                      OpStore %845 %922 
                                       f32_4 %923 = OpLoad %9 
                                       f32_4 %924 = OpVectorShuffle %923 %923 0 0 0 0 
                                         f32 %925 = OpLoad %845 
                                       f32_4 %926 = OpCompositeConstruct %925 %925 %925 %925 
                                       f32_4 %927 = OpFMul %924 %926 
                              Uniform f32_4* %928 = OpAccessChain %64 %238 
                                       f32_4 %929 = OpLoad %928 
                                       f32_4 %930 = OpVectorShuffle %929 %929 0 0 0 0 
                                       f32_4 %931 = OpFAdd %927 %930 
                                                      OpStore %9 %931 
                                       f32_4 %934 = OpLoad %9 
                                                      OpStore %933 %934 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %647 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %647 Location 647 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_2 %197 = OpConstantComposite %196 %196 
                              Private f32_4* %199 = OpVariable Private 
                                       f32_2 %203 = OpConstantComposite %34 %34 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                       f32_4 %234 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %280 = OpConstant 1 
                                         u32 %286 = OpConstant 3 
                                         f32 %317 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %317 %318 %319 
                                             %378 = OpTypePointer Function %42 
                                Private f32* %386 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
                                             %391 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                Private f32* %405 = OpVariable Private 
                                Private f32* %420 = OpVariable Private 
                                Private f32* %531 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                                Private f32* %557 = OpVariable Private 
                                Private f32* %595 = OpVariable Private 
                                Private f32* %610 = OpVariable Private 
                                             %632 = OpTypePointer Uniform %6 
                                             %646 = OpTypePointer Output %7 
                               Output f32_4* %647 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %379 = OpVariable Function 
                             Function f32_3* %397 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                             Function f32_3* %469 = OpVariable Function 
                             Function f32_3* %483 = OpVariable Function 
                             Function f32_3* %523 = OpVariable Function 
                             Function f32_3* %538 = OpVariable Function 
                             Function f32_3* %587 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %198 = OpExtInst %1 37 %195 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpFNegate %201 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_2 %207 = OpLoad %193 
                                       f32_2 %208 = OpFNegate %207 
                                       f32_2 %209 = OpLoad %193 
                                       f32_2 %210 = OpFMul %208 %209 
                                       f32_4 %211 = OpLoad %199 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                                      OpStore %193 %213 
                                       f32_4 %214 = OpLoad %199 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %199 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore %199 %220 
                                       f32_2 %221 = OpLoad %193 
                                       f32_2 %222 = OpFAdd %221 %203 
                                                      OpStore %193 %222 
                                       f32_2 %224 = OpLoad %193 
                                       f32_2 %225 = OpFMul %224 %217 
                                       f32_4 %226 = OpLoad %223 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 2 3 
                                                      OpStore %223 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpExtInst %1 40 %229 %197 
                                                      OpStore %193 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 1 1 
                                       f32_4 %235 = OpFAdd %233 %234 
                                                      OpStore %231 %235 
                                       f32_2 %236 = OpLoad %193 
                                       f32_2 %237 = OpFNegate %236 
                                       f32_2 %238 = OpLoad %193 
                                       f32_2 %239 = OpFMul %237 %238 
                                       f32_4 %240 = OpLoad %231 
                                       f32_2 %241 = OpVectorShuffle %240 %240 1 3 
                                       f32_2 %242 = OpFAdd %239 %241 
                                                      OpStore %193 %242 
                                       f32_2 %243 = OpLoad %193 
                                       f32_2 %244 = OpFAdd %243 %203 
                                                      OpStore %193 %244 
                                       f32_2 %246 = OpLoad %193 
                                       f32_2 %247 = OpFMul %246 %217 
                                       f32_4 %248 = OpLoad %245 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 2 3 
                                                      OpStore %245 %249 
                                       f32_4 %251 = OpLoad %231 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 0 2 2 
                                       f32_4 %253 = OpLoad %231 
                                       f32_4 %254 = OpVectorShuffle %253 %253 0 0 2 2 
                                       f32_4 %255 = OpFMul %252 %254 
                                                      OpStore %250 %255 
                                       f32_4 %256 = OpLoad %231 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 3 
                                       f32_2 %258 = OpFMul %257 %217 
                                                      OpStore %193 %258 
                                       f32_4 %259 = OpLoad %250 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 2 
                                       f32_2 %261 = OpFMul %260 %171 
                                       f32_4 %262 = OpLoad %9 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFNegate %263 
                                       f32_2 %265 = OpFAdd %261 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %250 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %199 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %199 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %276 %217 
                                       f32_4 %278 = OpLoad %231 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %231 %279 
                                Private f32* %281 = OpAccessChain %231 %280 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %223 %36 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %193 %280 
                                         f32 %285 = OpLoad %284 
                                Private f32* %287 = OpAccessChain %223 %286 
                                                      OpStore %287 %285 
                                Private f32* %288 = OpAccessChain %193 %27 
                                         f32 %289 = OpLoad %288 
                                Private f32* %290 = OpAccessChain %231 %286 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %199 
                                       f32_2 %292 = OpVectorShuffle %291 %291 1 2 
                                       f32_4 %293 = OpLoad %245 
                                       f32_4 %294 = OpVectorShuffle %293 %292 0 1 4 5 
                                                      OpStore %245 %294 
                                       f32_4 %295 = OpLoad %223 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 1 3 
                                       f32_4 %297 = OpLoad %245 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 1 3 
                                       f32_3 %299 = OpFAdd %296 %298 
                                       f32_4 %300 = OpLoad %9 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %9 %301 
                                Private f32* %302 = OpAccessChain %223 %27 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %231 %36 
                                                      OpStore %304 %303 
                                       f32_4 %305 = OpLoad %245 
                                       f32_3 %306 = OpVectorShuffle %305 %305 2 1 3 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                       f32_3 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %223 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %223 %311 
                                Private f32* %312 = OpAccessChain %245 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %199 %36 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %223 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %321 = OpFAdd %316 %320 
                                       f32_4 %322 = OpLoad %223 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %223 %323 
                                       f32_4 %324 = OpLoad %223 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %63 %165 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 1 1 1 
                                       f32_3 %329 = OpFMul %325 %328 
                                       f32_4 %330 = OpLoad %223 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %223 %331 
                                Private f32* %332 = OpAccessChain %223 %27 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %245 %286 
                                                      OpStore %334 %333 
                                       f32_4 %335 = OpLoad %199 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 3 0 2 
                                       f32_4 %337 = OpLoad %231 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 3 0 2 
                                       f32_4 %339 = OpFAdd %336 %338 
                                                      OpStore %231 %339 
                                       f32_4 %340 = OpLoad %199 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpLoad %231 
                                       f32_3 %343 = OpVectorShuffle %342 %342 2 3 1 
                                       f32_3 %344 = OpFDiv %341 %343 
                                       f32_4 %345 = OpLoad %199 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %199 %346 
                                       f32_4 %347 = OpLoad %199 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %348 %320 
                                       f32_4 %350 = OpLoad %199 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %199 %351 
                                       f32_4 %352 = OpLoad %199 
                                       f32_3 %353 = OpVectorShuffle %352 %352 1 0 2 
                              Uniform f32_4* %354 = OpAccessChain %63 %165 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                                       f32_3 %357 = OpFMul %353 %356 
                                       f32_4 %358 = OpLoad %245 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %245 %359 
                                       f32_4 %360 = OpLoad %53 
                                       f32_4 %361 = OpVectorShuffle %360 %360 0 1 0 1 
                              Uniform f32_4* %362 = OpAccessChain %63 %165 
                                       f32_4 %363 = OpLoad %362 
                                       f32_4 %364 = OpVectorShuffle %363 %363 0 1 0 1 
                                       f32_4 %365 = OpFMul %361 %364 
                                       f32_4 %366 = OpLoad %245 
                                       f32_4 %367 = OpVectorShuffle %366 %366 1 3 0 3 
                                       f32_4 %368 = OpFAdd %365 %367 
                                                      OpStore %199 %368 
                                       f32_4 %369 = OpLoad %53 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                              Uniform f32_4* %371 = OpAccessChain %63 %165 
                                       f32_4 %372 = OpLoad %371 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                                       f32_2 %374 = OpFMul %370 %373 
                                       f32_4 %375 = OpLoad %245 
                                       f32_2 %376 = OpVectorShuffle %375 %375 2 3 
                                       f32_2 %377 = OpFAdd %374 %376 
                                                      OpStore %193 %377 
                                       f32_2 %380 = OpLoad %193 
                                Private f32* %381 = OpAccessChain %9 %36 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %379 %385 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %393 = OpSampledImage %388 %390 
                                       f32_3 %394 = OpLoad %379 
                                         f32 %395 = OpCompositeExtract %394 2 
                                         f32 %396 = OpImageSampleDrefExplicitLod %393 %394 %395 Lod %6 
                                                      OpStore %386 %396 
                                       f32_4 %398 = OpLoad %199 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                Private f32* %400 = OpAccessChain %9 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpCompositeExtract %399 0 
                                         f32 %403 = OpCompositeExtract %399 1 
                                       f32_3 %404 = OpCompositeConstruct %402 %403 %401 
                                                      OpStore %397 %404 
                         read_only Texture2D %406 = OpLoad %387 
                                     sampler %407 = OpLoad %389 
                  read_only Texture2DSampled %408 = OpSampledImage %406 %407 
                                       f32_3 %409 = OpLoad %397 
                                         f32 %410 = OpCompositeExtract %409 2 
                                         f32 %411 = OpImageSampleDrefExplicitLod %408 %409 %410 Lod %6 
                                                      OpStore %405 %411 
                                       f32_4 %413 = OpLoad %199 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                Private f32* %415 = OpAccessChain %9 %36 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpCompositeExtract %414 0 
                                         f32 %418 = OpCompositeExtract %414 1 
                                       f32_3 %419 = OpCompositeConstruct %417 %418 %416 
                                                      OpStore %412 %419 
                         read_only Texture2D %421 = OpLoad %387 
                                     sampler %422 = OpLoad %389 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_3 %424 = OpLoad %412 
                                         f32 %425 = OpCompositeExtract %424 2 
                                         f32 %426 = OpImageSampleDrefExplicitLod %423 %424 %425 Lod %6 
                                                      OpStore %420 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 1 
                                       f32_4 %429 = OpLoad %231 
                                       f32_4 %430 = OpVectorShuffle %429 %429 2 3 1 2 
                                       f32_4 %431 = OpFMul %428 %430 
                                                      OpStore %250 %431 
                                         f32 %432 = OpLoad %420 
                                Private f32* %433 = OpAccessChain %250 %280 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                Private f32* %436 = OpAccessChain %9 %27 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %250 %27 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %405 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFAdd %440 %442 
                                Private f32* %444 = OpAccessChain %9 %27 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %250 %36 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %386 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %27 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFAdd %448 %450 
                                Private f32* %452 = OpAccessChain %9 %27 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %245 %280 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %223 %286 
                                                      OpStore %455 %454 
                                       f32_4 %456 = OpLoad %53 
                                       f32_4 %457 = OpVectorShuffle %456 %456 0 1 0 1 
                              Uniform f32_4* %458 = OpAccessChain %63 %165 
                                       f32_4 %459 = OpLoad %458 
                                       f32_4 %460 = OpVectorShuffle %459 %459 0 1 0 1 
                                       f32_4 %461 = OpFMul %457 %460 
                                       f32_4 %462 = OpLoad %223 
                                       f32_4 %463 = OpVectorShuffle %462 %462 3 1 3 2 
                                       f32_4 %464 = OpFAdd %461 %463 
                                                      OpStore %199 %464 
                                       f32_4 %465 = OpLoad %223 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 2 
                                       f32_4 %467 = OpLoad %245 
                                       f32_4 %468 = OpVectorShuffle %467 %466 0 4 2 5 
                                                      OpStore %245 %468 
                                       f32_4 %470 = OpLoad %199 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                Private f32* %472 = OpAccessChain %9 %36 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpCompositeExtract %471 0 
                                         f32 %475 = OpCompositeExtract %471 1 
                                       f32_3 %476 = OpCompositeConstruct %474 %475 %473 
                                                      OpStore %469 %476 
                         read_only Texture2D %477 = OpLoad %387 
                                     sampler %478 = OpLoad %389 
                  read_only Texture2DSampled %479 = OpSampledImage %477 %478 
                                       f32_3 %480 = OpLoad %469 
                                         f32 %481 = OpCompositeExtract %480 2 
                                         f32 %482 = OpImageSampleDrefExplicitLod %479 %480 %481 Lod %6 
                                                      OpStore %386 %482 
                                       f32_4 %484 = OpLoad %199 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 3 
                                Private f32* %486 = OpAccessChain %9 %36 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpCompositeExtract %485 0 
                                         f32 %489 = OpCompositeExtract %485 1 
                                       f32_3 %490 = OpCompositeConstruct %488 %489 %487 
                                                      OpStore %483 %490 
                         read_only Texture2D %491 = OpLoad %387 
                                     sampler %492 = OpLoad %389 
                  read_only Texture2DSampled %493 = OpSampledImage %491 %492 
                                       f32_3 %494 = OpLoad %483 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %405 %496 
                                Private f32* %497 = OpAccessChain %250 %286 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpLoad %386 
                                         f32 %500 = OpFMul %498 %499 
                                Private f32* %501 = OpAccessChain %9 %27 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %27 
                                                      OpStore %504 %503 
                                       f32_4 %505 = OpLoad %53 
                                       f32_4 %506 = OpVectorShuffle %505 %505 0 1 0 1 
                              Uniform f32_4* %507 = OpAccessChain %63 %165 
                                       f32_4 %508 = OpLoad %507 
                                       f32_4 %509 = OpVectorShuffle %508 %508 0 1 0 1 
                                       f32_4 %510 = OpFMul %506 %509 
                                       f32_4 %511 = OpLoad %245 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 1 2 1 
                                       f32_4 %513 = OpFAdd %510 %512 
                                                      OpStore %199 %513 
                                       f32_4 %514 = OpLoad %53 
                                       f32_4 %515 = OpVectorShuffle %514 %514 0 1 0 1 
                              Uniform f32_4* %516 = OpAccessChain %63 %165 
                                       f32_4 %517 = OpLoad %516 
                                       f32_4 %518 = OpVectorShuffle %517 %517 0 1 0 1 
                                       f32_4 %519 = OpFMul %515 %518 
                                       f32_4 %520 = OpLoad %245 
                                       f32_4 %521 = OpVectorShuffle %520 %520 0 3 2 3 
                                       f32_4 %522 = OpFAdd %519 %521 
                                                      OpStore %223 %522 
                                       f32_4 %524 = OpLoad %199 
                                       f32_2 %525 = OpVectorShuffle %524 %524 0 1 
                                Private f32* %526 = OpAccessChain %9 %36 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpCompositeExtract %525 0 
                                         f32 %529 = OpCompositeExtract %525 1 
                                       f32_3 %530 = OpCompositeConstruct %528 %529 %527 
                                                      OpStore %523 %530 
                         read_only Texture2D %532 = OpLoad %387 
                                     sampler %533 = OpLoad %389 
                  read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                       f32_3 %535 = OpLoad %523 
                                         f32 %536 = OpCompositeExtract %535 2 
                                         f32 %537 = OpImageSampleDrefExplicitLod %534 %535 %536 Lod %6 
                                                      OpStore %531 %537 
                                       f32_4 %539 = OpLoad %199 
                                       f32_2 %540 = OpVectorShuffle %539 %539 2 3 
                                Private f32* %541 = OpAccessChain %9 %36 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpCompositeExtract %540 0 
                                         f32 %544 = OpCompositeExtract %540 1 
                                       f32_3 %545 = OpCompositeConstruct %543 %544 %542 
                                                      OpStore %538 %545 
                         read_only Texture2D %547 = OpLoad %387 
                                     sampler %548 = OpLoad %389 
                  read_only Texture2DSampled %549 = OpSampledImage %547 %548 
                                       f32_3 %550 = OpLoad %538 
                                         f32 %551 = OpCompositeExtract %550 2 
                                         f32 %552 = OpImageSampleDrefExplicitLod %549 %550 %551 Lod %6 
                                                      OpStore %546 %552 
                                       f32_4 %553 = OpLoad %9 
                                       f32_4 %554 = OpVectorShuffle %553 %553 1 1 3 3 
                                       f32_4 %555 = OpLoad %231 
                                       f32_4 %556 = OpFMul %554 %555 
                                                      OpStore %199 %556 
                                Private f32* %558 = OpAccessChain %9 %286 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %231 %280 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFMul %559 %561 
                                                      OpStore %557 %562 
                                Private f32* %563 = OpAccessChain %199 %27 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpLoad %531 
                                         f32 %566 = OpFMul %564 %565 
                                Private f32* %567 = OpAccessChain %9 %27 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %9 %27 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %199 %280 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpLoad %546 
                                         f32 %574 = OpFMul %572 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFAdd %574 %576 
                                Private f32* %578 = OpAccessChain %9 %27 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %199 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpLoad %405 
                                         f32 %582 = OpFMul %580 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFAdd %582 %584 
                                Private f32* %586 = OpAccessChain %9 %27 
                                                      OpStore %586 %585 
                                       f32_4 %588 = OpLoad %223 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                Private f32* %590 = OpAccessChain %9 %36 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpCompositeExtract %589 0 
                                         f32 %593 = OpCompositeExtract %589 1 
                                       f32_3 %594 = OpCompositeConstruct %592 %593 %591 
                                                      OpStore %587 %594 
                         read_only Texture2D %596 = OpLoad %387 
                                     sampler %597 = OpLoad %389 
                  read_only Texture2DSampled %598 = OpSampledImage %596 %597 
                                       f32_3 %599 = OpLoad %587 
                                         f32 %600 = OpCompositeExtract %599 2 
                                         f32 %601 = OpImageSampleDrefExplicitLod %598 %599 %600 Lod %6 
                                                      OpStore %595 %601 
                                       f32_4 %603 = OpLoad %223 
                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
                                Private f32* %605 = OpAccessChain %9 %36 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpCompositeExtract %604 0 
                                         f32 %608 = OpCompositeExtract %604 1 
                                       f32_3 %609 = OpCompositeConstruct %607 %608 %606 
                                                      OpStore %602 %609 
                         read_only Texture2D %611 = OpLoad %387 
                                     sampler %612 = OpLoad %389 
                  read_only Texture2DSampled %613 = OpSampledImage %611 %612 
                                       f32_3 %614 = OpLoad %602 
                                         f32 %615 = OpCompositeExtract %614 2 
                                         f32 %616 = OpImageSampleDrefExplicitLod %613 %614 %615 Lod %6 
                                                      OpStore %610 %616 
                                Private f32* %617 = OpAccessChain %199 %286 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpLoad %595 
                                         f32 %620 = OpFMul %618 %619 
                                Private f32* %621 = OpAccessChain %9 %27 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpFAdd %620 %622 
                                Private f32* %624 = OpAccessChain %9 %27 
                                                      OpStore %624 %623 
                                         f32 %625 = OpLoad %557 
                                         f32 %626 = OpLoad %610 
                                         f32 %627 = OpFMul %625 %626 
                                Private f32* %628 = OpAccessChain %9 %27 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFAdd %627 %629 
                                Private f32* %631 = OpAccessChain %9 %27 
                                                      OpStore %631 %630 
                                Uniform f32* %633 = OpAccessChain %63 %87 %27 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFNegate %634 
                                         f32 %636 = OpFAdd %635 %34 
                                                      OpStore %557 %636 
                                       f32_4 %637 = OpLoad %9 
                                       f32_4 %638 = OpVectorShuffle %637 %637 0 0 0 0 
                                         f32 %639 = OpLoad %557 
                                       f32_4 %640 = OpCompositeConstruct %639 %639 %639 %639 
                                       f32_4 %641 = OpFMul %638 %640 
                              Uniform f32_4* %642 = OpAccessChain %63 %87 
                                       f32_4 %643 = OpLoad %642 
                                       f32_4 %644 = OpVectorShuffle %643 %643 0 0 0 0 
                                       f32_4 %645 = OpFAdd %641 %644 
                                                      OpStore %9 %645 
                                       f32_4 %648 = OpLoad %9 
                                                      OpStore %647 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %647 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %647 Location 647 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_2 %197 = OpConstantComposite %196 %196 
                              Private f32_4* %199 = OpVariable Private 
                                       f32_2 %203 = OpConstantComposite %34 %34 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                       f32_4 %234 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %280 = OpConstant 1 
                                         u32 %286 = OpConstant 3 
                                         f32 %317 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %317 %318 %319 
                                             %378 = OpTypePointer Function %42 
                                Private f32* %386 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
                                             %391 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                Private f32* %405 = OpVariable Private 
                                Private f32* %420 = OpVariable Private 
                                Private f32* %531 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                                Private f32* %557 = OpVariable Private 
                                Private f32* %595 = OpVariable Private 
                                Private f32* %610 = OpVariable Private 
                                             %632 = OpTypePointer Uniform %6 
                                             %646 = OpTypePointer Output %7 
                               Output f32_4* %647 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %379 = OpVariable Function 
                             Function f32_3* %397 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                             Function f32_3* %469 = OpVariable Function 
                             Function f32_3* %483 = OpVariable Function 
                             Function f32_3* %523 = OpVariable Function 
                             Function f32_3* %538 = OpVariable Function 
                             Function f32_3* %587 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %198 = OpExtInst %1 37 %195 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpFNegate %201 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_2 %207 = OpLoad %193 
                                       f32_2 %208 = OpFNegate %207 
                                       f32_2 %209 = OpLoad %193 
                                       f32_2 %210 = OpFMul %208 %209 
                                       f32_4 %211 = OpLoad %199 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                                      OpStore %193 %213 
                                       f32_4 %214 = OpLoad %199 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %199 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore %199 %220 
                                       f32_2 %221 = OpLoad %193 
                                       f32_2 %222 = OpFAdd %221 %203 
                                                      OpStore %193 %222 
                                       f32_2 %224 = OpLoad %193 
                                       f32_2 %225 = OpFMul %224 %217 
                                       f32_4 %226 = OpLoad %223 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 2 3 
                                                      OpStore %223 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpExtInst %1 40 %229 %197 
                                                      OpStore %193 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 1 1 
                                       f32_4 %235 = OpFAdd %233 %234 
                                                      OpStore %231 %235 
                                       f32_2 %236 = OpLoad %193 
                                       f32_2 %237 = OpFNegate %236 
                                       f32_2 %238 = OpLoad %193 
                                       f32_2 %239 = OpFMul %237 %238 
                                       f32_4 %240 = OpLoad %231 
                                       f32_2 %241 = OpVectorShuffle %240 %240 1 3 
                                       f32_2 %242 = OpFAdd %239 %241 
                                                      OpStore %193 %242 
                                       f32_2 %243 = OpLoad %193 
                                       f32_2 %244 = OpFAdd %243 %203 
                                                      OpStore %193 %244 
                                       f32_2 %246 = OpLoad %193 
                                       f32_2 %247 = OpFMul %246 %217 
                                       f32_4 %248 = OpLoad %245 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 2 3 
                                                      OpStore %245 %249 
                                       f32_4 %251 = OpLoad %231 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 0 2 2 
                                       f32_4 %253 = OpLoad %231 
                                       f32_4 %254 = OpVectorShuffle %253 %253 0 0 2 2 
                                       f32_4 %255 = OpFMul %252 %254 
                                                      OpStore %250 %255 
                                       f32_4 %256 = OpLoad %231 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 3 
                                       f32_2 %258 = OpFMul %257 %217 
                                                      OpStore %193 %258 
                                       f32_4 %259 = OpLoad %250 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 2 
                                       f32_2 %261 = OpFMul %260 %171 
                                       f32_4 %262 = OpLoad %9 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFNegate %263 
                                       f32_2 %265 = OpFAdd %261 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %250 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %199 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %199 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %276 %217 
                                       f32_4 %278 = OpLoad %231 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %231 %279 
                                Private f32* %281 = OpAccessChain %231 %280 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %223 %36 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %193 %280 
                                         f32 %285 = OpLoad %284 
                                Private f32* %287 = OpAccessChain %223 %286 
                                                      OpStore %287 %285 
                                Private f32* %288 = OpAccessChain %193 %27 
                                         f32 %289 = OpLoad %288 
                                Private f32* %290 = OpAccessChain %231 %286 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %199 
                                       f32_2 %292 = OpVectorShuffle %291 %291 1 2 
                                       f32_4 %293 = OpLoad %245 
                                       f32_4 %294 = OpVectorShuffle %293 %292 0 1 4 5 
                                                      OpStore %245 %294 
                                       f32_4 %295 = OpLoad %223 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 1 3 
                                       f32_4 %297 = OpLoad %245 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 1 3 
                                       f32_3 %299 = OpFAdd %296 %298 
                                       f32_4 %300 = OpLoad %9 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %9 %301 
                                Private f32* %302 = OpAccessChain %223 %27 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %231 %36 
                                                      OpStore %304 %303 
                                       f32_4 %305 = OpLoad %245 
                                       f32_3 %306 = OpVectorShuffle %305 %305 2 1 3 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                       f32_3 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %223 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %223 %311 
                                Private f32* %312 = OpAccessChain %245 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %199 %36 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %223 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %321 = OpFAdd %316 %320 
                                       f32_4 %322 = OpLoad %223 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %223 %323 
                                       f32_4 %324 = OpLoad %223 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %63 %165 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 1 1 1 
                                       f32_3 %329 = OpFMul %325 %328 
                                       f32_4 %330 = OpLoad %223 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %223 %331 
                                Private f32* %332 = OpAccessChain %223 %27 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %245 %286 
                                                      OpStore %334 %333 
                                       f32_4 %335 = OpLoad %199 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 3 0 2 
                                       f32_4 %337 = OpLoad %231 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 3 0 2 
                                       f32_4 %339 = OpFAdd %336 %338 
                                                      OpStore %231 %339 
                                       f32_4 %340 = OpLoad %199 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpLoad %231 
                                       f32_3 %343 = OpVectorShuffle %342 %342 2 3 1 
                                       f32_3 %344 = OpFDiv %341 %343 
                                       f32_4 %345 = OpLoad %199 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %199 %346 
                                       f32_4 %347 = OpLoad %199 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %348 %320 
                                       f32_4 %350 = OpLoad %199 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %199 %351 
                                       f32_4 %352 = OpLoad %199 
                                       f32_3 %353 = OpVectorShuffle %352 %352 1 0 2 
                              Uniform f32_4* %354 = OpAccessChain %63 %165 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                                       f32_3 %357 = OpFMul %353 %356 
                                       f32_4 %358 = OpLoad %245 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %245 %359 
                                       f32_4 %360 = OpLoad %53 
                                       f32_4 %361 = OpVectorShuffle %360 %360 0 1 0 1 
                              Uniform f32_4* %362 = OpAccessChain %63 %165 
                                       f32_4 %363 = OpLoad %362 
                                       f32_4 %364 = OpVectorShuffle %363 %363 0 1 0 1 
                                       f32_4 %365 = OpFMul %361 %364 
                                       f32_4 %366 = OpLoad %245 
                                       f32_4 %367 = OpVectorShuffle %366 %366 1 3 0 3 
                                       f32_4 %368 = OpFAdd %365 %367 
                                                      OpStore %199 %368 
                                       f32_4 %369 = OpLoad %53 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                              Uniform f32_4* %371 = OpAccessChain %63 %165 
                                       f32_4 %372 = OpLoad %371 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                                       f32_2 %374 = OpFMul %370 %373 
                                       f32_4 %375 = OpLoad %245 
                                       f32_2 %376 = OpVectorShuffle %375 %375 2 3 
                                       f32_2 %377 = OpFAdd %374 %376 
                                                      OpStore %193 %377 
                                       f32_2 %380 = OpLoad %193 
                                Private f32* %381 = OpAccessChain %9 %36 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %379 %385 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %393 = OpSampledImage %388 %390 
                                       f32_3 %394 = OpLoad %379 
                                         f32 %395 = OpCompositeExtract %394 2 
                                         f32 %396 = OpImageSampleDrefExplicitLod %393 %394 %395 Lod %6 
                                                      OpStore %386 %396 
                                       f32_4 %398 = OpLoad %199 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                Private f32* %400 = OpAccessChain %9 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpCompositeExtract %399 0 
                                         f32 %403 = OpCompositeExtract %399 1 
                                       f32_3 %404 = OpCompositeConstruct %402 %403 %401 
                                                      OpStore %397 %404 
                         read_only Texture2D %406 = OpLoad %387 
                                     sampler %407 = OpLoad %389 
                  read_only Texture2DSampled %408 = OpSampledImage %406 %407 
                                       f32_3 %409 = OpLoad %397 
                                         f32 %410 = OpCompositeExtract %409 2 
                                         f32 %411 = OpImageSampleDrefExplicitLod %408 %409 %410 Lod %6 
                                                      OpStore %405 %411 
                                       f32_4 %413 = OpLoad %199 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                Private f32* %415 = OpAccessChain %9 %36 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpCompositeExtract %414 0 
                                         f32 %418 = OpCompositeExtract %414 1 
                                       f32_3 %419 = OpCompositeConstruct %417 %418 %416 
                                                      OpStore %412 %419 
                         read_only Texture2D %421 = OpLoad %387 
                                     sampler %422 = OpLoad %389 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_3 %424 = OpLoad %412 
                                         f32 %425 = OpCompositeExtract %424 2 
                                         f32 %426 = OpImageSampleDrefExplicitLod %423 %424 %425 Lod %6 
                                                      OpStore %420 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 1 
                                       f32_4 %429 = OpLoad %231 
                                       f32_4 %430 = OpVectorShuffle %429 %429 2 3 1 2 
                                       f32_4 %431 = OpFMul %428 %430 
                                                      OpStore %250 %431 
                                         f32 %432 = OpLoad %420 
                                Private f32* %433 = OpAccessChain %250 %280 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                Private f32* %436 = OpAccessChain %9 %27 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %250 %27 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %405 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFAdd %440 %442 
                                Private f32* %444 = OpAccessChain %9 %27 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %250 %36 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %386 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %27 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFAdd %448 %450 
                                Private f32* %452 = OpAccessChain %9 %27 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %245 %280 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %223 %286 
                                                      OpStore %455 %454 
                                       f32_4 %456 = OpLoad %53 
                                       f32_4 %457 = OpVectorShuffle %456 %456 0 1 0 1 
                              Uniform f32_4* %458 = OpAccessChain %63 %165 
                                       f32_4 %459 = OpLoad %458 
                                       f32_4 %460 = OpVectorShuffle %459 %459 0 1 0 1 
                                       f32_4 %461 = OpFMul %457 %460 
                                       f32_4 %462 = OpLoad %223 
                                       f32_4 %463 = OpVectorShuffle %462 %462 3 1 3 2 
                                       f32_4 %464 = OpFAdd %461 %463 
                                                      OpStore %199 %464 
                                       f32_4 %465 = OpLoad %223 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 2 
                                       f32_4 %467 = OpLoad %245 
                                       f32_4 %468 = OpVectorShuffle %467 %466 0 4 2 5 
                                                      OpStore %245 %468 
                                       f32_4 %470 = OpLoad %199 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                Private f32* %472 = OpAccessChain %9 %36 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpCompositeExtract %471 0 
                                         f32 %475 = OpCompositeExtract %471 1 
                                       f32_3 %476 = OpCompositeConstruct %474 %475 %473 
                                                      OpStore %469 %476 
                         read_only Texture2D %477 = OpLoad %387 
                                     sampler %478 = OpLoad %389 
                  read_only Texture2DSampled %479 = OpSampledImage %477 %478 
                                       f32_3 %480 = OpLoad %469 
                                         f32 %481 = OpCompositeExtract %480 2 
                                         f32 %482 = OpImageSampleDrefExplicitLod %479 %480 %481 Lod %6 
                                                      OpStore %386 %482 
                                       f32_4 %484 = OpLoad %199 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 3 
                                Private f32* %486 = OpAccessChain %9 %36 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpCompositeExtract %485 0 
                                         f32 %489 = OpCompositeExtract %485 1 
                                       f32_3 %490 = OpCompositeConstruct %488 %489 %487 
                                                      OpStore %483 %490 
                         read_only Texture2D %491 = OpLoad %387 
                                     sampler %492 = OpLoad %389 
                  read_only Texture2DSampled %493 = OpSampledImage %491 %492 
                                       f32_3 %494 = OpLoad %483 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %405 %496 
                                Private f32* %497 = OpAccessChain %250 %286 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpLoad %386 
                                         f32 %500 = OpFMul %498 %499 
                                Private f32* %501 = OpAccessChain %9 %27 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %27 
                                                      OpStore %504 %503 
                                       f32_4 %505 = OpLoad %53 
                                       f32_4 %506 = OpVectorShuffle %505 %505 0 1 0 1 
                              Uniform f32_4* %507 = OpAccessChain %63 %165 
                                       f32_4 %508 = OpLoad %507 
                                       f32_4 %509 = OpVectorShuffle %508 %508 0 1 0 1 
                                       f32_4 %510 = OpFMul %506 %509 
                                       f32_4 %511 = OpLoad %245 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 1 2 1 
                                       f32_4 %513 = OpFAdd %510 %512 
                                                      OpStore %199 %513 
                                       f32_4 %514 = OpLoad %53 
                                       f32_4 %515 = OpVectorShuffle %514 %514 0 1 0 1 
                              Uniform f32_4* %516 = OpAccessChain %63 %165 
                                       f32_4 %517 = OpLoad %516 
                                       f32_4 %518 = OpVectorShuffle %517 %517 0 1 0 1 
                                       f32_4 %519 = OpFMul %515 %518 
                                       f32_4 %520 = OpLoad %245 
                                       f32_4 %521 = OpVectorShuffle %520 %520 0 3 2 3 
                                       f32_4 %522 = OpFAdd %519 %521 
                                                      OpStore %223 %522 
                                       f32_4 %524 = OpLoad %199 
                                       f32_2 %525 = OpVectorShuffle %524 %524 0 1 
                                Private f32* %526 = OpAccessChain %9 %36 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpCompositeExtract %525 0 
                                         f32 %529 = OpCompositeExtract %525 1 
                                       f32_3 %530 = OpCompositeConstruct %528 %529 %527 
                                                      OpStore %523 %530 
                         read_only Texture2D %532 = OpLoad %387 
                                     sampler %533 = OpLoad %389 
                  read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                       f32_3 %535 = OpLoad %523 
                                         f32 %536 = OpCompositeExtract %535 2 
                                         f32 %537 = OpImageSampleDrefExplicitLod %534 %535 %536 Lod %6 
                                                      OpStore %531 %537 
                                       f32_4 %539 = OpLoad %199 
                                       f32_2 %540 = OpVectorShuffle %539 %539 2 3 
                                Private f32* %541 = OpAccessChain %9 %36 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpCompositeExtract %540 0 
                                         f32 %544 = OpCompositeExtract %540 1 
                                       f32_3 %545 = OpCompositeConstruct %543 %544 %542 
                                                      OpStore %538 %545 
                         read_only Texture2D %547 = OpLoad %387 
                                     sampler %548 = OpLoad %389 
                  read_only Texture2DSampled %549 = OpSampledImage %547 %548 
                                       f32_3 %550 = OpLoad %538 
                                         f32 %551 = OpCompositeExtract %550 2 
                                         f32 %552 = OpImageSampleDrefExplicitLod %549 %550 %551 Lod %6 
                                                      OpStore %546 %552 
                                       f32_4 %553 = OpLoad %9 
                                       f32_4 %554 = OpVectorShuffle %553 %553 1 1 3 3 
                                       f32_4 %555 = OpLoad %231 
                                       f32_4 %556 = OpFMul %554 %555 
                                                      OpStore %199 %556 
                                Private f32* %558 = OpAccessChain %9 %286 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %231 %280 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFMul %559 %561 
                                                      OpStore %557 %562 
                                Private f32* %563 = OpAccessChain %199 %27 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpLoad %531 
                                         f32 %566 = OpFMul %564 %565 
                                Private f32* %567 = OpAccessChain %9 %27 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %9 %27 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %199 %280 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpLoad %546 
                                         f32 %574 = OpFMul %572 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFAdd %574 %576 
                                Private f32* %578 = OpAccessChain %9 %27 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %199 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpLoad %405 
                                         f32 %582 = OpFMul %580 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFAdd %582 %584 
                                Private f32* %586 = OpAccessChain %9 %27 
                                                      OpStore %586 %585 
                                       f32_4 %588 = OpLoad %223 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                Private f32* %590 = OpAccessChain %9 %36 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpCompositeExtract %589 0 
                                         f32 %593 = OpCompositeExtract %589 1 
                                       f32_3 %594 = OpCompositeConstruct %592 %593 %591 
                                                      OpStore %587 %594 
                         read_only Texture2D %596 = OpLoad %387 
                                     sampler %597 = OpLoad %389 
                  read_only Texture2DSampled %598 = OpSampledImage %596 %597 
                                       f32_3 %599 = OpLoad %587 
                                         f32 %600 = OpCompositeExtract %599 2 
                                         f32 %601 = OpImageSampleDrefExplicitLod %598 %599 %600 Lod %6 
                                                      OpStore %595 %601 
                                       f32_4 %603 = OpLoad %223 
                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
                                Private f32* %605 = OpAccessChain %9 %36 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpCompositeExtract %604 0 
                                         f32 %608 = OpCompositeExtract %604 1 
                                       f32_3 %609 = OpCompositeConstruct %607 %608 %606 
                                                      OpStore %602 %609 
                         read_only Texture2D %611 = OpLoad %387 
                                     sampler %612 = OpLoad %389 
                  read_only Texture2DSampled %613 = OpSampledImage %611 %612 
                                       f32_3 %614 = OpLoad %602 
                                         f32 %615 = OpCompositeExtract %614 2 
                                         f32 %616 = OpImageSampleDrefExplicitLod %613 %614 %615 Lod %6 
                                                      OpStore %610 %616 
                                Private f32* %617 = OpAccessChain %199 %286 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpLoad %595 
                                         f32 %620 = OpFMul %618 %619 
                                Private f32* %621 = OpAccessChain %9 %27 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpFAdd %620 %622 
                                Private f32* %624 = OpAccessChain %9 %27 
                                                      OpStore %624 %623 
                                         f32 %625 = OpLoad %557 
                                         f32 %626 = OpLoad %610 
                                         f32 %627 = OpFMul %625 %626 
                                Private f32* %628 = OpAccessChain %9 %27 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFAdd %627 %629 
                                Private f32* %631 = OpAccessChain %9 %27 
                                                      OpStore %631 %630 
                                Uniform f32* %633 = OpAccessChain %63 %87 %27 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFNegate %634 
                                         f32 %636 = OpFAdd %635 %34 
                                                      OpStore %557 %636 
                                       f32_4 %637 = OpLoad %9 
                                       f32_4 %638 = OpVectorShuffle %637 %637 0 0 0 0 
                                         f32 %639 = OpLoad %557 
                                       f32_4 %640 = OpCompositeConstruct %639 %639 %639 %639 
                                       f32_4 %641 = OpFMul %638 %640 
                              Uniform f32_4* %642 = OpAccessChain %63 %87 
                                       f32_4 %643 = OpLoad %642 
                                       f32_4 %644 = OpVectorShuffle %643 %643 0 0 0 0 
                                       f32_4 %645 = OpFAdd %641 %644 
                                                      OpStore %9 %645 
                                       f32_4 %648 = OpLoad %9 
                                                      OpStore %647 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %647 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %647 Location 647 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_2 %197 = OpConstantComposite %196 %196 
                              Private f32_4* %199 = OpVariable Private 
                                       f32_2 %203 = OpConstantComposite %34 %34 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                       f32_4 %234 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %280 = OpConstant 1 
                                         u32 %286 = OpConstant 3 
                                         f32 %317 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %317 %318 %319 
                                             %378 = OpTypePointer Function %42 
                                Private f32* %386 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
                                             %391 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                Private f32* %405 = OpVariable Private 
                                Private f32* %420 = OpVariable Private 
                                Private f32* %531 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                                Private f32* %557 = OpVariable Private 
                                Private f32* %595 = OpVariable Private 
                                Private f32* %610 = OpVariable Private 
                                             %632 = OpTypePointer Uniform %6 
                                             %646 = OpTypePointer Output %7 
                               Output f32_4* %647 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %379 = OpVariable Function 
                             Function f32_3* %397 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                             Function f32_3* %469 = OpVariable Function 
                             Function f32_3* %483 = OpVariable Function 
                             Function f32_3* %523 = OpVariable Function 
                             Function f32_3* %538 = OpVariable Function 
                             Function f32_3* %587 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %198 = OpExtInst %1 37 %195 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpFNegate %201 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_2 %207 = OpLoad %193 
                                       f32_2 %208 = OpFNegate %207 
                                       f32_2 %209 = OpLoad %193 
                                       f32_2 %210 = OpFMul %208 %209 
                                       f32_4 %211 = OpLoad %199 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                                      OpStore %193 %213 
                                       f32_4 %214 = OpLoad %199 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %199 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore %199 %220 
                                       f32_2 %221 = OpLoad %193 
                                       f32_2 %222 = OpFAdd %221 %203 
                                                      OpStore %193 %222 
                                       f32_2 %224 = OpLoad %193 
                                       f32_2 %225 = OpFMul %224 %217 
                                       f32_4 %226 = OpLoad %223 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 2 3 
                                                      OpStore %223 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpExtInst %1 40 %229 %197 
                                                      OpStore %193 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 1 1 
                                       f32_4 %235 = OpFAdd %233 %234 
                                                      OpStore %231 %235 
                                       f32_2 %236 = OpLoad %193 
                                       f32_2 %237 = OpFNegate %236 
                                       f32_2 %238 = OpLoad %193 
                                       f32_2 %239 = OpFMul %237 %238 
                                       f32_4 %240 = OpLoad %231 
                                       f32_2 %241 = OpVectorShuffle %240 %240 1 3 
                                       f32_2 %242 = OpFAdd %239 %241 
                                                      OpStore %193 %242 
                                       f32_2 %243 = OpLoad %193 
                                       f32_2 %244 = OpFAdd %243 %203 
                                                      OpStore %193 %244 
                                       f32_2 %246 = OpLoad %193 
                                       f32_2 %247 = OpFMul %246 %217 
                                       f32_4 %248 = OpLoad %245 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 2 3 
                                                      OpStore %245 %249 
                                       f32_4 %251 = OpLoad %231 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 0 2 2 
                                       f32_4 %253 = OpLoad %231 
                                       f32_4 %254 = OpVectorShuffle %253 %253 0 0 2 2 
                                       f32_4 %255 = OpFMul %252 %254 
                                                      OpStore %250 %255 
                                       f32_4 %256 = OpLoad %231 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 3 
                                       f32_2 %258 = OpFMul %257 %217 
                                                      OpStore %193 %258 
                                       f32_4 %259 = OpLoad %250 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 2 
                                       f32_2 %261 = OpFMul %260 %171 
                                       f32_4 %262 = OpLoad %9 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFNegate %263 
                                       f32_2 %265 = OpFAdd %261 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %250 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %199 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %199 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %276 %217 
                                       f32_4 %278 = OpLoad %231 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %231 %279 
                                Private f32* %281 = OpAccessChain %231 %280 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %223 %36 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %193 %280 
                                         f32 %285 = OpLoad %284 
                                Private f32* %287 = OpAccessChain %223 %286 
                                                      OpStore %287 %285 
                                Private f32* %288 = OpAccessChain %193 %27 
                                         f32 %289 = OpLoad %288 
                                Private f32* %290 = OpAccessChain %231 %286 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %199 
                                       f32_2 %292 = OpVectorShuffle %291 %291 1 2 
                                       f32_4 %293 = OpLoad %245 
                                       f32_4 %294 = OpVectorShuffle %293 %292 0 1 4 5 
                                                      OpStore %245 %294 
                                       f32_4 %295 = OpLoad %223 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 1 3 
                                       f32_4 %297 = OpLoad %245 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 1 3 
                                       f32_3 %299 = OpFAdd %296 %298 
                                       f32_4 %300 = OpLoad %9 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %9 %301 
                                Private f32* %302 = OpAccessChain %223 %27 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %231 %36 
                                                      OpStore %304 %303 
                                       f32_4 %305 = OpLoad %245 
                                       f32_3 %306 = OpVectorShuffle %305 %305 2 1 3 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                       f32_3 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %223 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %223 %311 
                                Private f32* %312 = OpAccessChain %245 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %199 %36 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %223 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %321 = OpFAdd %316 %320 
                                       f32_4 %322 = OpLoad %223 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %223 %323 
                                       f32_4 %324 = OpLoad %223 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %63 %165 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 1 1 1 
                                       f32_3 %329 = OpFMul %325 %328 
                                       f32_4 %330 = OpLoad %223 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %223 %331 
                                Private f32* %332 = OpAccessChain %223 %27 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %245 %286 
                                                      OpStore %334 %333 
                                       f32_4 %335 = OpLoad %199 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 3 0 2 
                                       f32_4 %337 = OpLoad %231 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 3 0 2 
                                       f32_4 %339 = OpFAdd %336 %338 
                                                      OpStore %231 %339 
                                       f32_4 %340 = OpLoad %199 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpLoad %231 
                                       f32_3 %343 = OpVectorShuffle %342 %342 2 3 1 
                                       f32_3 %344 = OpFDiv %341 %343 
                                       f32_4 %345 = OpLoad %199 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %199 %346 
                                       f32_4 %347 = OpLoad %199 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %348 %320 
                                       f32_4 %350 = OpLoad %199 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %199 %351 
                                       f32_4 %352 = OpLoad %199 
                                       f32_3 %353 = OpVectorShuffle %352 %352 1 0 2 
                              Uniform f32_4* %354 = OpAccessChain %63 %165 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                                       f32_3 %357 = OpFMul %353 %356 
                                       f32_4 %358 = OpLoad %245 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %245 %359 
                                       f32_4 %360 = OpLoad %53 
                                       f32_4 %361 = OpVectorShuffle %360 %360 0 1 0 1 
                              Uniform f32_4* %362 = OpAccessChain %63 %165 
                                       f32_4 %363 = OpLoad %362 
                                       f32_4 %364 = OpVectorShuffle %363 %363 0 1 0 1 
                                       f32_4 %365 = OpFMul %361 %364 
                                       f32_4 %366 = OpLoad %245 
                                       f32_4 %367 = OpVectorShuffle %366 %366 1 3 0 3 
                                       f32_4 %368 = OpFAdd %365 %367 
                                                      OpStore %199 %368 
                                       f32_4 %369 = OpLoad %53 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                              Uniform f32_4* %371 = OpAccessChain %63 %165 
                                       f32_4 %372 = OpLoad %371 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                                       f32_2 %374 = OpFMul %370 %373 
                                       f32_4 %375 = OpLoad %245 
                                       f32_2 %376 = OpVectorShuffle %375 %375 2 3 
                                       f32_2 %377 = OpFAdd %374 %376 
                                                      OpStore %193 %377 
                                       f32_2 %380 = OpLoad %193 
                                Private f32* %381 = OpAccessChain %9 %36 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %379 %385 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %393 = OpSampledImage %388 %390 
                                       f32_3 %394 = OpLoad %379 
                                         f32 %395 = OpCompositeExtract %394 2 
                                         f32 %396 = OpImageSampleDrefExplicitLod %393 %394 %395 Lod %6 
                                                      OpStore %386 %396 
                                       f32_4 %398 = OpLoad %199 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                Private f32* %400 = OpAccessChain %9 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpCompositeExtract %399 0 
                                         f32 %403 = OpCompositeExtract %399 1 
                                       f32_3 %404 = OpCompositeConstruct %402 %403 %401 
                                                      OpStore %397 %404 
                         read_only Texture2D %406 = OpLoad %387 
                                     sampler %407 = OpLoad %389 
                  read_only Texture2DSampled %408 = OpSampledImage %406 %407 
                                       f32_3 %409 = OpLoad %397 
                                         f32 %410 = OpCompositeExtract %409 2 
                                         f32 %411 = OpImageSampleDrefExplicitLod %408 %409 %410 Lod %6 
                                                      OpStore %405 %411 
                                       f32_4 %413 = OpLoad %199 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                Private f32* %415 = OpAccessChain %9 %36 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpCompositeExtract %414 0 
                                         f32 %418 = OpCompositeExtract %414 1 
                                       f32_3 %419 = OpCompositeConstruct %417 %418 %416 
                                                      OpStore %412 %419 
                         read_only Texture2D %421 = OpLoad %387 
                                     sampler %422 = OpLoad %389 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_3 %424 = OpLoad %412 
                                         f32 %425 = OpCompositeExtract %424 2 
                                         f32 %426 = OpImageSampleDrefExplicitLod %423 %424 %425 Lod %6 
                                                      OpStore %420 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 1 
                                       f32_4 %429 = OpLoad %231 
                                       f32_4 %430 = OpVectorShuffle %429 %429 2 3 1 2 
                                       f32_4 %431 = OpFMul %428 %430 
                                                      OpStore %250 %431 
                                         f32 %432 = OpLoad %420 
                                Private f32* %433 = OpAccessChain %250 %280 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                Private f32* %436 = OpAccessChain %9 %27 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %250 %27 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %405 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFAdd %440 %442 
                                Private f32* %444 = OpAccessChain %9 %27 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %250 %36 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %386 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %27 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFAdd %448 %450 
                                Private f32* %452 = OpAccessChain %9 %27 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %245 %280 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %223 %286 
                                                      OpStore %455 %454 
                                       f32_4 %456 = OpLoad %53 
                                       f32_4 %457 = OpVectorShuffle %456 %456 0 1 0 1 
                              Uniform f32_4* %458 = OpAccessChain %63 %165 
                                       f32_4 %459 = OpLoad %458 
                                       f32_4 %460 = OpVectorShuffle %459 %459 0 1 0 1 
                                       f32_4 %461 = OpFMul %457 %460 
                                       f32_4 %462 = OpLoad %223 
                                       f32_4 %463 = OpVectorShuffle %462 %462 3 1 3 2 
                                       f32_4 %464 = OpFAdd %461 %463 
                                                      OpStore %199 %464 
                                       f32_4 %465 = OpLoad %223 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 2 
                                       f32_4 %467 = OpLoad %245 
                                       f32_4 %468 = OpVectorShuffle %467 %466 0 4 2 5 
                                                      OpStore %245 %468 
                                       f32_4 %470 = OpLoad %199 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                Private f32* %472 = OpAccessChain %9 %36 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpCompositeExtract %471 0 
                                         f32 %475 = OpCompositeExtract %471 1 
                                       f32_3 %476 = OpCompositeConstruct %474 %475 %473 
                                                      OpStore %469 %476 
                         read_only Texture2D %477 = OpLoad %387 
                                     sampler %478 = OpLoad %389 
                  read_only Texture2DSampled %479 = OpSampledImage %477 %478 
                                       f32_3 %480 = OpLoad %469 
                                         f32 %481 = OpCompositeExtract %480 2 
                                         f32 %482 = OpImageSampleDrefExplicitLod %479 %480 %481 Lod %6 
                                                      OpStore %386 %482 
                                       f32_4 %484 = OpLoad %199 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 3 
                                Private f32* %486 = OpAccessChain %9 %36 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpCompositeExtract %485 0 
                                         f32 %489 = OpCompositeExtract %485 1 
                                       f32_3 %490 = OpCompositeConstruct %488 %489 %487 
                                                      OpStore %483 %490 
                         read_only Texture2D %491 = OpLoad %387 
                                     sampler %492 = OpLoad %389 
                  read_only Texture2DSampled %493 = OpSampledImage %491 %492 
                                       f32_3 %494 = OpLoad %483 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %405 %496 
                                Private f32* %497 = OpAccessChain %250 %286 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpLoad %386 
                                         f32 %500 = OpFMul %498 %499 
                                Private f32* %501 = OpAccessChain %9 %27 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %27 
                                                      OpStore %504 %503 
                                       f32_4 %505 = OpLoad %53 
                                       f32_4 %506 = OpVectorShuffle %505 %505 0 1 0 1 
                              Uniform f32_4* %507 = OpAccessChain %63 %165 
                                       f32_4 %508 = OpLoad %507 
                                       f32_4 %509 = OpVectorShuffle %508 %508 0 1 0 1 
                                       f32_4 %510 = OpFMul %506 %509 
                                       f32_4 %511 = OpLoad %245 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 1 2 1 
                                       f32_4 %513 = OpFAdd %510 %512 
                                                      OpStore %199 %513 
                                       f32_4 %514 = OpLoad %53 
                                       f32_4 %515 = OpVectorShuffle %514 %514 0 1 0 1 
                              Uniform f32_4* %516 = OpAccessChain %63 %165 
                                       f32_4 %517 = OpLoad %516 
                                       f32_4 %518 = OpVectorShuffle %517 %517 0 1 0 1 
                                       f32_4 %519 = OpFMul %515 %518 
                                       f32_4 %520 = OpLoad %245 
                                       f32_4 %521 = OpVectorShuffle %520 %520 0 3 2 3 
                                       f32_4 %522 = OpFAdd %519 %521 
                                                      OpStore %223 %522 
                                       f32_4 %524 = OpLoad %199 
                                       f32_2 %525 = OpVectorShuffle %524 %524 0 1 
                                Private f32* %526 = OpAccessChain %9 %36 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpCompositeExtract %525 0 
                                         f32 %529 = OpCompositeExtract %525 1 
                                       f32_3 %530 = OpCompositeConstruct %528 %529 %527 
                                                      OpStore %523 %530 
                         read_only Texture2D %532 = OpLoad %387 
                                     sampler %533 = OpLoad %389 
                  read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                       f32_3 %535 = OpLoad %523 
                                         f32 %536 = OpCompositeExtract %535 2 
                                         f32 %537 = OpImageSampleDrefExplicitLod %534 %535 %536 Lod %6 
                                                      OpStore %531 %537 
                                       f32_4 %539 = OpLoad %199 
                                       f32_2 %540 = OpVectorShuffle %539 %539 2 3 
                                Private f32* %541 = OpAccessChain %9 %36 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpCompositeExtract %540 0 
                                         f32 %544 = OpCompositeExtract %540 1 
                                       f32_3 %545 = OpCompositeConstruct %543 %544 %542 
                                                      OpStore %538 %545 
                         read_only Texture2D %547 = OpLoad %387 
                                     sampler %548 = OpLoad %389 
                  read_only Texture2DSampled %549 = OpSampledImage %547 %548 
                                       f32_3 %550 = OpLoad %538 
                                         f32 %551 = OpCompositeExtract %550 2 
                                         f32 %552 = OpImageSampleDrefExplicitLod %549 %550 %551 Lod %6 
                                                      OpStore %546 %552 
                                       f32_4 %553 = OpLoad %9 
                                       f32_4 %554 = OpVectorShuffle %553 %553 1 1 3 3 
                                       f32_4 %555 = OpLoad %231 
                                       f32_4 %556 = OpFMul %554 %555 
                                                      OpStore %199 %556 
                                Private f32* %558 = OpAccessChain %9 %286 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %231 %280 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFMul %559 %561 
                                                      OpStore %557 %562 
                                Private f32* %563 = OpAccessChain %199 %27 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpLoad %531 
                                         f32 %566 = OpFMul %564 %565 
                                Private f32* %567 = OpAccessChain %9 %27 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %9 %27 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %199 %280 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpLoad %546 
                                         f32 %574 = OpFMul %572 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFAdd %574 %576 
                                Private f32* %578 = OpAccessChain %9 %27 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %199 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpLoad %405 
                                         f32 %582 = OpFMul %580 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFAdd %582 %584 
                                Private f32* %586 = OpAccessChain %9 %27 
                                                      OpStore %586 %585 
                                       f32_4 %588 = OpLoad %223 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                Private f32* %590 = OpAccessChain %9 %36 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpCompositeExtract %589 0 
                                         f32 %593 = OpCompositeExtract %589 1 
                                       f32_3 %594 = OpCompositeConstruct %592 %593 %591 
                                                      OpStore %587 %594 
                         read_only Texture2D %596 = OpLoad %387 
                                     sampler %597 = OpLoad %389 
                  read_only Texture2DSampled %598 = OpSampledImage %596 %597 
                                       f32_3 %599 = OpLoad %587 
                                         f32 %600 = OpCompositeExtract %599 2 
                                         f32 %601 = OpImageSampleDrefExplicitLod %598 %599 %600 Lod %6 
                                                      OpStore %595 %601 
                                       f32_4 %603 = OpLoad %223 
                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
                                Private f32* %605 = OpAccessChain %9 %36 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpCompositeExtract %604 0 
                                         f32 %608 = OpCompositeExtract %604 1 
                                       f32_3 %609 = OpCompositeConstruct %607 %608 %606 
                                                      OpStore %602 %609 
                         read_only Texture2D %611 = OpLoad %387 
                                     sampler %612 = OpLoad %389 
                  read_only Texture2DSampled %613 = OpSampledImage %611 %612 
                                       f32_3 %614 = OpLoad %602 
                                         f32 %615 = OpCompositeExtract %614 2 
                                         f32 %616 = OpImageSampleDrefExplicitLod %613 %614 %615 Lod %6 
                                                      OpStore %610 %616 
                                Private f32* %617 = OpAccessChain %199 %286 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpLoad %595 
                                         f32 %620 = OpFMul %618 %619 
                                Private f32* %621 = OpAccessChain %9 %27 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpFAdd %620 %622 
                                Private f32* %624 = OpAccessChain %9 %27 
                                                      OpStore %624 %623 
                                         f32 %625 = OpLoad %557 
                                         f32 %626 = OpLoad %610 
                                         f32 %627 = OpFMul %625 %626 
                                Private f32* %628 = OpAccessChain %9 %27 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFAdd %627 %629 
                                Private f32* %631 = OpAccessChain %9 %27 
                                                      OpStore %631 %630 
                                Uniform f32* %633 = OpAccessChain %63 %87 %27 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFNegate %634 
                                         f32 %636 = OpFAdd %635 %34 
                                                      OpStore %557 %636 
                                       f32_4 %637 = OpLoad %9 
                                       f32_4 %638 = OpVectorShuffle %637 %637 0 0 0 0 
                                         f32 %639 = OpLoad %557 
                                       f32_4 %640 = OpCompositeConstruct %639 %639 %639 %639 
                                       f32_4 %641 = OpFMul %638 %640 
                              Uniform f32_4* %642 = OpAccessChain %63 %87 
                                       f32_4 %643 = OpLoad %642 
                                       f32_4 %644 = OpVectorShuffle %643 %643 0 0 0 0 
                                       f32_4 %645 = OpFAdd %641 %644 
                                                      OpStore %9 %645 
                                       f32_4 %648 = OpLoad %9 
                                                      OpStore %647 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_14;
vec2 u_xlat15;
mediump float u_xlat16_15;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.z = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat15.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat2.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat3.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat15.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat15.xy = (-u_xlat15.xy) * u_xlat15.xy + u_xlat4.yw;
    u_xlat15.xy = u_xlat15.xy + vec2(1.0, 1.0);
    u_xlat5.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
    u_xlat6 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat15.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
    u_xlat0.xy = u_xlat6.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat2.zw = u_xlat6.wy * vec2(0.0799999982, 0.0799999982);
    u_xlat4.xy = u_xlat0.xy * vec2(0.159999996, 0.159999996);
    u_xlat3.z = u_xlat4.y;
    u_xlat3.w = u_xlat15.y;
    u_xlat4.w = u_xlat15.x;
    u_xlat5.zw = u_xlat2.yz;
    u_xlat0.xyw = u_xlat3.zyw + u_xlat5.zyw;
    u_xlat4.z = u_xlat3.x;
    u_xlat3.xyz = u_xlat5.zyw / u_xlat0.xyw;
    u_xlat2.z = u_xlat5.x;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat3.xyz = u_xlat3.xyz * _ShadowMapTexture_TexelSize.yyy;
    u_xlat5.w = u_xlat3.x;
    u_xlat4 = u_xlat2.zwxz + u_xlat4.zwxz;
    u_xlat2.xyz = u_xlat2.xzw / u_xlat4.zwy;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
    u_xlat5.xyz = u_xlat2.yxz * _ShadowMapTexture_TexelSize.xxx;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
    u_xlat15.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    vec3 txVec2 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    u_xlat6 = u_xlat0.xxxy * u_xlat4.zwyz;
    u_xlat0.x = u_xlat16_2 * u_xlat6.y;
    u_xlat0.x = u_xlat6.x * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat6.z * u_xlat16_15 + u_xlat0.x;
    u_xlat3.w = u_xlat5.y;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.wywz;
    u_xlat5.yw = u_xlat3.yz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    u_xlat0.x = u_xlat6.w * u_xlat16_15 + u_xlat0.x;
    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat0.z);
    u_xlat16_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat0.z);
    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    u_xlat2 = u_xlat0.yyww * u_xlat4;
    u_xlat7 = u_xlat0.w * u_xlat4.y;
    u_xlat0.x = u_xlat2.x * u_xlat16_1 + u_xlat0.x;
    u_xlat0.x = u_xlat2.y * u_xlat16_8 + u_xlat0.x;
    u_xlat0.x = u_xlat2.z * u_xlat16_22 + u_xlat0.x;
    vec3 txVec7 = vec3(u_xlat3.xy,u_xlat0.z);
    u_xlat16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    vec3 txVec8 = vec3(u_xlat3.zw,u_xlat0.z);
    u_xlat16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    u_xlat0.x = u_xlat2.w * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat7 * u_xlat16_14 + u_xlat0.x;
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat0 = u_xlat0.xxxx * vec4(u_xlat7) + _LightShadowData.xxxx;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %647 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %647 Location 647 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_2 %197 = OpConstantComposite %196 %196 
                              Private f32_4* %199 = OpVariable Private 
                                       f32_2 %203 = OpConstantComposite %34 %34 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                       f32_4 %234 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %280 = OpConstant 1 
                                         u32 %286 = OpConstant 3 
                                         f32 %317 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %317 %318 %319 
                                             %378 = OpTypePointer Function %42 
                                Private f32* %386 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
                                             %391 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                Private f32* %405 = OpVariable Private 
                                Private f32* %420 = OpVariable Private 
                                Private f32* %531 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                                Private f32* %557 = OpVariable Private 
                                Private f32* %595 = OpVariable Private 
                                Private f32* %610 = OpVariable Private 
                                             %632 = OpTypePointer Uniform %6 
                                             %646 = OpTypePointer Output %7 
                               Output f32_4* %647 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %379 = OpVariable Function 
                             Function f32_3* %397 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                             Function f32_3* %469 = OpVariable Function 
                             Function f32_3* %483 = OpVariable Function 
                             Function f32_3* %523 = OpVariable Function 
                             Function f32_3* %538 = OpVariable Function 
                             Function f32_3* %587 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %198 = OpExtInst %1 37 %195 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpFNegate %201 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_2 %207 = OpLoad %193 
                                       f32_2 %208 = OpFNegate %207 
                                       f32_2 %209 = OpLoad %193 
                                       f32_2 %210 = OpFMul %208 %209 
                                       f32_4 %211 = OpLoad %199 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                                      OpStore %193 %213 
                                       f32_4 %214 = OpLoad %199 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %199 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore %199 %220 
                                       f32_2 %221 = OpLoad %193 
                                       f32_2 %222 = OpFAdd %221 %203 
                                                      OpStore %193 %222 
                                       f32_2 %224 = OpLoad %193 
                                       f32_2 %225 = OpFMul %224 %217 
                                       f32_4 %226 = OpLoad %223 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 2 3 
                                                      OpStore %223 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpExtInst %1 40 %229 %197 
                                                      OpStore %193 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 1 1 
                                       f32_4 %235 = OpFAdd %233 %234 
                                                      OpStore %231 %235 
                                       f32_2 %236 = OpLoad %193 
                                       f32_2 %237 = OpFNegate %236 
                                       f32_2 %238 = OpLoad %193 
                                       f32_2 %239 = OpFMul %237 %238 
                                       f32_4 %240 = OpLoad %231 
                                       f32_2 %241 = OpVectorShuffle %240 %240 1 3 
                                       f32_2 %242 = OpFAdd %239 %241 
                                                      OpStore %193 %242 
                                       f32_2 %243 = OpLoad %193 
                                       f32_2 %244 = OpFAdd %243 %203 
                                                      OpStore %193 %244 
                                       f32_2 %246 = OpLoad %193 
                                       f32_2 %247 = OpFMul %246 %217 
                                       f32_4 %248 = OpLoad %245 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 2 3 
                                                      OpStore %245 %249 
                                       f32_4 %251 = OpLoad %231 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 0 2 2 
                                       f32_4 %253 = OpLoad %231 
                                       f32_4 %254 = OpVectorShuffle %253 %253 0 0 2 2 
                                       f32_4 %255 = OpFMul %252 %254 
                                                      OpStore %250 %255 
                                       f32_4 %256 = OpLoad %231 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 3 
                                       f32_2 %258 = OpFMul %257 %217 
                                                      OpStore %193 %258 
                                       f32_4 %259 = OpLoad %250 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 2 
                                       f32_2 %261 = OpFMul %260 %171 
                                       f32_4 %262 = OpLoad %9 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFNegate %263 
                                       f32_2 %265 = OpFAdd %261 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %250 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %199 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %199 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %276 %217 
                                       f32_4 %278 = OpLoad %231 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %231 %279 
                                Private f32* %281 = OpAccessChain %231 %280 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %223 %36 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %193 %280 
                                         f32 %285 = OpLoad %284 
                                Private f32* %287 = OpAccessChain %223 %286 
                                                      OpStore %287 %285 
                                Private f32* %288 = OpAccessChain %193 %27 
                                         f32 %289 = OpLoad %288 
                                Private f32* %290 = OpAccessChain %231 %286 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %199 
                                       f32_2 %292 = OpVectorShuffle %291 %291 1 2 
                                       f32_4 %293 = OpLoad %245 
                                       f32_4 %294 = OpVectorShuffle %293 %292 0 1 4 5 
                                                      OpStore %245 %294 
                                       f32_4 %295 = OpLoad %223 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 1 3 
                                       f32_4 %297 = OpLoad %245 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 1 3 
                                       f32_3 %299 = OpFAdd %296 %298 
                                       f32_4 %300 = OpLoad %9 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %9 %301 
                                Private f32* %302 = OpAccessChain %223 %27 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %231 %36 
                                                      OpStore %304 %303 
                                       f32_4 %305 = OpLoad %245 
                                       f32_3 %306 = OpVectorShuffle %305 %305 2 1 3 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                       f32_3 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %223 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %223 %311 
                                Private f32* %312 = OpAccessChain %245 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %199 %36 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %223 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %321 = OpFAdd %316 %320 
                                       f32_4 %322 = OpLoad %223 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %223 %323 
                                       f32_4 %324 = OpLoad %223 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %63 %165 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 1 1 1 
                                       f32_3 %329 = OpFMul %325 %328 
                                       f32_4 %330 = OpLoad %223 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %223 %331 
                                Private f32* %332 = OpAccessChain %223 %27 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %245 %286 
                                                      OpStore %334 %333 
                                       f32_4 %335 = OpLoad %199 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 3 0 2 
                                       f32_4 %337 = OpLoad %231 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 3 0 2 
                                       f32_4 %339 = OpFAdd %336 %338 
                                                      OpStore %231 %339 
                                       f32_4 %340 = OpLoad %199 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpLoad %231 
                                       f32_3 %343 = OpVectorShuffle %342 %342 2 3 1 
                                       f32_3 %344 = OpFDiv %341 %343 
                                       f32_4 %345 = OpLoad %199 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %199 %346 
                                       f32_4 %347 = OpLoad %199 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %348 %320 
                                       f32_4 %350 = OpLoad %199 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %199 %351 
                                       f32_4 %352 = OpLoad %199 
                                       f32_3 %353 = OpVectorShuffle %352 %352 1 0 2 
                              Uniform f32_4* %354 = OpAccessChain %63 %165 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                                       f32_3 %357 = OpFMul %353 %356 
                                       f32_4 %358 = OpLoad %245 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %245 %359 
                                       f32_4 %360 = OpLoad %53 
                                       f32_4 %361 = OpVectorShuffle %360 %360 0 1 0 1 
                              Uniform f32_4* %362 = OpAccessChain %63 %165 
                                       f32_4 %363 = OpLoad %362 
                                       f32_4 %364 = OpVectorShuffle %363 %363 0 1 0 1 
                                       f32_4 %365 = OpFMul %361 %364 
                                       f32_4 %366 = OpLoad %245 
                                       f32_4 %367 = OpVectorShuffle %366 %366 1 3 0 3 
                                       f32_4 %368 = OpFAdd %365 %367 
                                                      OpStore %199 %368 
                                       f32_4 %369 = OpLoad %53 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                              Uniform f32_4* %371 = OpAccessChain %63 %165 
                                       f32_4 %372 = OpLoad %371 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                                       f32_2 %374 = OpFMul %370 %373 
                                       f32_4 %375 = OpLoad %245 
                                       f32_2 %376 = OpVectorShuffle %375 %375 2 3 
                                       f32_2 %377 = OpFAdd %374 %376 
                                                      OpStore %193 %377 
                                       f32_2 %380 = OpLoad %193 
                                Private f32* %381 = OpAccessChain %9 %36 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %379 %385 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %393 = OpSampledImage %388 %390 
                                       f32_3 %394 = OpLoad %379 
                                         f32 %395 = OpCompositeExtract %394 2 
                                         f32 %396 = OpImageSampleDrefExplicitLod %393 %394 %395 Lod %6 
                                                      OpStore %386 %396 
                                       f32_4 %398 = OpLoad %199 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                Private f32* %400 = OpAccessChain %9 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpCompositeExtract %399 0 
                                         f32 %403 = OpCompositeExtract %399 1 
                                       f32_3 %404 = OpCompositeConstruct %402 %403 %401 
                                                      OpStore %397 %404 
                         read_only Texture2D %406 = OpLoad %387 
                                     sampler %407 = OpLoad %389 
                  read_only Texture2DSampled %408 = OpSampledImage %406 %407 
                                       f32_3 %409 = OpLoad %397 
                                         f32 %410 = OpCompositeExtract %409 2 
                                         f32 %411 = OpImageSampleDrefExplicitLod %408 %409 %410 Lod %6 
                                                      OpStore %405 %411 
                                       f32_4 %413 = OpLoad %199 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                Private f32* %415 = OpAccessChain %9 %36 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpCompositeExtract %414 0 
                                         f32 %418 = OpCompositeExtract %414 1 
                                       f32_3 %419 = OpCompositeConstruct %417 %418 %416 
                                                      OpStore %412 %419 
                         read_only Texture2D %421 = OpLoad %387 
                                     sampler %422 = OpLoad %389 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_3 %424 = OpLoad %412 
                                         f32 %425 = OpCompositeExtract %424 2 
                                         f32 %426 = OpImageSampleDrefExplicitLod %423 %424 %425 Lod %6 
                                                      OpStore %420 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 1 
                                       f32_4 %429 = OpLoad %231 
                                       f32_4 %430 = OpVectorShuffle %429 %429 2 3 1 2 
                                       f32_4 %431 = OpFMul %428 %430 
                                                      OpStore %250 %431 
                                         f32 %432 = OpLoad %420 
                                Private f32* %433 = OpAccessChain %250 %280 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                Private f32* %436 = OpAccessChain %9 %27 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %250 %27 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %405 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFAdd %440 %442 
                                Private f32* %444 = OpAccessChain %9 %27 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %250 %36 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %386 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %27 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFAdd %448 %450 
                                Private f32* %452 = OpAccessChain %9 %27 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %245 %280 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %223 %286 
                                                      OpStore %455 %454 
                                       f32_4 %456 = OpLoad %53 
                                       f32_4 %457 = OpVectorShuffle %456 %456 0 1 0 1 
                              Uniform f32_4* %458 = OpAccessChain %63 %165 
                                       f32_4 %459 = OpLoad %458 
                                       f32_4 %460 = OpVectorShuffle %459 %459 0 1 0 1 
                                       f32_4 %461 = OpFMul %457 %460 
                                       f32_4 %462 = OpLoad %223 
                                       f32_4 %463 = OpVectorShuffle %462 %462 3 1 3 2 
                                       f32_4 %464 = OpFAdd %461 %463 
                                                      OpStore %199 %464 
                                       f32_4 %465 = OpLoad %223 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 2 
                                       f32_4 %467 = OpLoad %245 
                                       f32_4 %468 = OpVectorShuffle %467 %466 0 4 2 5 
                                                      OpStore %245 %468 
                                       f32_4 %470 = OpLoad %199 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                Private f32* %472 = OpAccessChain %9 %36 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpCompositeExtract %471 0 
                                         f32 %475 = OpCompositeExtract %471 1 
                                       f32_3 %476 = OpCompositeConstruct %474 %475 %473 
                                                      OpStore %469 %476 
                         read_only Texture2D %477 = OpLoad %387 
                                     sampler %478 = OpLoad %389 
                  read_only Texture2DSampled %479 = OpSampledImage %477 %478 
                                       f32_3 %480 = OpLoad %469 
                                         f32 %481 = OpCompositeExtract %480 2 
                                         f32 %482 = OpImageSampleDrefExplicitLod %479 %480 %481 Lod %6 
                                                      OpStore %386 %482 
                                       f32_4 %484 = OpLoad %199 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 3 
                                Private f32* %486 = OpAccessChain %9 %36 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpCompositeExtract %485 0 
                                         f32 %489 = OpCompositeExtract %485 1 
                                       f32_3 %490 = OpCompositeConstruct %488 %489 %487 
                                                      OpStore %483 %490 
                         read_only Texture2D %491 = OpLoad %387 
                                     sampler %492 = OpLoad %389 
                  read_only Texture2DSampled %493 = OpSampledImage %491 %492 
                                       f32_3 %494 = OpLoad %483 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %405 %496 
                                Private f32* %497 = OpAccessChain %250 %286 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpLoad %386 
                                         f32 %500 = OpFMul %498 %499 
                                Private f32* %501 = OpAccessChain %9 %27 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %27 
                                                      OpStore %504 %503 
                                       f32_4 %505 = OpLoad %53 
                                       f32_4 %506 = OpVectorShuffle %505 %505 0 1 0 1 
                              Uniform f32_4* %507 = OpAccessChain %63 %165 
                                       f32_4 %508 = OpLoad %507 
                                       f32_4 %509 = OpVectorShuffle %508 %508 0 1 0 1 
                                       f32_4 %510 = OpFMul %506 %509 
                                       f32_4 %511 = OpLoad %245 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 1 2 1 
                                       f32_4 %513 = OpFAdd %510 %512 
                                                      OpStore %199 %513 
                                       f32_4 %514 = OpLoad %53 
                                       f32_4 %515 = OpVectorShuffle %514 %514 0 1 0 1 
                              Uniform f32_4* %516 = OpAccessChain %63 %165 
                                       f32_4 %517 = OpLoad %516 
                                       f32_4 %518 = OpVectorShuffle %517 %517 0 1 0 1 
                                       f32_4 %519 = OpFMul %515 %518 
                                       f32_4 %520 = OpLoad %245 
                                       f32_4 %521 = OpVectorShuffle %520 %520 0 3 2 3 
                                       f32_4 %522 = OpFAdd %519 %521 
                                                      OpStore %223 %522 
                                       f32_4 %524 = OpLoad %199 
                                       f32_2 %525 = OpVectorShuffle %524 %524 0 1 
                                Private f32* %526 = OpAccessChain %9 %36 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpCompositeExtract %525 0 
                                         f32 %529 = OpCompositeExtract %525 1 
                                       f32_3 %530 = OpCompositeConstruct %528 %529 %527 
                                                      OpStore %523 %530 
                         read_only Texture2D %532 = OpLoad %387 
                                     sampler %533 = OpLoad %389 
                  read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                       f32_3 %535 = OpLoad %523 
                                         f32 %536 = OpCompositeExtract %535 2 
                                         f32 %537 = OpImageSampleDrefExplicitLod %534 %535 %536 Lod %6 
                                                      OpStore %531 %537 
                                       f32_4 %539 = OpLoad %199 
                                       f32_2 %540 = OpVectorShuffle %539 %539 2 3 
                                Private f32* %541 = OpAccessChain %9 %36 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpCompositeExtract %540 0 
                                         f32 %544 = OpCompositeExtract %540 1 
                                       f32_3 %545 = OpCompositeConstruct %543 %544 %542 
                                                      OpStore %538 %545 
                         read_only Texture2D %547 = OpLoad %387 
                                     sampler %548 = OpLoad %389 
                  read_only Texture2DSampled %549 = OpSampledImage %547 %548 
                                       f32_3 %550 = OpLoad %538 
                                         f32 %551 = OpCompositeExtract %550 2 
                                         f32 %552 = OpImageSampleDrefExplicitLod %549 %550 %551 Lod %6 
                                                      OpStore %546 %552 
                                       f32_4 %553 = OpLoad %9 
                                       f32_4 %554 = OpVectorShuffle %553 %553 1 1 3 3 
                                       f32_4 %555 = OpLoad %231 
                                       f32_4 %556 = OpFMul %554 %555 
                                                      OpStore %199 %556 
                                Private f32* %558 = OpAccessChain %9 %286 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %231 %280 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFMul %559 %561 
                                                      OpStore %557 %562 
                                Private f32* %563 = OpAccessChain %199 %27 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpLoad %531 
                                         f32 %566 = OpFMul %564 %565 
                                Private f32* %567 = OpAccessChain %9 %27 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %9 %27 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %199 %280 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpLoad %546 
                                         f32 %574 = OpFMul %572 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFAdd %574 %576 
                                Private f32* %578 = OpAccessChain %9 %27 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %199 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpLoad %405 
                                         f32 %582 = OpFMul %580 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFAdd %582 %584 
                                Private f32* %586 = OpAccessChain %9 %27 
                                                      OpStore %586 %585 
                                       f32_4 %588 = OpLoad %223 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                Private f32* %590 = OpAccessChain %9 %36 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpCompositeExtract %589 0 
                                         f32 %593 = OpCompositeExtract %589 1 
                                       f32_3 %594 = OpCompositeConstruct %592 %593 %591 
                                                      OpStore %587 %594 
                         read_only Texture2D %596 = OpLoad %387 
                                     sampler %597 = OpLoad %389 
                  read_only Texture2DSampled %598 = OpSampledImage %596 %597 
                                       f32_3 %599 = OpLoad %587 
                                         f32 %600 = OpCompositeExtract %599 2 
                                         f32 %601 = OpImageSampleDrefExplicitLod %598 %599 %600 Lod %6 
                                                      OpStore %595 %601 
                                       f32_4 %603 = OpLoad %223 
                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
                                Private f32* %605 = OpAccessChain %9 %36 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpCompositeExtract %604 0 
                                         f32 %608 = OpCompositeExtract %604 1 
                                       f32_3 %609 = OpCompositeConstruct %607 %608 %606 
                                                      OpStore %602 %609 
                         read_only Texture2D %611 = OpLoad %387 
                                     sampler %612 = OpLoad %389 
                  read_only Texture2DSampled %613 = OpSampledImage %611 %612 
                                       f32_3 %614 = OpLoad %602 
                                         f32 %615 = OpCompositeExtract %614 2 
                                         f32 %616 = OpImageSampleDrefExplicitLod %613 %614 %615 Lod %6 
                                                      OpStore %610 %616 
                                Private f32* %617 = OpAccessChain %199 %286 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpLoad %595 
                                         f32 %620 = OpFMul %618 %619 
                                Private f32* %621 = OpAccessChain %9 %27 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpFAdd %620 %622 
                                Private f32* %624 = OpAccessChain %9 %27 
                                                      OpStore %624 %623 
                                         f32 %625 = OpLoad %557 
                                         f32 %626 = OpLoad %610 
                                         f32 %627 = OpFMul %625 %626 
                                Private f32* %628 = OpAccessChain %9 %27 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFAdd %627 %629 
                                Private f32* %631 = OpAccessChain %9 %27 
                                                      OpStore %631 %630 
                                Uniform f32* %633 = OpAccessChain %63 %87 %27 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFNegate %634 
                                         f32 %636 = OpFAdd %635 %34 
                                                      OpStore %557 %636 
                                       f32_4 %637 = OpLoad %9 
                                       f32_4 %638 = OpVectorShuffle %637 %637 0 0 0 0 
                                         f32 %639 = OpLoad %557 
                                       f32_4 %640 = OpCompositeConstruct %639 %639 %639 %639 
                                       f32_4 %641 = OpFMul %638 %640 
                              Uniform f32_4* %642 = OpAccessChain %63 %87 
                                       f32_4 %643 = OpLoad %642 
                                       f32_4 %644 = OpVectorShuffle %643 %643 0 0 0 0 
                                       f32_4 %645 = OpFAdd %641 %644 
                                                      OpStore %9 %645 
                                       f32_4 %648 = OpLoad %9 
                                                      OpStore %647 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %647 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %647 Location 647 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_2 %197 = OpConstantComposite %196 %196 
                              Private f32_4* %199 = OpVariable Private 
                                       f32_2 %203 = OpConstantComposite %34 %34 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                       f32_4 %234 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %280 = OpConstant 1 
                                         u32 %286 = OpConstant 3 
                                         f32 %317 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %317 %318 %319 
                                             %378 = OpTypePointer Function %42 
                                Private f32* %386 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
                                             %391 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                Private f32* %405 = OpVariable Private 
                                Private f32* %420 = OpVariable Private 
                                Private f32* %531 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                                Private f32* %557 = OpVariable Private 
                                Private f32* %595 = OpVariable Private 
                                Private f32* %610 = OpVariable Private 
                                             %632 = OpTypePointer Uniform %6 
                                             %646 = OpTypePointer Output %7 
                               Output f32_4* %647 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %379 = OpVariable Function 
                             Function f32_3* %397 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                             Function f32_3* %469 = OpVariable Function 
                             Function f32_3* %483 = OpVariable Function 
                             Function f32_3* %523 = OpVariable Function 
                             Function f32_3* %538 = OpVariable Function 
                             Function f32_3* %587 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %198 = OpExtInst %1 37 %195 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpFNegate %201 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_2 %207 = OpLoad %193 
                                       f32_2 %208 = OpFNegate %207 
                                       f32_2 %209 = OpLoad %193 
                                       f32_2 %210 = OpFMul %208 %209 
                                       f32_4 %211 = OpLoad %199 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                                      OpStore %193 %213 
                                       f32_4 %214 = OpLoad %199 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %199 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore %199 %220 
                                       f32_2 %221 = OpLoad %193 
                                       f32_2 %222 = OpFAdd %221 %203 
                                                      OpStore %193 %222 
                                       f32_2 %224 = OpLoad %193 
                                       f32_2 %225 = OpFMul %224 %217 
                                       f32_4 %226 = OpLoad %223 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 2 3 
                                                      OpStore %223 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpExtInst %1 40 %229 %197 
                                                      OpStore %193 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 1 1 
                                       f32_4 %235 = OpFAdd %233 %234 
                                                      OpStore %231 %235 
                                       f32_2 %236 = OpLoad %193 
                                       f32_2 %237 = OpFNegate %236 
                                       f32_2 %238 = OpLoad %193 
                                       f32_2 %239 = OpFMul %237 %238 
                                       f32_4 %240 = OpLoad %231 
                                       f32_2 %241 = OpVectorShuffle %240 %240 1 3 
                                       f32_2 %242 = OpFAdd %239 %241 
                                                      OpStore %193 %242 
                                       f32_2 %243 = OpLoad %193 
                                       f32_2 %244 = OpFAdd %243 %203 
                                                      OpStore %193 %244 
                                       f32_2 %246 = OpLoad %193 
                                       f32_2 %247 = OpFMul %246 %217 
                                       f32_4 %248 = OpLoad %245 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 2 3 
                                                      OpStore %245 %249 
                                       f32_4 %251 = OpLoad %231 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 0 2 2 
                                       f32_4 %253 = OpLoad %231 
                                       f32_4 %254 = OpVectorShuffle %253 %253 0 0 2 2 
                                       f32_4 %255 = OpFMul %252 %254 
                                                      OpStore %250 %255 
                                       f32_4 %256 = OpLoad %231 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 3 
                                       f32_2 %258 = OpFMul %257 %217 
                                                      OpStore %193 %258 
                                       f32_4 %259 = OpLoad %250 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 2 
                                       f32_2 %261 = OpFMul %260 %171 
                                       f32_4 %262 = OpLoad %9 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFNegate %263 
                                       f32_2 %265 = OpFAdd %261 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %250 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %199 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %199 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %276 %217 
                                       f32_4 %278 = OpLoad %231 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %231 %279 
                                Private f32* %281 = OpAccessChain %231 %280 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %223 %36 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %193 %280 
                                         f32 %285 = OpLoad %284 
                                Private f32* %287 = OpAccessChain %223 %286 
                                                      OpStore %287 %285 
                                Private f32* %288 = OpAccessChain %193 %27 
                                         f32 %289 = OpLoad %288 
                                Private f32* %290 = OpAccessChain %231 %286 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %199 
                                       f32_2 %292 = OpVectorShuffle %291 %291 1 2 
                                       f32_4 %293 = OpLoad %245 
                                       f32_4 %294 = OpVectorShuffle %293 %292 0 1 4 5 
                                                      OpStore %245 %294 
                                       f32_4 %295 = OpLoad %223 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 1 3 
                                       f32_4 %297 = OpLoad %245 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 1 3 
                                       f32_3 %299 = OpFAdd %296 %298 
                                       f32_4 %300 = OpLoad %9 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %9 %301 
                                Private f32* %302 = OpAccessChain %223 %27 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %231 %36 
                                                      OpStore %304 %303 
                                       f32_4 %305 = OpLoad %245 
                                       f32_3 %306 = OpVectorShuffle %305 %305 2 1 3 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                       f32_3 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %223 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %223 %311 
                                Private f32* %312 = OpAccessChain %245 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %199 %36 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %223 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %321 = OpFAdd %316 %320 
                                       f32_4 %322 = OpLoad %223 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %223 %323 
                                       f32_4 %324 = OpLoad %223 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %63 %165 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 1 1 1 
                                       f32_3 %329 = OpFMul %325 %328 
                                       f32_4 %330 = OpLoad %223 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %223 %331 
                                Private f32* %332 = OpAccessChain %223 %27 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %245 %286 
                                                      OpStore %334 %333 
                                       f32_4 %335 = OpLoad %199 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 3 0 2 
                                       f32_4 %337 = OpLoad %231 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 3 0 2 
                                       f32_4 %339 = OpFAdd %336 %338 
                                                      OpStore %231 %339 
                                       f32_4 %340 = OpLoad %199 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpLoad %231 
                                       f32_3 %343 = OpVectorShuffle %342 %342 2 3 1 
                                       f32_3 %344 = OpFDiv %341 %343 
                                       f32_4 %345 = OpLoad %199 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %199 %346 
                                       f32_4 %347 = OpLoad %199 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %348 %320 
                                       f32_4 %350 = OpLoad %199 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %199 %351 
                                       f32_4 %352 = OpLoad %199 
                                       f32_3 %353 = OpVectorShuffle %352 %352 1 0 2 
                              Uniform f32_4* %354 = OpAccessChain %63 %165 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                                       f32_3 %357 = OpFMul %353 %356 
                                       f32_4 %358 = OpLoad %245 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %245 %359 
                                       f32_4 %360 = OpLoad %53 
                                       f32_4 %361 = OpVectorShuffle %360 %360 0 1 0 1 
                              Uniform f32_4* %362 = OpAccessChain %63 %165 
                                       f32_4 %363 = OpLoad %362 
                                       f32_4 %364 = OpVectorShuffle %363 %363 0 1 0 1 
                                       f32_4 %365 = OpFMul %361 %364 
                                       f32_4 %366 = OpLoad %245 
                                       f32_4 %367 = OpVectorShuffle %366 %366 1 3 0 3 
                                       f32_4 %368 = OpFAdd %365 %367 
                                                      OpStore %199 %368 
                                       f32_4 %369 = OpLoad %53 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                              Uniform f32_4* %371 = OpAccessChain %63 %165 
                                       f32_4 %372 = OpLoad %371 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                                       f32_2 %374 = OpFMul %370 %373 
                                       f32_4 %375 = OpLoad %245 
                                       f32_2 %376 = OpVectorShuffle %375 %375 2 3 
                                       f32_2 %377 = OpFAdd %374 %376 
                                                      OpStore %193 %377 
                                       f32_2 %380 = OpLoad %193 
                                Private f32* %381 = OpAccessChain %9 %36 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %379 %385 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %393 = OpSampledImage %388 %390 
                                       f32_3 %394 = OpLoad %379 
                                         f32 %395 = OpCompositeExtract %394 2 
                                         f32 %396 = OpImageSampleDrefExplicitLod %393 %394 %395 Lod %6 
                                                      OpStore %386 %396 
                                       f32_4 %398 = OpLoad %199 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                Private f32* %400 = OpAccessChain %9 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpCompositeExtract %399 0 
                                         f32 %403 = OpCompositeExtract %399 1 
                                       f32_3 %404 = OpCompositeConstruct %402 %403 %401 
                                                      OpStore %397 %404 
                         read_only Texture2D %406 = OpLoad %387 
                                     sampler %407 = OpLoad %389 
                  read_only Texture2DSampled %408 = OpSampledImage %406 %407 
                                       f32_3 %409 = OpLoad %397 
                                         f32 %410 = OpCompositeExtract %409 2 
                                         f32 %411 = OpImageSampleDrefExplicitLod %408 %409 %410 Lod %6 
                                                      OpStore %405 %411 
                                       f32_4 %413 = OpLoad %199 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                Private f32* %415 = OpAccessChain %9 %36 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpCompositeExtract %414 0 
                                         f32 %418 = OpCompositeExtract %414 1 
                                       f32_3 %419 = OpCompositeConstruct %417 %418 %416 
                                                      OpStore %412 %419 
                         read_only Texture2D %421 = OpLoad %387 
                                     sampler %422 = OpLoad %389 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_3 %424 = OpLoad %412 
                                         f32 %425 = OpCompositeExtract %424 2 
                                         f32 %426 = OpImageSampleDrefExplicitLod %423 %424 %425 Lod %6 
                                                      OpStore %420 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 1 
                                       f32_4 %429 = OpLoad %231 
                                       f32_4 %430 = OpVectorShuffle %429 %429 2 3 1 2 
                                       f32_4 %431 = OpFMul %428 %430 
                                                      OpStore %250 %431 
                                         f32 %432 = OpLoad %420 
                                Private f32* %433 = OpAccessChain %250 %280 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                Private f32* %436 = OpAccessChain %9 %27 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %250 %27 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %405 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFAdd %440 %442 
                                Private f32* %444 = OpAccessChain %9 %27 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %250 %36 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %386 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %27 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFAdd %448 %450 
                                Private f32* %452 = OpAccessChain %9 %27 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %245 %280 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %223 %286 
                                                      OpStore %455 %454 
                                       f32_4 %456 = OpLoad %53 
                                       f32_4 %457 = OpVectorShuffle %456 %456 0 1 0 1 
                              Uniform f32_4* %458 = OpAccessChain %63 %165 
                                       f32_4 %459 = OpLoad %458 
                                       f32_4 %460 = OpVectorShuffle %459 %459 0 1 0 1 
                                       f32_4 %461 = OpFMul %457 %460 
                                       f32_4 %462 = OpLoad %223 
                                       f32_4 %463 = OpVectorShuffle %462 %462 3 1 3 2 
                                       f32_4 %464 = OpFAdd %461 %463 
                                                      OpStore %199 %464 
                                       f32_4 %465 = OpLoad %223 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 2 
                                       f32_4 %467 = OpLoad %245 
                                       f32_4 %468 = OpVectorShuffle %467 %466 0 4 2 5 
                                                      OpStore %245 %468 
                                       f32_4 %470 = OpLoad %199 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                Private f32* %472 = OpAccessChain %9 %36 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpCompositeExtract %471 0 
                                         f32 %475 = OpCompositeExtract %471 1 
                                       f32_3 %476 = OpCompositeConstruct %474 %475 %473 
                                                      OpStore %469 %476 
                         read_only Texture2D %477 = OpLoad %387 
                                     sampler %478 = OpLoad %389 
                  read_only Texture2DSampled %479 = OpSampledImage %477 %478 
                                       f32_3 %480 = OpLoad %469 
                                         f32 %481 = OpCompositeExtract %480 2 
                                         f32 %482 = OpImageSampleDrefExplicitLod %479 %480 %481 Lod %6 
                                                      OpStore %386 %482 
                                       f32_4 %484 = OpLoad %199 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 3 
                                Private f32* %486 = OpAccessChain %9 %36 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpCompositeExtract %485 0 
                                         f32 %489 = OpCompositeExtract %485 1 
                                       f32_3 %490 = OpCompositeConstruct %488 %489 %487 
                                                      OpStore %483 %490 
                         read_only Texture2D %491 = OpLoad %387 
                                     sampler %492 = OpLoad %389 
                  read_only Texture2DSampled %493 = OpSampledImage %491 %492 
                                       f32_3 %494 = OpLoad %483 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %405 %496 
                                Private f32* %497 = OpAccessChain %250 %286 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpLoad %386 
                                         f32 %500 = OpFMul %498 %499 
                                Private f32* %501 = OpAccessChain %9 %27 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %27 
                                                      OpStore %504 %503 
                                       f32_4 %505 = OpLoad %53 
                                       f32_4 %506 = OpVectorShuffle %505 %505 0 1 0 1 
                              Uniform f32_4* %507 = OpAccessChain %63 %165 
                                       f32_4 %508 = OpLoad %507 
                                       f32_4 %509 = OpVectorShuffle %508 %508 0 1 0 1 
                                       f32_4 %510 = OpFMul %506 %509 
                                       f32_4 %511 = OpLoad %245 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 1 2 1 
                                       f32_4 %513 = OpFAdd %510 %512 
                                                      OpStore %199 %513 
                                       f32_4 %514 = OpLoad %53 
                                       f32_4 %515 = OpVectorShuffle %514 %514 0 1 0 1 
                              Uniform f32_4* %516 = OpAccessChain %63 %165 
                                       f32_4 %517 = OpLoad %516 
                                       f32_4 %518 = OpVectorShuffle %517 %517 0 1 0 1 
                                       f32_4 %519 = OpFMul %515 %518 
                                       f32_4 %520 = OpLoad %245 
                                       f32_4 %521 = OpVectorShuffle %520 %520 0 3 2 3 
                                       f32_4 %522 = OpFAdd %519 %521 
                                                      OpStore %223 %522 
                                       f32_4 %524 = OpLoad %199 
                                       f32_2 %525 = OpVectorShuffle %524 %524 0 1 
                                Private f32* %526 = OpAccessChain %9 %36 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpCompositeExtract %525 0 
                                         f32 %529 = OpCompositeExtract %525 1 
                                       f32_3 %530 = OpCompositeConstruct %528 %529 %527 
                                                      OpStore %523 %530 
                         read_only Texture2D %532 = OpLoad %387 
                                     sampler %533 = OpLoad %389 
                  read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                       f32_3 %535 = OpLoad %523 
                                         f32 %536 = OpCompositeExtract %535 2 
                                         f32 %537 = OpImageSampleDrefExplicitLod %534 %535 %536 Lod %6 
                                                      OpStore %531 %537 
                                       f32_4 %539 = OpLoad %199 
                                       f32_2 %540 = OpVectorShuffle %539 %539 2 3 
                                Private f32* %541 = OpAccessChain %9 %36 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpCompositeExtract %540 0 
                                         f32 %544 = OpCompositeExtract %540 1 
                                       f32_3 %545 = OpCompositeConstruct %543 %544 %542 
                                                      OpStore %538 %545 
                         read_only Texture2D %547 = OpLoad %387 
                                     sampler %548 = OpLoad %389 
                  read_only Texture2DSampled %549 = OpSampledImage %547 %548 
                                       f32_3 %550 = OpLoad %538 
                                         f32 %551 = OpCompositeExtract %550 2 
                                         f32 %552 = OpImageSampleDrefExplicitLod %549 %550 %551 Lod %6 
                                                      OpStore %546 %552 
                                       f32_4 %553 = OpLoad %9 
                                       f32_4 %554 = OpVectorShuffle %553 %553 1 1 3 3 
                                       f32_4 %555 = OpLoad %231 
                                       f32_4 %556 = OpFMul %554 %555 
                                                      OpStore %199 %556 
                                Private f32* %558 = OpAccessChain %9 %286 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %231 %280 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFMul %559 %561 
                                                      OpStore %557 %562 
                                Private f32* %563 = OpAccessChain %199 %27 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpLoad %531 
                                         f32 %566 = OpFMul %564 %565 
                                Private f32* %567 = OpAccessChain %9 %27 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %9 %27 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %199 %280 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpLoad %546 
                                         f32 %574 = OpFMul %572 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFAdd %574 %576 
                                Private f32* %578 = OpAccessChain %9 %27 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %199 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpLoad %405 
                                         f32 %582 = OpFMul %580 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFAdd %582 %584 
                                Private f32* %586 = OpAccessChain %9 %27 
                                                      OpStore %586 %585 
                                       f32_4 %588 = OpLoad %223 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                Private f32* %590 = OpAccessChain %9 %36 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpCompositeExtract %589 0 
                                         f32 %593 = OpCompositeExtract %589 1 
                                       f32_3 %594 = OpCompositeConstruct %592 %593 %591 
                                                      OpStore %587 %594 
                         read_only Texture2D %596 = OpLoad %387 
                                     sampler %597 = OpLoad %389 
                  read_only Texture2DSampled %598 = OpSampledImage %596 %597 
                                       f32_3 %599 = OpLoad %587 
                                         f32 %600 = OpCompositeExtract %599 2 
                                         f32 %601 = OpImageSampleDrefExplicitLod %598 %599 %600 Lod %6 
                                                      OpStore %595 %601 
                                       f32_4 %603 = OpLoad %223 
                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
                                Private f32* %605 = OpAccessChain %9 %36 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpCompositeExtract %604 0 
                                         f32 %608 = OpCompositeExtract %604 1 
                                       f32_3 %609 = OpCompositeConstruct %607 %608 %606 
                                                      OpStore %602 %609 
                         read_only Texture2D %611 = OpLoad %387 
                                     sampler %612 = OpLoad %389 
                  read_only Texture2DSampled %613 = OpSampledImage %611 %612 
                                       f32_3 %614 = OpLoad %602 
                                         f32 %615 = OpCompositeExtract %614 2 
                                         f32 %616 = OpImageSampleDrefExplicitLod %613 %614 %615 Lod %6 
                                                      OpStore %610 %616 
                                Private f32* %617 = OpAccessChain %199 %286 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpLoad %595 
                                         f32 %620 = OpFMul %618 %619 
                                Private f32* %621 = OpAccessChain %9 %27 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpFAdd %620 %622 
                                Private f32* %624 = OpAccessChain %9 %27 
                                                      OpStore %624 %623 
                                         f32 %625 = OpLoad %557 
                                         f32 %626 = OpLoad %610 
                                         f32 %627 = OpFMul %625 %626 
                                Private f32* %628 = OpAccessChain %9 %27 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFAdd %627 %629 
                                Private f32* %631 = OpAccessChain %9 %27 
                                                      OpStore %631 %630 
                                Uniform f32* %633 = OpAccessChain %63 %87 %27 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFNegate %634 
                                         f32 %636 = OpFAdd %635 %34 
                                                      OpStore %557 %636 
                                       f32_4 %637 = OpLoad %9 
                                       f32_4 %638 = OpVectorShuffle %637 %637 0 0 0 0 
                                         f32 %639 = OpLoad %557 
                                       f32_4 %640 = OpCompositeConstruct %639 %639 %639 %639 
                                       f32_4 %641 = OpFMul %638 %640 
                              Uniform f32_4* %642 = OpAccessChain %63 %87 
                                       f32_4 %643 = OpLoad %642 
                                       f32_4 %644 = OpVectorShuffle %643 %643 0 0 0 0 
                                       f32_4 %645 = OpFAdd %641 %644 
                                                      OpStore %9 %645 
                                       f32_4 %648 = OpLoad %9 
                                                      OpStore %647 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 650
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %647 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 RelaxedPrecision 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %647 Location 647 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_2 %197 = OpConstantComposite %196 %196 
                              Private f32_4* %199 = OpVariable Private 
                                       f32_2 %203 = OpConstantComposite %34 %34 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_2 %217 = OpConstantComposite %216 %216 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                       f32_4 %234 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %280 = OpConstant 1 
                                         u32 %286 = OpConstant 3 
                                         f32 %317 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %317 %318 %319 
                                             %378 = OpTypePointer Function %42 
                                Private f32* %386 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
                                             %391 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                Private f32* %405 = OpVariable Private 
                                Private f32* %420 = OpVariable Private 
                                Private f32* %531 = OpVariable Private 
                                Private f32* %546 = OpVariable Private 
                                Private f32* %557 = OpVariable Private 
                                Private f32* %595 = OpVariable Private 
                                Private f32* %610 = OpVariable Private 
                                             %632 = OpTypePointer Uniform %6 
                                             %646 = OpTypePointer Output %7 
                               Output f32_4* %647 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %379 = OpVariable Function 
                             Function f32_3* %397 = OpVariable Function 
                             Function f32_3* %412 = OpVariable Function 
                             Function f32_3* %469 = OpVariable Function 
                             Function f32_3* %483 = OpVariable Function 
                             Function f32_3* %523 = OpVariable Function 
                             Function f32_3* %538 = OpVariable Function 
                             Function f32_3* %587 = OpVariable Function 
                             Function f32_3* %602 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %198 = OpExtInst %1 37 %195 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpFNegate %201 
                                       f32_2 %204 = OpFAdd %202 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_2 %207 = OpLoad %193 
                                       f32_2 %208 = OpFNegate %207 
                                       f32_2 %209 = OpLoad %193 
                                       f32_2 %210 = OpFMul %208 %209 
                                       f32_4 %211 = OpLoad %199 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                                      OpStore %193 %213 
                                       f32_4 %214 = OpLoad %199 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %199 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore %199 %220 
                                       f32_2 %221 = OpLoad %193 
                                       f32_2 %222 = OpFAdd %221 %203 
                                                      OpStore %193 %222 
                                       f32_2 %224 = OpLoad %193 
                                       f32_2 %225 = OpFMul %224 %217 
                                       f32_4 %226 = OpLoad %223 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 2 3 
                                                      OpStore %223 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpExtInst %1 40 %229 %197 
                                                      OpStore %193 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 0 0 1 1 
                                       f32_4 %235 = OpFAdd %233 %234 
                                                      OpStore %231 %235 
                                       f32_2 %236 = OpLoad %193 
                                       f32_2 %237 = OpFNegate %236 
                                       f32_2 %238 = OpLoad %193 
                                       f32_2 %239 = OpFMul %237 %238 
                                       f32_4 %240 = OpLoad %231 
                                       f32_2 %241 = OpVectorShuffle %240 %240 1 3 
                                       f32_2 %242 = OpFAdd %239 %241 
                                                      OpStore %193 %242 
                                       f32_2 %243 = OpLoad %193 
                                       f32_2 %244 = OpFAdd %243 %203 
                                                      OpStore %193 %244 
                                       f32_2 %246 = OpLoad %193 
                                       f32_2 %247 = OpFMul %246 %217 
                                       f32_4 %248 = OpLoad %245 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 2 3 
                                                      OpStore %245 %249 
                                       f32_4 %251 = OpLoad %231 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 0 2 2 
                                       f32_4 %253 = OpLoad %231 
                                       f32_4 %254 = OpVectorShuffle %253 %253 0 0 2 2 
                                       f32_4 %255 = OpFMul %252 %254 
                                                      OpStore %250 %255 
                                       f32_4 %256 = OpLoad %231 
                                       f32_2 %257 = OpVectorShuffle %256 %256 1 3 
                                       f32_2 %258 = OpFMul %257 %217 
                                                      OpStore %193 %258 
                                       f32_4 %259 = OpLoad %250 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 2 
                                       f32_2 %261 = OpFMul %260 %171 
                                       f32_4 %262 = OpLoad %9 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFNegate %263 
                                       f32_2 %265 = OpFAdd %261 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 2 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %250 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %199 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %199 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %276 %217 
                                       f32_4 %278 = OpLoad %231 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %231 %279 
                                Private f32* %281 = OpAccessChain %231 %280 
                                         f32 %282 = OpLoad %281 
                                Private f32* %283 = OpAccessChain %223 %36 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %193 %280 
                                         f32 %285 = OpLoad %284 
                                Private f32* %287 = OpAccessChain %223 %286 
                                                      OpStore %287 %285 
                                Private f32* %288 = OpAccessChain %193 %27 
                                         f32 %289 = OpLoad %288 
                                Private f32* %290 = OpAccessChain %231 %286 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %199 
                                       f32_2 %292 = OpVectorShuffle %291 %291 1 2 
                                       f32_4 %293 = OpLoad %245 
                                       f32_4 %294 = OpVectorShuffle %293 %292 0 1 4 5 
                                                      OpStore %245 %294 
                                       f32_4 %295 = OpLoad %223 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 1 3 
                                       f32_4 %297 = OpLoad %245 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 1 3 
                                       f32_3 %299 = OpFAdd %296 %298 
                                       f32_4 %300 = OpLoad %9 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %9 %301 
                                Private f32* %302 = OpAccessChain %223 %27 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %231 %36 
                                                      OpStore %304 %303 
                                       f32_4 %305 = OpLoad %245 
                                       f32_3 %306 = OpVectorShuffle %305 %305 2 1 3 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                       f32_3 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %223 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %223 %311 
                                Private f32* %312 = OpAccessChain %245 %27 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %199 %36 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %223 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %321 = OpFAdd %316 %320 
                                       f32_4 %322 = OpLoad %223 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %223 %323 
                                       f32_4 %324 = OpLoad %223 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %63 %165 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 1 1 1 
                                       f32_3 %329 = OpFMul %325 %328 
                                       f32_4 %330 = OpLoad %223 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %223 %331 
                                Private f32* %332 = OpAccessChain %223 %27 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %245 %286 
                                                      OpStore %334 %333 
                                       f32_4 %335 = OpLoad %199 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 3 0 2 
                                       f32_4 %337 = OpLoad %231 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 3 0 2 
                                       f32_4 %339 = OpFAdd %336 %338 
                                                      OpStore %231 %339 
                                       f32_4 %340 = OpLoad %199 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpLoad %231 
                                       f32_3 %343 = OpVectorShuffle %342 %342 2 3 1 
                                       f32_3 %344 = OpFDiv %341 %343 
                                       f32_4 %345 = OpLoad %199 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %199 %346 
                                       f32_4 %347 = OpLoad %199 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %348 %320 
                                       f32_4 %350 = OpLoad %199 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %199 %351 
                                       f32_4 %352 = OpLoad %199 
                                       f32_3 %353 = OpVectorShuffle %352 %352 1 0 2 
                              Uniform f32_4* %354 = OpAccessChain %63 %165 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                                       f32_3 %357 = OpFMul %353 %356 
                                       f32_4 %358 = OpLoad %245 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %245 %359 
                                       f32_4 %360 = OpLoad %53 
                                       f32_4 %361 = OpVectorShuffle %360 %360 0 1 0 1 
                              Uniform f32_4* %362 = OpAccessChain %63 %165 
                                       f32_4 %363 = OpLoad %362 
                                       f32_4 %364 = OpVectorShuffle %363 %363 0 1 0 1 
                                       f32_4 %365 = OpFMul %361 %364 
                                       f32_4 %366 = OpLoad %245 
                                       f32_4 %367 = OpVectorShuffle %366 %366 1 3 0 3 
                                       f32_4 %368 = OpFAdd %365 %367 
                                                      OpStore %199 %368 
                                       f32_4 %369 = OpLoad %53 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                              Uniform f32_4* %371 = OpAccessChain %63 %165 
                                       f32_4 %372 = OpLoad %371 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                                       f32_2 %374 = OpFMul %370 %373 
                                       f32_4 %375 = OpLoad %245 
                                       f32_2 %376 = OpVectorShuffle %375 %375 2 3 
                                       f32_2 %377 = OpFAdd %374 %376 
                                                      OpStore %193 %377 
                                       f32_2 %380 = OpLoad %193 
                                Private f32* %381 = OpAccessChain %9 %36 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpCompositeExtract %380 0 
                                         f32 %384 = OpCompositeExtract %380 1 
                                       f32_3 %385 = OpCompositeConstruct %383 %384 %382 
                                                      OpStore %379 %385 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %393 = OpSampledImage %388 %390 
                                       f32_3 %394 = OpLoad %379 
                                         f32 %395 = OpCompositeExtract %394 2 
                                         f32 %396 = OpImageSampleDrefExplicitLod %393 %394 %395 Lod %6 
                                                      OpStore %386 %396 
                                       f32_4 %398 = OpLoad %199 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                Private f32* %400 = OpAccessChain %9 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpCompositeExtract %399 0 
                                         f32 %403 = OpCompositeExtract %399 1 
                                       f32_3 %404 = OpCompositeConstruct %402 %403 %401 
                                                      OpStore %397 %404 
                         read_only Texture2D %406 = OpLoad %387 
                                     sampler %407 = OpLoad %389 
                  read_only Texture2DSampled %408 = OpSampledImage %406 %407 
                                       f32_3 %409 = OpLoad %397 
                                         f32 %410 = OpCompositeExtract %409 2 
                                         f32 %411 = OpImageSampleDrefExplicitLod %408 %409 %410 Lod %6 
                                                      OpStore %405 %411 
                                       f32_4 %413 = OpLoad %199 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                Private f32* %415 = OpAccessChain %9 %36 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpCompositeExtract %414 0 
                                         f32 %418 = OpCompositeExtract %414 1 
                                       f32_3 %419 = OpCompositeConstruct %417 %418 %416 
                                                      OpStore %412 %419 
                         read_only Texture2D %421 = OpLoad %387 
                                     sampler %422 = OpLoad %389 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_3 %424 = OpLoad %412 
                                         f32 %425 = OpCompositeExtract %424 2 
                                         f32 %426 = OpImageSampleDrefExplicitLod %423 %424 %425 Lod %6 
                                                      OpStore %420 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %427 0 0 0 1 
                                       f32_4 %429 = OpLoad %231 
                                       f32_4 %430 = OpVectorShuffle %429 %429 2 3 1 2 
                                       f32_4 %431 = OpFMul %428 %430 
                                                      OpStore %250 %431 
                                         f32 %432 = OpLoad %420 
                                Private f32* %433 = OpAccessChain %250 %280 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                Private f32* %436 = OpAccessChain %9 %27 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %250 %27 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %405 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFAdd %440 %442 
                                Private f32* %444 = OpAccessChain %9 %27 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %250 %36 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %386 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %27 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFAdd %448 %450 
                                Private f32* %452 = OpAccessChain %9 %27 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %245 %280 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %223 %286 
                                                      OpStore %455 %454 
                                       f32_4 %456 = OpLoad %53 
                                       f32_4 %457 = OpVectorShuffle %456 %456 0 1 0 1 
                              Uniform f32_4* %458 = OpAccessChain %63 %165 
                                       f32_4 %459 = OpLoad %458 
                                       f32_4 %460 = OpVectorShuffle %459 %459 0 1 0 1 
                                       f32_4 %461 = OpFMul %457 %460 
                                       f32_4 %462 = OpLoad %223 
                                       f32_4 %463 = OpVectorShuffle %462 %462 3 1 3 2 
                                       f32_4 %464 = OpFAdd %461 %463 
                                                      OpStore %199 %464 
                                       f32_4 %465 = OpLoad %223 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 2 
                                       f32_4 %467 = OpLoad %245 
                                       f32_4 %468 = OpVectorShuffle %467 %466 0 4 2 5 
                                                      OpStore %245 %468 
                                       f32_4 %470 = OpLoad %199 
                                       f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                Private f32* %472 = OpAccessChain %9 %36 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpCompositeExtract %471 0 
                                         f32 %475 = OpCompositeExtract %471 1 
                                       f32_3 %476 = OpCompositeConstruct %474 %475 %473 
                                                      OpStore %469 %476 
                         read_only Texture2D %477 = OpLoad %387 
                                     sampler %478 = OpLoad %389 
                  read_only Texture2DSampled %479 = OpSampledImage %477 %478 
                                       f32_3 %480 = OpLoad %469 
                                         f32 %481 = OpCompositeExtract %480 2 
                                         f32 %482 = OpImageSampleDrefExplicitLod %479 %480 %481 Lod %6 
                                                      OpStore %386 %482 
                                       f32_4 %484 = OpLoad %199 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 3 
                                Private f32* %486 = OpAccessChain %9 %36 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpCompositeExtract %485 0 
                                         f32 %489 = OpCompositeExtract %485 1 
                                       f32_3 %490 = OpCompositeConstruct %488 %489 %487 
                                                      OpStore %483 %490 
                         read_only Texture2D %491 = OpLoad %387 
                                     sampler %492 = OpLoad %389 
                  read_only Texture2DSampled %493 = OpSampledImage %491 %492 
                                       f32_3 %494 = OpLoad %483 
                                         f32 %495 = OpCompositeExtract %494 2 
                                         f32 %496 = OpImageSampleDrefExplicitLod %493 %494 %495 Lod %6 
                                                      OpStore %405 %496 
                                Private f32* %497 = OpAccessChain %250 %286 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpLoad %386 
                                         f32 %500 = OpFMul %498 %499 
                                Private f32* %501 = OpAccessChain %9 %27 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %27 
                                                      OpStore %504 %503 
                                       f32_4 %505 = OpLoad %53 
                                       f32_4 %506 = OpVectorShuffle %505 %505 0 1 0 1 
                              Uniform f32_4* %507 = OpAccessChain %63 %165 
                                       f32_4 %508 = OpLoad %507 
                                       f32_4 %509 = OpVectorShuffle %508 %508 0 1 0 1 
                                       f32_4 %510 = OpFMul %506 %509 
                                       f32_4 %511 = OpLoad %245 
                                       f32_4 %512 = OpVectorShuffle %511 %511 0 1 2 1 
                                       f32_4 %513 = OpFAdd %510 %512 
                                                      OpStore %199 %513 
                                       f32_4 %514 = OpLoad %53 
                                       f32_4 %515 = OpVectorShuffle %514 %514 0 1 0 1 
                              Uniform f32_4* %516 = OpAccessChain %63 %165 
                                       f32_4 %517 = OpLoad %516 
                                       f32_4 %518 = OpVectorShuffle %517 %517 0 1 0 1 
                                       f32_4 %519 = OpFMul %515 %518 
                                       f32_4 %520 = OpLoad %245 
                                       f32_4 %521 = OpVectorShuffle %520 %520 0 3 2 3 
                                       f32_4 %522 = OpFAdd %519 %521 
                                                      OpStore %223 %522 
                                       f32_4 %524 = OpLoad %199 
                                       f32_2 %525 = OpVectorShuffle %524 %524 0 1 
                                Private f32* %526 = OpAccessChain %9 %36 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpCompositeExtract %525 0 
                                         f32 %529 = OpCompositeExtract %525 1 
                                       f32_3 %530 = OpCompositeConstruct %528 %529 %527 
                                                      OpStore %523 %530 
                         read_only Texture2D %532 = OpLoad %387 
                                     sampler %533 = OpLoad %389 
                  read_only Texture2DSampled %534 = OpSampledImage %532 %533 
                                       f32_3 %535 = OpLoad %523 
                                         f32 %536 = OpCompositeExtract %535 2 
                                         f32 %537 = OpImageSampleDrefExplicitLod %534 %535 %536 Lod %6 
                                                      OpStore %531 %537 
                                       f32_4 %539 = OpLoad %199 
                                       f32_2 %540 = OpVectorShuffle %539 %539 2 3 
                                Private f32* %541 = OpAccessChain %9 %36 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpCompositeExtract %540 0 
                                         f32 %544 = OpCompositeExtract %540 1 
                                       f32_3 %545 = OpCompositeConstruct %543 %544 %542 
                                                      OpStore %538 %545 
                         read_only Texture2D %547 = OpLoad %387 
                                     sampler %548 = OpLoad %389 
                  read_only Texture2DSampled %549 = OpSampledImage %547 %548 
                                       f32_3 %550 = OpLoad %538 
                                         f32 %551 = OpCompositeExtract %550 2 
                                         f32 %552 = OpImageSampleDrefExplicitLod %549 %550 %551 Lod %6 
                                                      OpStore %546 %552 
                                       f32_4 %553 = OpLoad %9 
                                       f32_4 %554 = OpVectorShuffle %553 %553 1 1 3 3 
                                       f32_4 %555 = OpLoad %231 
                                       f32_4 %556 = OpFMul %554 %555 
                                                      OpStore %199 %556 
                                Private f32* %558 = OpAccessChain %9 %286 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %231 %280 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFMul %559 %561 
                                                      OpStore %557 %562 
                                Private f32* %563 = OpAccessChain %199 %27 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpLoad %531 
                                         f32 %566 = OpFMul %564 %565 
                                Private f32* %567 = OpAccessChain %9 %27 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %9 %27 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %199 %280 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpLoad %546 
                                         f32 %574 = OpFMul %572 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFAdd %574 %576 
                                Private f32* %578 = OpAccessChain %9 %27 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %199 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpLoad %405 
                                         f32 %582 = OpFMul %580 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFAdd %582 %584 
                                Private f32* %586 = OpAccessChain %9 %27 
                                                      OpStore %586 %585 
                                       f32_4 %588 = OpLoad %223 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                Private f32* %590 = OpAccessChain %9 %36 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpCompositeExtract %589 0 
                                         f32 %593 = OpCompositeExtract %589 1 
                                       f32_3 %594 = OpCompositeConstruct %592 %593 %591 
                                                      OpStore %587 %594 
                         read_only Texture2D %596 = OpLoad %387 
                                     sampler %597 = OpLoad %389 
                  read_only Texture2DSampled %598 = OpSampledImage %596 %597 
                                       f32_3 %599 = OpLoad %587 
                                         f32 %600 = OpCompositeExtract %599 2 
                                         f32 %601 = OpImageSampleDrefExplicitLod %598 %599 %600 Lod %6 
                                                      OpStore %595 %601 
                                       f32_4 %603 = OpLoad %223 
                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
                                Private f32* %605 = OpAccessChain %9 %36 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpCompositeExtract %604 0 
                                         f32 %608 = OpCompositeExtract %604 1 
                                       f32_3 %609 = OpCompositeConstruct %607 %608 %606 
                                                      OpStore %602 %609 
                         read_only Texture2D %611 = OpLoad %387 
                                     sampler %612 = OpLoad %389 
                  read_only Texture2DSampled %613 = OpSampledImage %611 %612 
                                       f32_3 %614 = OpLoad %602 
                                         f32 %615 = OpCompositeExtract %614 2 
                                         f32 %616 = OpImageSampleDrefExplicitLod %613 %614 %615 Lod %6 
                                                      OpStore %610 %616 
                                Private f32* %617 = OpAccessChain %199 %286 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpLoad %595 
                                         f32 %620 = OpFMul %618 %619 
                                Private f32* %621 = OpAccessChain %9 %27 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpFAdd %620 %622 
                                Private f32* %624 = OpAccessChain %9 %27 
                                                      OpStore %624 %623 
                                         f32 %625 = OpLoad %557 
                                         f32 %626 = OpLoad %610 
                                         f32 %627 = OpFMul %625 %626 
                                Private f32* %628 = OpAccessChain %9 %27 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFAdd %627 %629 
                                Private f32* %631 = OpAccessChain %9 %27 
                                                      OpStore %631 %630 
                                Uniform f32* %633 = OpAccessChain %63 %87 %27 
                                         f32 %634 = OpLoad %633 
                                         f32 %635 = OpFNegate %634 
                                         f32 %636 = OpFAdd %635 %34 
                                                      OpStore %557 %636 
                                       f32_4 %637 = OpLoad %9 
                                       f32_4 %638 = OpVectorShuffle %637 %637 0 0 0 0 
                                         f32 %639 = OpLoad %557 
                                       f32_4 %640 = OpCompositeConstruct %639 %639 %639 %639 
                                       f32_4 %641 = OpFMul %638 %640 
                              Uniform f32_4* %642 = OpAccessChain %63 %87 
                                       f32_4 %643 = OpLoad %642 
                                       f32_4 %644 = OpVectorShuffle %643 %643 0 0 0 0 
                                       f32_4 %645 = OpFAdd %641 %644 
                                                      OpStore %9 %645 
                                       f32_4 %648 = OpLoad %9 
                                                      OpStore %647 %648 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "vulkan hw_tier00 " {
""
}
SubProgram "vulkan hw_tier01 " {
""
}
SubProgram "vulkan hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier00 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier01 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan hw_tier02 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
}